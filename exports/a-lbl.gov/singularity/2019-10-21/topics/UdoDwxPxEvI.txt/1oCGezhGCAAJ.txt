Date: Tue, 18 Sep 2018 12:30:39 -0700 (PDT)
From: Mike Moore <wxdu...@gmail.com>
To: singularity <singu...@lbl.gov>
Message-Id: <8ca86754-1ce0-4dc6-98bf-61b10c908084@lbl.gov>
Subject: sregistry-cli cross-os compatibility issue
MIME-Version: 1.0
Content-Type: multipart/mixed; 
	boundary="----=_Part_2288_275351022.1537299039314"

------=_Part_2288_275351022.1537299039314
Content-Type: multipart/alternative; 
	boundary="----=_Part_2289_1428256284.1537299039315"

------=_Part_2289_1428256284.1537299039315
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit

Hi everyone,

  I created a Singularity container for the sregistry-cli command.  This 
container will be used to upload containers to our internal sregistry.  
I've attached the singularity recipe for the container.  The container is 
bootstrapped from the continuumio/miniconda3 docker, just like the 
dockerfile example from the sregistry-cli tarball. The container builds 
fine with no issues.

  The problem I am running into is that the container behaves differently 
if the bare-metal OS is CentOS 6 or CentOS 7.  If I am running CentOS 7, 
sregistry-cli (the sregistry command) works fine.  

Singularity sregistry-cli.simg:/etc/ssl/certs> sregistry -h
usage: sregistry [-h] [--debug] [--quiet]
                 
{version,backend,shell,images,inspect,get,add,mv,rename,rm,rmi,search,push,pull,delete}
                 ...

Singularity Registry tools

optional arguments:
  -h, --help            show this help message and exit
  --debug               use verbose logging to debug.
  --quiet               suppress additional output.

actions:
  actions for Singularity Registry Global Client

  
{version,backend,shell,images,inspect,get,add,mv,rename,rm,rmi,search,push,pull,delete}
                        sregistry actions
    version             show software version
    backend             list, remove, or activate a backend.
    shell               shell into a session a client.
    images              list local images, optionally with query
    inspect             inspect a container in your database
    get                 get a container path from your storage
    add                 add a container to local storage
    mv                  move a container and update database
    rename              rename a container in storage
    rm                  remove a container from the database
    rmi                 remove a container from the database AND storage
    search              search remote containers
    push                push one or more images to a registry
    pull                pull an image from a registry
    delete              delete an image from the registry.

However, if I run the exact same container on CentOS 6, I get the following:

Singularity sregistry-cli.simg:/gpfs/home01/home/michael_moore> sregistry -h
Traceback (most recent call last):
  File "/opt/conda/bin/sregistry", line 11, in <module>
    load_entry_point('sregistry==0.0.94', 'console_scripts', 'sregistry')()
  File 
"/opt/conda/lib/python3.6/site-packages/sregistry-0.0.94-py3.6.egg/sregistry/client/__init__.py", 
line 323, in main
    from sregistry.main import Client as cli
  File 
"/opt/conda/lib/python3.6/site-packages/sregistry-0.0.94-py3.6.egg/sregistry/main/__init__.py", 
line 26, in <module>
    from sregistry.main.base import ApiConnection
  File 
"/opt/conda/lib/python3.6/site-packages/sregistry-0.0.94-py3.6.egg/sregistry/main/base/__init__.py", 
line 54, in <module>
    from sregistry.defaults import SREGISTRY_DATABASE
  File 
"/opt/conda/lib/python3.6/site-packages/sregistry-0.0.94-py3.6.egg/sregistry/defaults.py", 
line 81, in <module>
    secrets = read_json(SREGISTRY_CLIENT_SECRETS)   
  File 
"/opt/conda/lib/python3.6/site-packages/sregistry-0.0.94-py3.6.egg/sregistry/utils/fileio.py", 
line 267, in read_json
    data = json.load(filey)
  File "/opt/conda/lib/python3.6/json/__init__.py", line 299, in load
    parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, 
**kw)
  File "/opt/conda/lib/python3.6/json/__init__.py", line 354, in loads
    return _default_decoder.decode(s)
  File "/opt/conda/lib/python3.6/json/decoder.py", line 339, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/opt/conda/lib/python3.6/json/decoder.py", line 355, in raw_decode
    obj, end = self.scan_once(s, idx)
json.decoder.JSONDecodeError: Expecting ',' delimiter: line 8 column 5 
(char 339)

So, I am very confused.  The miniconda docker is based on Ubuntu.  Is there 
something I missed when building from a docker container that makes the 
container look for something from the OS?  I thought the container would be 
complete enough to avoid compatibility issues like this.  Has anyone seen 
this issue before?

Thanks,
-Mike


------=_Part_2289_1428256284.1537299039315
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Hi everyone,<br><br>=C2=A0 I created a Singularity contain=
er for the sregistry-cli command.=C2=A0 This container will be used to uplo=
ad containers to our internal sregistry.=C2=A0 I&#39;ve attached the singul=
arity recipe for the container.=C2=A0 The container is bootstrapped from th=
e continuumio/miniconda3 docker, just like the dockerfile example from the =
sregistry-cli tarball. The container builds fine with no issues.<br><br>=C2=
=A0 The problem I am running into is that the container behaves differently=
 if the bare-metal OS is CentOS 6 or CentOS 7.=C2=A0 If I am running CentOS=
 7, sregistry-cli (the sregistry command) works fine.=C2=A0 <br><br><font s=
ize=3D"2"><span style=3D"font-family: courier new,monospace;">Singularity s=
registry-cli.simg:/etc/ssl/certs&gt; sregistry -h<br>usage: sregistry [-h] =
[--debug] [--quiet]<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=
=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 {version,backend,shell,images=
,inspect,get,add,mv,rename,rm,rmi,search,push,pull,delete}<br>=C2=A0=C2=A0=
=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=
=A0=C2=A0 ...<br><br>Singularity Registry tools<br><br>optional arguments:<=
br>=C2=A0 -h, --help=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=
=C2=A0=C2=A0 show this help message and exit<br>=C2=A0 --debug=C2=A0=C2=A0=
=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 us=
e verbose logging to debug.<br>=C2=A0 --quiet=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=
=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 suppress additional =
output.<br><br>actions:<br>=C2=A0 actions for Singularity Registry Global C=
lient<br><br>=C2=A0 {version,backend,shell,images,inspect,get,add,mv,rename=
,rm,rmi,search,push,pull,delete}<br>=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=
=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=
=C2=A0=C2=A0=C2=A0=C2=A0 sregistry actions<br>=C2=A0=C2=A0=C2=A0 version=C2=
=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 show =
software version<br>=C2=A0=C2=A0=C2=A0 backend=C2=A0=C2=A0=C2=A0=C2=A0=C2=
=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 list, remove, or activate a b=
ackend.<br>=C2=A0=C2=A0=C2=A0 shell=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=
=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 shell into a session a client=
.<br>=C2=A0=C2=A0=C2=A0 images=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=
=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 list local images, optionally with query<=
br>=C2=A0=C2=A0=C2=A0 inspect=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=
=A0=C2=A0=C2=A0=C2=A0=C2=A0 inspect a container in your database<br>=C2=A0=
=C2=A0=C2=A0 get=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=
=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 get a container path from your stor=
age<br>=C2=A0=C2=A0=C2=A0 add=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=
=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 add a container to loca=
l storage<br>=C2=A0=C2=A0=C2=A0 mv=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=
=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 move a cont=
ainer and update database<br>=C2=A0=C2=A0=C2=A0 rename=C2=A0=C2=A0=C2=A0=C2=
=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 rename a containe=
r in storage<br>=C2=A0=C2=A0=C2=A0 rm=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=
=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 remove a=
 container from the database<br>=C2=A0=C2=A0=C2=A0 rmi=C2=A0=C2=A0=C2=A0=C2=
=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=
 remove a container from the database AND storage<br>=C2=A0=C2=A0=C2=A0 sea=
rch=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=
=C2=A0 search remote containers<br>=C2=A0=C2=A0=C2=A0 push=C2=A0=C2=A0=C2=
=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=
 push one or more images to a registry<br>=C2=A0=C2=A0=C2=A0 pull=C2=A0=C2=
=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=
=C2=A0 pull an image from a registry<br>=C2=A0=C2=A0=C2=A0 delete=C2=A0=C2=
=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0=C2=A0 delet=
e an image from the registry.</span></font><br><br>However, if I run the ex=
act same container on CentOS 6, I get the following:<br><br><span style=3D"=
font-family: courier new,monospace;">Singularity sregistry-cli.simg:/gpfs/h=
ome01/home/michael_moore&gt; sregistry -h<br>Traceback (most recent call la=
st):<br>=C2=A0 File &quot;/opt/conda/bin/sregistry&quot;, line 11, in &lt;m=
odule&gt;<br>=C2=A0=C2=A0=C2=A0 load_entry_point(&#39;sregistry=3D=3D0.0.94=
&#39;, &#39;console_scripts&#39;, &#39;sregistry&#39;)()<br>=C2=A0 File &qu=
ot;/opt/conda/lib/python3.6/site-packages/sregistry-0.0.94-py3.6.egg/sregis=
try/client/__init__.py&quot;, line 323, in main<br>=C2=A0=C2=A0=C2=A0 from =
sregistry.main import Client as cli<br>=C2=A0 File &quot;/opt/conda/lib/pyt=
hon3.6/site-packages/sregistry-0.0.94-py3.6.egg/sregistry/main/__init__.py&=
quot;, line 26, in &lt;module&gt;<br>=C2=A0=C2=A0=C2=A0 from sregistry.main=
.base import ApiConnection<br>=C2=A0 File &quot;/opt/conda/lib/python3.6/si=
te-packages/sregistry-0.0.94-py3.6.egg/sregistry/main/base/__init__.py&quot=
;, line 54, in &lt;module&gt;<br>=C2=A0=C2=A0=C2=A0 from sregistry.defaults=
 import SREGISTRY_DATABASE<br>=C2=A0 File &quot;/opt/conda/lib/python3.6/si=
te-packages/sregistry-0.0.94-py3.6.egg/sregistry/defaults.py&quot;, line 81=
, in &lt;module&gt;<br>=C2=A0=C2=A0=C2=A0 secrets =3D read_json(SREGISTRY_C=
LIENT_SECRETS)=C2=A0=C2=A0 <br>=C2=A0 File &quot;/opt/conda/lib/python3.6/s=
ite-packages/sregistry-0.0.94-py3.6.egg/sregistry/utils/fileio.py&quot;, li=
ne 267, in read_json<br>=C2=A0=C2=A0=C2=A0 data =3D json.load(filey)<br>=C2=
=A0 File &quot;/opt/conda/lib/python3.6/json/__init__.py&quot;, line 299, i=
n load<br>=C2=A0=C2=A0=C2=A0 parse_constant=3Dparse_constant, object_pairs_=
hook=3Dobject_pairs_hook, **kw)<br>=C2=A0 File &quot;/opt/conda/lib/python3=
.6/json/__init__.py&quot;, line 354, in loads<br>=C2=A0=C2=A0=C2=A0 return =
_default_decoder.decode(s)<br>=C2=A0 File &quot;/opt/conda/lib/python3.6/js=
on/decoder.py&quot;, line 339, in decode<br>=C2=A0=C2=A0=C2=A0 obj, end =3D=
 self.raw_decode(s, idx=3D_w(s, 0).end())<br>=C2=A0 File &quot;/opt/conda/l=
ib/python3.6/json/decoder.py&quot;, line 355, in raw_decode<br>=C2=A0=C2=A0=
=C2=A0 obj, end =3D self.scan_once(s, idx)<br>json.decoder.JSONDecodeError:=
 Expecting &#39;,&#39; delimiter: line 8 column 5 (char 339)</span><br><br>=
So, I am very confused.=C2=A0 The miniconda docker is based on Ubuntu.=C2=
=A0 Is there something I missed when building from a docker container that =
makes the container look for something from the OS?=C2=A0 I thought the con=
tainer would be complete enough to avoid compatibility issues like this.=C2=
=A0 Has anyone seen this issue before?<br><br>Thanks,<br>-Mike<br><br></div=
>
------=_Part_2289_1428256284.1537299039315--

------=_Part_2288_275351022.1537299039314
Content-Type: application/octet-stream; name=sregistry-cli.def
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename=sregistry-cli.def
X-Attachment-Id: 80d9285d-8db0-4759-8edd-61ee4b4aedc9
Content-ID: <80d9285d-8db0-4759-8edd-61ee4b4aedc9>

# This recipe is to create a Singularity container that runs the sregistry-cli 
# tool for uploading container images to sregistry
Bootstrap: docker
From: continuumio/miniconda3:latest

%setup

%files
  /etc/ssl/certs/ca-bundle.trust.crt /etc/ssl/certs
  /etc/ssl/certs/nuance-ca.cer /etc/ssl/certs

%post

  # Create HPC mount points
  mkdir -p /gpfs /fs /.local/work /ceph
  ln -s /.local/work /work

  apt-get update && apt-get install -y git \
                    build-essential wget \
                    libtool squashfs-tools \
                    autotools-dev automake \
                    autoconf uuid-dev libssl-dev

  # Install Golang - Required to build singularity
  cd /usr/local
  wget https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz
  tar xvzf go1.10.3.linux-amd64.tar.gz
  rm -f go1.10.3.linux-amd64.tar.gz

  export GOROOT=/usr/local/go
  export GOPATH=/opt/go
  mkdir -p /opt/go
  export PATH=/opt/conda/bin:$GOROOT/bin:$GOPATH/bin:$PATH

  # Build Singularity
  mkdir -p $GOPATH/src/github.com/singularityware
  cd $GOPATH/src/github.com/singularityware
  git clone https://www.github.com/singularityware/singularity.git

  # Build Singularity
  cd singularity

  # Get go dependencies
  go get -u -v github.com/golang/dep/cmd/dep

  ./mconfig -p /usr/local
  cd ./builddir
  make
  make install

  # Build sregistry-cli
  cd /opt
  git clone https://www.github.com/singularityhub/sregistry-cli
  cd /opt/sregistry-cli
  /opt/conda/bin/pip install setuptools
  #/opt/conda/bin/pip install -r requirements.txt
  #/opt/conda/bin/pip install pyasn1==0.4.1
  /opt/conda/bin/pip install dateutils
  /opt/conda/bin/pip install sqlalchemy
  /opt/conda/bin/pip install requests_toolbelt
  /opt/conda/bin/python setup.py sdist
  /opt/conda/bin/python setup.py install
  apt-get clean

%environment
export REGISTRY_CLIENT=registry
export REQUESTS_CA_BUNDLE=/etc/ssl/certs/nuance-ca.cer
export PATH=/opt/conda/bin:$PATH
export SREGISTRY_CLIENT=registry

%runscript

------=_Part_2288_275351022.1537299039314--
