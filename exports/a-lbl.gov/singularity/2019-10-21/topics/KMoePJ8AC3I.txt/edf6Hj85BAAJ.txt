Date: Fri, 4 Aug 2017 07:00:13 -0700 (PDT)
From: Afif Elghraoui <afif.e...@gmail.com>
To: singularity <singu...@lbl.gov>
Message-Id: <ab0dff4c-d264-4ce5-b723-143182022851@lbl.gov>
In-Reply-To: <CAApQTTjU+=ASab7pEv8Vn=TOLY2h9j9av1+zAtK-x6qsZXZhxA@mail.gmail.com>
References: <CAApQTTjU+=ASab7pEv8Vn=TOLY2h9j9av1+zAtK-x6qsZXZhxA@mail.gmail.com>
Subject: Re: Container format change idea
MIME-Version: 1.0
Content-Type: multipart/mixed; 
	boundary="----=_Part_757_601077818.1501855213780"

------=_Part_757_601077818.1501855213780
Content-Type: multipart/alternative; 
	boundary="----=_Part_758_1314628106.1501855213780"

------=_Part_758_1314628106.1501855213780
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit



On Thursday, August 3, 2017 at 1:17:38 PM UTC-4, Gregory Kurtzer wrote:
>
> Personally, I see the negative as not even completely negative. It means 
> we will force the container management paradigm to something more akin to 
> compiling. Metaphorically, the definition file is the source code, and the 
> resulting container is the compiled result. When dealing with source code, 
> we don't edit the binary when there is a problem, we edit the source code 
> and then recompile. This will have to be the model going forth if we choose 
> immutable containers, and I actually consider this a good thing. It means 
> containers are derived from a recipe.
>
> There is an additional bit of support I can add to mitigate any 
> development issues that this might cause, for example, container 
> "sandboxes". Singularity already supports bootstrapping and running from a 
> container directory. So development and testing can still easily occur. And 
> when you are ready to create an image from that "sandbox", you could do it 
> directly from the sandbox (icky, but we can in theory support it), or build 
> from the definition file.
>
> [...]
>
> Or using a sandbox:
>
> # singularity build --sandbox /path/to/sandbox [any of the above targets]
> # singularity shell /path/to/sandbox
>
> And then after making the necessary changes to the sandbox, building an 
> image directly from the sandbox:
>
> # singularity build container.simg /path/to/sandbox
>
>
>  
So if I'm given an image and a definition file, how would I be able to know 
whether it was modified in a sandbox before being converted to an image? In 
that case, the definition file wouldn't necessarily correspond to the image.

Thanks and regards
Afif

------=_Part_758_1314628106.1501855213780
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><br><br>On Thursday, August 3, 2017 at 1:17:38 PM UTC-4, G=
regory Kurtzer wrote:<blockquote class=3D"gmail_quote" style=3D"margin: 0;m=
argin-left: 0.8ex;border-left: 1px #ccc solid;padding-left: 1ex;"><div dir=
=3D"ltr"><div></div><div>Personally, I see the negative as not even complet=
ely negative. It means we will force the container management paradigm to s=
omething more akin to compiling. Metaphorically, the definition file is the=
 source code, and the resulting container is the compiled result. When deal=
ing with source code, we don&#39;t edit the binary when there is a problem,=
 we edit the source code and then recompile. This will have to be the model=
 going forth if we choose immutable containers, and I actually consider thi=
s a good thing. It means containers are derived from a recipe.</div><div><b=
r></div><div>There is an additional bit of support I can add to mitigate an=
y development issues that this might cause, for example, container &quot;sa=
ndboxes&quot;. Singularity already supports bootstrapping and running from =
a container directory. So development and testing can still easily occur. A=
nd when you are ready to create an image from that &quot;sandbox&quot;, you=
 could do it directly from the sandbox (icky, but we can in theory support =
it), or build from the definition file.</div><div><br></div>[...]<br><div><=
br></div><div>Or using a sandbox:</div><div><br></div><div># singularity bu=
ild --sandbox /path/to/sandbox [any of the above targets]</div><div># singu=
larity shell /path/to/sandbox</div><div><br></div><div>And then after makin=
g the necessary changes to the sandbox, building an image directly from the=
 sandbox:</div><div><br></div><div># singularity build container.simg /path=
/to/sandbox</div><div><br></div><div><br></div></div></blockquote><div>=C2=
=A0<br>So if I&#39;m given an image and a definition file, how would I be a=
ble to know whether it was modified in a sandbox before being converted to =
an image? In that case, the definition file wouldn&#39;t necessarily corres=
pond to the image.<br><br>Thanks and regards<br>Afif<br></div></div>
------=_Part_758_1314628106.1501855213780--

------=_Part_757_601077818.1501855213780--
