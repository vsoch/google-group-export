X-Received: by 2002:a65:534a:: with SMTP id w10-v6mr13464634pgr.6.1539808712037;
        Wed, 17 Oct 2018 13:38:32 -0700 (PDT)
X-BeenThere: singularity@lbl.gov
Received: by 2002:a17:902:46e:: with SMTP id 101-v6ls13530255ple.6.gmail; Wed,
 17 Oct 2018 13:38:31 -0700 (PDT)
X-Received: by 2002:a17:902:7203:: with SMTP id ba3-v6mr17229270plb.321.1539808710861;
        Wed, 17 Oct 2018 13:38:30 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1539808710; cv=none;
        d=google.com; s=arc-20160816;
        b=x5tlCJF1DzPCh2G3cbRpAJAkkzvUL/oRmam7a0gMeTWWC5L2h1s9BrV9G8gVdiULsE
         9OCYUI/1el5KGYy5+G4gM9vY58kd01Gk5pQ9pQ+bxNAzmxfJRxRw1/qZ1OUhdBqQDuVY
         PgK4kejiFYQLMF1sdmEyzfyrJ6Qe6jAHdwOkaocAx97EbCZIDnSS1pfBDg8/5b9/fOlH
         EeYAw/o7+XGdZeYa9bPY2NQMh4j84q7M4esHCib2CbCdvKdudtX+5cWYNVz38USKanQ4
         RTu0p2TX7AcCchBqJ/I0/ZKG5XL6cgSg3yd4XXPdV8XDKQT482WyjDivAVQcyihgRiy6
         yJKA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=to:subject:message-id:date:from:in-reply-to:references:mime-version
         :dkim-signature;
        bh=Ghi0JgfG/9sah7MWsWk9aFgTw/tqy4UOPxzpmwmA21I=;
        b=UcdSsn+A2qZjvPq1PwIqk8aPT0kYSopgWKsYEBn8kaLrMO7OfzaR7+GlkkD50NOaOP
         UW0B9V146zE/aDyJN4T6qKDuUR73hyVqiU1tczN+zCkla9IJahhdQmc6STUlTEWBro9A
         js+UGdvJAwQ4ehWmGMX7OpOhLKm8fIgp3AJINBp6HqWW+PVpno7SoN9b40FoplKBLFmt
         SLQ1HlPz6/TdrdszeIWVYX3RHXR5Y/TdznWqQVGA9eCndiq9BfnwtaoDnO3FXD8D0G3t
         U1lQFQq+en0T7OrLEF63KELpme+LpJR3x23x8VAAmBIJWuFDdYCNr8jw7n4Mw765kovU
         9w4Q==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass head...@gmail.com header.s=20161025 header.b=EfDjqqJm;
       spf=pass (google.com: domain of vso...@gmail.com designates 209.85.166.49 as permitted sender) smtp.mailfrom=vso...@gmail.com
Return-Path: <vso...@gmail.com>
Received: from fe4.lbl.gov (fe4.lbl.gov. [128.3.41.71])
        by mx.google.com with ESMTP id p10-v6si9448521plk.77.2018.10.17.13.38.30
        for <singu...@lbl.gov>;
        Wed, 17 Oct 2018 13:38:30 -0700 (PDT)
Received-SPF: pass (google.com: domain of vso...@gmail.com designates 209.85.166.49 as permitted sender) client-ip=209.85.166.49;
Authentication-Results: mx.google.com;
       dkim=pass head...@gmail.com header.s=20161025 header.b=EfDjqqJm;
       spf=pass (google.com: domain of vso...@gmail.com designates 209.85.166.49 as permitted sender) smtp.mailfrom=vso...@gmail.com
X-Ironport-SBRS: 3.5
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A2GMAwCRncdbhzGmVdFbBQODcoEQTTIog?=
 =?us-ascii?q?28GcC2CXZA3gg2RRIVcgSs7JQEKC4FJgnUChH0hOBYBAwEBAgEBAgEBAhABAQE?=
 =?us-ascii?q?IDQkIGw4jDII2BQIDGgYFBEs7MAEBAQEBAQEBAQEBAQEBARoCDSBDAQEBAQIBI?=
 =?us-ascii?q?wQZAQ0OEQ0DAQsGBQsNKgICIQEBDgMBBQELEQ4HBAEZAwSCfwEoAYE/AQMNCAU?=
 =?us-ascii?q?Kmxg8iwt7FgUBF4J3BYQuChknDVqBNgIBBRKLOheCAIMmUC6CVkUCgS4BDQUBC?=
 =?us-ascii?q?TcMGoI8glcCiERQS5N/JS4JhliGZ4MkF5AijEh2iG4wgTlJDTBxcBVsgjsJghw?=
 =?us-ascii?q?PCRGDNopuIzAQiTxHgXIFAQE?=
X-IronPort-AV: E=Sophos;i="5.54,393,1534834800"; 
   d="scan'208,217";a="39539133"
Received: from mail-io1-f49.google.com ([209.85.166.49])
  by fe4.lbl.gov with ESMTP; 17 Oct 2018 13:38:29 -0700
Received: by mail-io1-f49.google.com with SMTP id e12-v6so19615421iok.12
        for <singu...@lbl.gov>; Wed, 17 Oct 2018 13:38:29 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to;
        bh=Ghi0JgfG/9sah7MWsWk9aFgTw/tqy4UOPxzpmwmA21I=;
        b=EfDjqqJmEGoNE7P2MGo9bZoqq+jDHnX77VCMQqtWOuk/DUb2ue/IRuPIebn9CtXv4Q
         c+4bSGO8mWNaIObWjd4yS2UJVViHOVHzjcyb5C5qB+Irp7AwhX2+07gw5vsHzYqYWqmj
         p17O9zvW97gswZ9oT+rdAdaBwqsTLF37+Ldn3C89POqF9hyt98TtWzaGER1D6Y5C/eYm
         wpJ8LoKhnm6mOTXE15b7asbkTKVP0yw0OctwuXBMvvYJ9d4HJaORoczV9p16SpD5t/cu
         Z5HWhy3P/AcTmaAa7w1tkZJO9YrQlcIAvrh4toAX3dMQG/f9lO9YRtslf+lTVXKVL8PQ
         zwhw==
X-Gm-Message-State: ABuFfoiU3TdTvLtfKo90rPgwizZfq067HGkvmL4HvOAOCxfaNxMZXd+w
	2FbRV/ttb4mxW2ZiDCveT1+p+QnPPs4XuKhcvyjWnEqr
X-Received: by 2002:a6b:18c5:: with SMTP id 188-v6mr18055575ioy.211.1539808705922;
 Wed, 17 Oct 2018 13:38:25 -0700 (PDT)
MIME-Version: 1.0
References: <327123e2-fb31-46ac-afed-4cf060795af0@lbl.gov> <CAM=pu+LNZa_C0XCb08Tv0mEUiEQ2tRMP3abOy=DpOEbkwd3WsQ@mail.gmail.com>
 <CAM=pu+KpqJ42Z8z2Y2H9KKcX45B-+9RD3ULighMt49qr0Lk5_A@mail.gmail.com> <ee35542c-02f9-4529-88dc-0674e3862ba0@lbl.gov>
In-Reply-To: <ee35542c-02f9-4529-88dc-0674e3862ba0@lbl.gov>
From: v <vso...@gmail.com>
Date: Wed, 17 Oct 2018 16:38:13 -0400
Message-ID: <CAM=pu+KpNMEAm0f=aaez9_9=F-DNKei3i_paRDQ+FZ=X8EFrhw@mail.gmail.com>
Subject: Re: [Singularity] Best practice for uploading containers to sregistry
 with tags/versions
To: singularity@lbl.gov
Content-Type: multipart/alternative; boundary="000000000000f04d2d057872a65c"

--000000000000f04d2d057872a65c
Content-Type: text/plain; charset="UTF-8"

Right now I'm still thinking that it's best to not introduce an additional
layer of abstraction (meaning having multiple tags pointing at the same
container) because then we lose the 1:1 ratio between a container and what
(is supposed to be) somewhat of a URI. If the user (oups!) forgets that
"release1.0" also refers to "release1.0test" and then does a force delete
to the test, well then either Singularity Registry needs to protect the
user from him or herself, or we just abide by the command and delete both
images (not what we wanted to do.) So how to avoid this? We have the very
simple "rule" that a container uri, meaning a <repo>/<username>:<tag> has a
a 1:1 association with a container. Yes, you can push multiple of the tag
(and get different versions based on the hash, e.g.,
<repo>/<username>:<tag>@<hash> but minimally if you modify some tag1, you
can be sure it's not going to accidentally also modify some other tag2.
Does that make sense?

Your project sounds exciting! And actually, by using the CI as a middleman
you can keep your registry pretty locked down with respect to giving push
access - you can essentially manage / control via Github, have many people
work on a container (without giving write permission to the registry) via
pull requests, and then also get the version control bit in too!

To go back in time a bit, the entire setup of Singularity Hub is based on
the idea that if the entire thing blew up, you wouldn't need anything other
than the Github repos to rebuild the images. Everything from the recipes,
to the tags, are kept there. This is why I don't let users define tags (in
the interface) on the fly, which is something you can do in Docker Hub. I
had those nightmares too :)

Another thing to remember (or point out) is that you don't necessarily
*have* to use Singularity Registry, if your institution is set up to have
some other service. For example, the sregistry client will push images to
most Google places, or AWS, and the (still cool part!) is that you can
achieve this same thing still via the same nicely set up continuous
integration.

On Wed, Oct 17, 2018 at 4:30 PM Mike Moore <wxdu...@gmail.com> wrote:

> Oh, I completely agree with your points.  We are going to have a system
> with github/gitlab for recipes, some sort of CI to connect the recipes to
> the build process and publication via sregistry.  I'm working on two
> fronts.  One is to introduce Singularity to our environment as a Preview,
> with fewer restrictions.  While our user base is learning/digesting that,
> I'll get the version control/CI/large sregistry system in place to allow us
> to tie the image back to the recipe.  I have nightmares about how would we
> get everything back if the world blew up...  We're not there yet...  But
> this is a step on the road.
>
> Thanks!
> -Mike
>
>
> On Wednesday, October 17, 2018 at 4:13:40 PM UTC-4, vanessa wrote:
>>
>> To be more specific answering your question - there is no universal best
>> practice, because it depends on your use case. I can answer under the
>> context of wanting to create then use reproducible software.
>>
>> *1.* If you build a container and you have no link back to its recipe,
>> under version control, you can never go back and recreate it, if needed.
>> You can't hand it off to a colleague and have him/her understand how the
>> guts were generated. In my world, a container built under any context
>> without a recipe linked to it, and one that is version controlled, is not
>> good enough.
>> *2.* If you build a container and have no place to put it where it's
>> programatically accessible, this is another fail case. I can build and have
>> containers on my local machine to my heart's content, but if others aren't
>> able to grab the exact same container, via some API, well that doesn't get
>> me very far either.
>> *3.* This final point is what I think of as the "scrappy developer"
>> quality. If you don't do 1 and 2 using tools and resources that are open
>> and publicly available, it doesn't matter if you can afford to use it, the
>> next person that you want to share with (that cannot) isn't as lucky as
>> you, and you fail. For example, as a scrappy developer I would want to take
>> advantage of building containers in the most version controlled and
>> accessible way that I can. This means using services like CircleCI and
>> Travis because A., the build recipes and the configs for the CI are both
>> under version control, together, and B. Anyone can literally clone my repo,
>> connect to the (free) service, and get the exact same thing. The containers
>> built satisfy conditions 1. and 2. above. The only additional thing you
>> need here is a Registry to push them to, but you can have confidence that
>> if the registry explodes, you at least have a history of how it was built,
>> and the recipe it was built from.
>>
>> Outside of those points, you can do whatever you want. You can have a big
>> folder of containers you build in random places (local? some remote you are
>> paying for?) but at the end of the day, you can't really reproduce that, or
>> at least a third party that has (or loses) your container and wants to
>> re-generate it cannot. You can choose to keep the recipe internal to the
>> container, but then you delete the container, oops so much for that. If I
>> were a general researcher, I would maximally take advantage of simple, free
>> resources like Github and Continuous Integration (to build) and then for
>> the registry, optimize based on what is available to me. Not sure if any of
>> this is helpful, but glad to chat more :)
>>
>> Best,
>>
>> V
>>
>>
>> On Wed, Oct 17, 2018 at 3:48 PM v <v...@gmail.com> wrote:
>>
>>> Hey Mike,
>>>
>>> I can definitely help answer this one! Do you mean Singularity Registry
>>> Server, or Singularity Hub? They are slightly different so I can adjust my
>>> answer based on that. The short answer is that the tag of "latest" is
>>> nothing special other than the default tag used given that the user doesn't
>>> specify a tag (eg., built from the "Singularity" file in the Github repo
>>> (no extension) or pulled without specifying a tag
>>> (shub://vsoch/hello-world. This is a convention taken from Docker, and to
>>> be honest I don't think it's the best practice, because "latest" now is not
>>> "latest" later. It's much better to generally pull with a version (either a
>>> commit or container hash for Singularity Hub) and as a builder, you don't
>>> need to thin about this (it is figured out automatically from the container
>>> and from your repository).
>>>
>>> For Singularity Registry, we can't derive a commit, but we can derive
>>> the container hash. So generally I would think of a tag as a moving thing
>>> (e.g., latest today isn't latest tomorrow) and when you interact with
>>> images (such as specifying usage of one in a script) it's best practice to
>>> include the hash (shub://<username>/<repo>:<tag>@<hash>
>>>
>>> What is missing for Singularity Registry are better hooks into CI
>>> (Circle or Travis) which actually I've shown before with Travis --->
>>> https://github.com/singularityhub/singularity-ci/ that would push and
>>> also provide the container for the registry to include a way back to its
>>> source (the Github repo and commit!). The good news is that we don't need
>>> some special builder or plugin, just an example recipe that will do the
>>> build and push. I'd be happy to write this up for you (was planning on
>>> updating that repo and making one for Circle too :)
>>>
>>> Best,
>>>
>>> Vanessa
>>>
>>> On Wed, Oct 17, 2018 at 3:30 PM Mike Moore <wx...@gmail.com> wrote:
>>>
>>>> Hi,
>>>>
>>>>   So, I was wondering if anyone had any recommendations or best
>>>> practices around the tagging/versioning of images uploaded to sregistry?
>>>> I've seen cases where a container will have both a "latest" and a <version>
>>>> entry in the registry.  Is it simply one upload with a "--tag latest --tag
>>>> <version>", or two separate uploads , one for latest and one for
>>>> <version>?  Just trying to figure out the best way to do this and provide
>>>> the correct documentation to our users/developers.
>>>>
>>>> -Mike
>>>>
>>>>
>>>> --
>>>> You received this message because you are subscribed to the Google
>>>> Groups "singularity" group.
>>>> To unsubscribe from this group and stop receiving emails from it, send
>>>> an email to singu...@lbl.gov.
>>>>
>>>
>>>
>>> --
>>> Vanessa Villamia Sochat
>>> Stanford University '16
>>> (603) 321-0676
>>>
>>
>>
>> --
>> Vanessa Villamia Sochat
>> Stanford University '16
>> (603) 321-0676
>>
> --
> You received this message because you are subscribed to the Google Groups
> "singularity" group.
> To unsubscribe from this group and stop receiving emails from it, send an
> email to singu...@lbl.gov.
>


-- 
Vanessa Villamia Sochat
Stanford University '16
(603) 321-0676

--000000000000f04d2d057872a65c
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Right now I&#39;m still thinking that it&#39;s best to not=
 introduce an additional layer of abstraction (meaning having multiple tags=
 pointing at the same container) because then we lose the 1:1 ratio between=
 a container and what (is supposed to be) somewhat of a URI. If the user (o=
ups!) forgets that &quot;release1.0&quot; also refers to &quot;release1.0te=
st&quot; and then does a force delete to the test, well then either Singula=
rity Registry needs to protect the user from him or herself, or we just abi=
de by the command and delete both images (not what we wanted to do.) So how=
 to avoid this? We have the very simple &quot;rule&quot; that a container u=
ri, meaning a &lt;repo&gt;/&lt;username&gt;:&lt;tag&gt; has a a 1:1 associa=
tion with a container. Yes, you can push multiple of the tag (and get diffe=
rent versions based on the hash, e.g., &lt;repo&gt;/&lt;username&gt;:&lt;ta=
g&gt;@&lt;hash&gt; but minimally if you modify some tag1, you can be sure i=
t&#39;s not going to accidentally also modify some other tag2. Does that ma=
ke sense?<div><br></div><div>Your project sounds exciting! And actually, by=
 using the CI as a middleman you can keep your registry pretty locked down =
with respect to giving push access - you can essentially manage / control v=
ia Github, have many people work on a container (without giving write permi=
ssion to the registry) via pull requests, and then also get the version con=
trol bit in too!</div><div><br></div><div>To go back in time a bit, the ent=
ire setup of Singularity Hub is based on the idea that if the entire thing =
blew up, you wouldn&#39;t need anything other than the Github repos to rebu=
ild the images. Everything from the recipes, to the tags, are kept there. T=
his is why I don&#39;t let users define tags (in the interface) on the fly,=
 which is something you can do in Docker Hub. I had those nightmares too :)=
</div><div><br></div><div>Another thing to remember (or point out) is that =
you don&#39;t necessarily <i>have</i>=C2=A0to use Singularity Registry, if =
your institution is set up to have some other service. For example, the sre=
gistry client will push images to most Google places, or AWS, and the (stil=
l cool part!) is that you can achieve this same thing still via the same ni=
cely set up continuous integration.</div></div><br><div class=3D"gmail_quot=
e"><div dir=3D"ltr">On Wed, Oct 17, 2018 at 4:30 PM Mike Moore &lt;<a href=
=3D"mailto:wxdu...@gmail.com">wxdu...@gmail.com</a>&gt; wrote:<br></div><bl=
ockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #=
ccc solid;padding-left:1ex"><div dir=3D"ltr">Oh, I completely agree with yo=
ur points.=C2=A0 We are going to have a system with github/gitlab for recip=
es, some sort of CI to connect the recipes to the build process and publica=
tion via sregistry.=C2=A0 I&#39;m working on two fronts.=C2=A0 One is to in=
troduce Singularity to our environment as a Preview, with fewer restriction=
s.=C2=A0 While our user base is learning/digesting that, I&#39;ll get the v=
ersion control/CI/large sregistry system in place to allow us to tie the im=
age back to the recipe.=C2=A0 I have nightmares about how would we get ever=
ything back if the world blew up...=C2=A0 We&#39;re not there yet...=C2=A0 =
But this is a step on the road.<br><br>Thanks!<br>-Mike<br><br><br>On Wedne=
sday, October 17, 2018 at 4:13:40 PM UTC-4, vanessa wrote:<blockquote class=
=3D"gmail_quote" style=3D"margin:0;margin-left:0.8ex;border-left:1px #ccc s=
olid;padding-left:1ex"><div dir=3D"ltr">To be more specific answering your =
question - there is no universal best practice, because it depends on your =
use case. I can answer under the context of wanting to create then use repr=
oducible software.<div><b><br></b></div><div><b>1.</b> If you build a conta=
iner and you have no link back to its recipe, under version control, you ca=
n never go back and recreate it, if needed. You can&#39;t hand it off to a =
colleague and have him/her understand how the guts were generated. In my wo=
rld, a container built under any context without a recipe linked to it, and=
 one that is version controlled, is not good enough.<br></div><div><div><b>=
2.</b> If you build a container and have no place to put it where it&#39;s =
programatically accessible, this is another fail case. I can build and have=
 containers on my local machine to my heart&#39;s content, but if others ar=
en&#39;t able to grab the exact same container, via some API, well that doe=
sn&#39;t get me very far either.</div><div><b>3.</b> This final point is wh=
at I think of as the &quot;scrappy developer&quot; quality. If you don&#39;=
t do 1 and 2 using tools and resources that are open and publicly available=
, it doesn&#39;t matter if you can afford to use it, the next person that y=
ou want to share with (that cannot) isn&#39;t as lucky as you, and you fail=
. For example, as a scrappy developer I would want to take advantage of bui=
lding containers in the most version controlled and accessible way that I c=
an. This means using services like CircleCI and Travis because A., the buil=
d recipes and the configs for the CI are both under version control, togeth=
er, and B. Anyone can literally clone my repo, connect to the (free) servic=
e, and get the exact same thing. The containers built satisfy conditions 1.=
 and 2. above. The only additional thing you need here is a Registry to pus=
h them to, but you can have confidence that if the registry explodes, you a=
t least have a history of how it was built, and the recipe it was built fro=
m.</div><div><br></div><div>Outside of those points, you can do whatever yo=
u want. You can have a big folder of containers you build in random places =
(local? some remote you are paying for?) but at the end of the day, you can=
&#39;t really reproduce that, or at least a third party that has (or loses)=
 your container and wants to re-generate it cannot. You can choose to keep =
the recipe internal to the container, but then you delete the container, oo=
ps so much for that. If I were a general researcher, I would maximally take=
 advantage of simple, free resources like Github and Continuous Integration=
 (to build) and then for the registry, optimize based on what is available =
to me. Not sure if any of this is helpful, but glad to chat more :)</div></=
div><div><br></div><div>Best,</div><div><br></div><div>V</div><div><br></di=
v></div><br><div class=3D"gmail_quote"><div dir=3D"ltr">On Wed, Oct 17, 201=
8 at 3:48 PM v &lt;<a rel=3D"nofollow">v...@gmail.com</a>&gt; wrote:<br></d=
iv><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left=
:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr"><div dir=3D"ltr">Hey Mik=
e,<div><br></div><div>I can definitely help answer this one! Do you mean Si=
ngularity Registry Server, or Singularity Hub? They are slightly different =
so I can adjust my answer based on that. The short answer is that the tag o=
f &quot;latest&quot; is nothing special other than the default tag used giv=
en that the user doesn&#39;t specify a tag (eg., built from the &quot;Singu=
larity&quot; file in the Github repo (no extension) or pulled without speci=
fying a tag (shub://vsoch/hello-world. This is a convention taken from Dock=
er, and to be honest I don&#39;t think it&#39;s the best practice, because =
&quot;latest&quot; now is not &quot;latest&quot; later. It&#39;s much bette=
r to generally pull with a version (either a commit or container hash for S=
ingularity Hub) and as a builder, you don&#39;t need to thin about this (it=
 is figured out automatically from the container and from your repository).=
</div><div><br></div><div>For Singularity Registry, we can&#39;t derive a c=
ommit, but we can derive the container hash. So generally I would think of =
a tag as a moving thing (e.g., latest today isn&#39;t latest tomorrow) and =
when you interact with images (such as specifying usage of one in a script)=
 it&#39;s best practice to include the hash (shub://&lt;username&gt;/&lt;re=
po&gt;:&lt;tag&gt;@&lt;hash&gt;</div><div><br></div><div>What is missing fo=
r Singularity Registry are better hooks into CI (Circle or Travis) which ac=
tually I&#39;ve shown before with Travis ---&gt;=C2=A0<a href=3D"https://gi=
thub.com/singularityhub/singularity-ci/" rel=3D"nofollow" target=3D"_blank"=
>https://github.com/singularityhub/singularity-ci/</a> that would push and =
also provide the container for the registry to include a way back to its so=
urce (the Github repo and commit!). The good news is that we don&#39;t need=
 some special builder or plugin, just an example recipe that will do the bu=
ild and push. I&#39;d be happy to write this up for you (was planning on up=
dating that repo and making one for Circle too :)</div><div><br></div><div>=
Best,</div><div><br></div><div>Vanessa</div></div></div><br><div class=3D"g=
mail_quote"><div dir=3D"ltr">On Wed, Oct 17, 2018 at 3:30 PM Mike Moore &lt=
;<a rel=3D"nofollow">wx...@gmail.com</a>&gt; wrote:<br></div><blockquote cl=
ass=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;p=
adding-left:1ex"><div dir=3D"ltr">Hi,<br><br>=C2=A0 So, I was wondering if =
anyone had any recommendations or best practices around the tagging/version=
ing of images uploaded to sregistry?=C2=A0 I&#39;ve seen cases where a cont=
ainer will have both a &quot;latest&quot; and a &lt;version&gt; entry in th=
e registry.=C2=A0 Is it simply one upload with a &quot;--tag latest --tag &=
lt;version&gt;&quot;, or two separate uploads , one for latest and one for =
&lt;version&gt;?=C2=A0 Just trying to figure out the best way to do this an=
d provide the correct documentation to our users/developers.<br><br>-Mike<b=
r><br><br></div>

<p></p>

-- <br>
You received this message because you are subscribed to the Google Groups &=
quot;singularity&quot; group.<br>
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to <a rel=3D"nofollow">singu...@lbl.gov</a>.<br>
</blockquote></div><br clear=3D"all"><div><br></div>-- <br><div dir=3D"ltr"=
>Vanessa Villamia Sochat<br>Stanford University &#39;16<br><div><div><div>(=
603) 321-0676</div></div></div></div>
</blockquote></div><br clear=3D"all"><div><br></div>-- <br><div dir=3D"ltr"=
>Vanessa Villamia Sochat<br>Stanford University &#39;16<br><div><div><div>(=
603) 321-0676</div></div></div></div>
</blockquote></div>

<p></p>

-- <br>
You received this message because you are subscribed to the Google Groups &=
quot;singularity&quot; group.<br>
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to <a href=3D"mailto:singu...@lbl.gov" target=3D"_blank">singu...@lbl.=
gov</a>.<br>
</blockquote></div><br clear=3D"all"><div><br></div>-- <br><div dir=3D"ltr"=
 class=3D"gmail_signature" data-smartmail=3D"gmail_signature">Vanessa Villa=
mia Sochat<br>Stanford University &#39;16<br><div><div><div>(603) 321-0676<=
/div></div></div></div>

--000000000000f04d2d057872a65c--
