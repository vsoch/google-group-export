Date: Fri, 4 Aug 2017 08:08:01 -0700 (PDT)
From: =?UTF-8?Q?C=C3=A9dric_Clerget?= <cedric...@gmail.com>
To: singularity <singu...@lbl.gov>
Message-Id: <5e34f4ad-0e9b-449d-8717-51bd12208c2f@lbl.gov>
In-Reply-To: <CAApQTTg=GSxboZtYtf0472Hwxo4YG1_p5gvnSaJH13pL48dDAQ@mail.gmail.com>
References: <CAApQTTjU+=ASab7pEv8Vn=TOLY2h9j9av1+zAtK-x6qsZXZhxA@mail.gmail.com>
 <CAApQTTg=GSxboZtYtf0472Hwxo4YG1_p5gvnSaJH13pL48dDAQ@mail.gmail.com>
Subject: Re: Container format change idea
MIME-Version: 1.0
Content-Type: multipart/mixed; 
	boundary="----=_Part_823_1798132464.1501859281498"

------=_Part_823_1798132464.1501859281498
Content-Type: multipart/alternative; 
	boundary="----=_Part_824_481186307.1501859281498"

------=_Part_824_481186307.1501859281498
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit


>
>
> Some service based containers may need to be writable in order to satisfy 
> persistence of data (think SQL tables). Are there any ideas or theories on 
> how to handle persistent data for a container runtime without modifying the 
> image itself? What do you like in how Docker handles this, and how can it 
> be done better?
>

> I like the idea of DataContainers for this (a read/writable container that 
> can be mounted into a running container instance like a bind point), but it 
> maybe cumbersome having a second image file to associate..?
>
> Thoughts?
>

Using partition with image ? first partition will be an immutable squashfs 
partition and second partition, a writable data partition to serve as upper 
dir for overlayfs (could use a sparse file to grow as needed for second 
partition). With a possibillity to merge immutable and data at some point 
to create a new immutable one and etc
 

>
> On Thu, Aug 3, 2017 at 10:17 AM, Gregory M. Kurtzer <gm...@gmail.com 
> <javascript:>> wrote:
>
>> Hello everyone, 
>>
>> This is a much longer email then I intended to write, but I felt that 
>> background is important. I have been spending a lot of time considering the 
>> Singularity container format. There are several pretty major considerations 
>> that are far from ideal that has warranted this:
>>
>> 1. Images are always bloated and they have to be "right sized" which is 
>> difficult to guess at before a container has been built.
>> 2. Images must be packaged and/or compressed for distribution
>> 3. Containers are modifiable, and while many people use this 
>> functionality for development or part of their workflow, it is not a great 
>> idea as it leads to container "black boxes".
>> 4. When we `mkfs.ext3` the container payload, mkfs automatically adds 
>> some sparseness which creates inconsistencies due to how programs, file 
>> systems, and users copy and move images.
>> 5. Modifiable images will have to be resigned (working on that feature 
>> now) and may break encryption models that are being investigated.
>>
>> These points have caused me to think about different formats, and I've 
>> considered several alternatives:
>>
>> 1. Custom Singularity file system: This gives us massive flexibility, but 
>> we do not want to require Singularity support on the host kernel. Also a 
>> long time to develop and Q/A.
>>
>> 2. Fuse singularity file system: This also gives us lots of flexibility, 
>> but also comes with the baggage of Fuse and will take a long time to 
>> develop and Q/A.
>>
>> 3. SquashFS: This is an existing file system which is supported by all (I 
>> believe) currently supported distributions of Linux. Using SquashFS based 
>> containers is already supported, but we don't have any mechanism for 
>> creating containers of this form. Development of that interface would be 
>> pretty easy, and quite possibly even more intuitive then it currently 
>> stands.
>>
>> Out of the 3 above options, #3 is the most appealing for me for the short 
>> term. But there are some pros and a con associated with it:
>>
>> Pros:
>> - Container images never need a size, bootstrap, import, etc.. will 
>> always be "right sized"
>> - Containers will always be compressed, and never need to be uncompressed
>> - No sparseness, so containers are very easy to move
>> - Containers are guaranteed immutable
>> - We can better support signing and possible encryption of containers
>> - Labels/keys/metadata will always be in sync with containers
>> - SquashFS is a known standard for doing this sort of thing
>>
>> Cons:
>> - The --writable option and all associated features will no longer be 
>> supported as containers will be immutable.
>>
>> Personally, I see the negative as not even completely negative. It means 
>> we will force the container management paradigm to something more akin to 
>> compiling. Metaphorically, the definition file is the source code, and the 
>> resulting container is the compiled result. When dealing with source code, 
>> we don't edit the binary when there is a problem, we edit the source code 
>> and then recompile. This will have to be the model going forth if we choose 
>> immutable containers, and I actually consider this a good thing. It means 
>> containers are derived from a recipe.
>>
>> There is an additional bit of support I can add to mitigate any 
>> development issues that this might cause, for example, container 
>> "sandboxes". Singularity already supports bootstrapping and running from a 
>> container directory. So development and testing can still easily occur. And 
>> when you are ready to create an image from that "sandbox", you could do it 
>> directly from the sandbox (icky, but we can in theory support it), or build 
>> from the definition file.
>>
>> After speaking with some people about this, here is the interface I am 
>> considering for this to replace the "create", "import" (as they will no 
>> longer be necessary) and the "bootstrap" commands:
>>
>> # singularity build container.simg recipe.def
>> # singularity build container.simg docker://container
>> # singularity build container.simg /path/to/container.tar.gz
>>
>> Or using a sandbox:
>>
>> # singularity build --sandbox /path/to/sandbox [any of the above targets]
>> # singularity shell /path/to/sandbox
>>
>> And then after making the necessary changes to the sandbox, building an 
>> image directly from the sandbox:
>>
>> # singularity build container.simg /path/to/sandbox
>>
>>
>> So my questions are,...
>>
>> Aside from the knee-jerk reactions of "OMG, nooo, change scares me!", are 
>> there any known workflows that this will break that can be described?
>>
>> Are there any additional workarounds that need consideration?
>>
>> What about positive feedback, does this sound like a good idea?
>>
>>
>> -- 
>> Gregory M. Kurtzer
>> CEO, SingularityWare, LLC.
>> Senior Architect, RStor
>> Computational Science Advisor, Lawrence Berkeley National Laboratory
>>
>
>
>
> -- 
> Gregory M. Kurtzer
> CEO, SingularityWare, LLC.
> Senior Architect, RStor
> Computational Science Advisor, Lawrence Berkeley National Laboratory
>

------=_Part_824_481186307.1501859281498
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><blockquote class=3D"gmail_quote" style=3D"margin: 0;margi=
n-left: 0.8ex;border-left: 1px #ccc solid;padding-left: 1ex;"><div dir=3D"l=
tr"><div><br></div><div>Some service based containers may need to be writab=
le in order to satisfy persistence of data (think SQL tables). Are there an=
y ideas or theories on how to handle persistent data for a container runtim=
e without modifying the image itself? What do you like in how Docker handle=
s this, and how can it be done better?</div></div></blockquote><blockquote =
class=3D"gmail_quote" style=3D"margin: 0;margin-left: 0.8ex;border-left: 1p=
x #ccc solid;padding-left: 1ex;"><div dir=3D"ltr"><div><br></div><div>I lik=
e the idea of DataContainers for this (a read/writable container that can b=
e mounted into a running container instance like a bind point), but it mayb=
e cumbersome having a second image file to associate..?</div><div><br></div=
><div>Thoughts?</div></div></blockquote><div><br>Using partition with image=
 ? first partition will be an immutable squashfs
 partition and second partition, a writable data partition to serve as=20
upper dir for overlayfs (could use a sparse file to grow as needed for seco=
nd partition). With a possibillity to merge immutable and data
 at some point to create a new immutable one and etc<br>=C2=A0</div><blockq=
uote class=3D"gmail_quote" style=3D"margin: 0;margin-left: 0.8ex;border-lef=
t: 1px #ccc solid;padding-left: 1ex;"><div><br><div class=3D"gmail_quote">O=
n Thu, Aug 3, 2017 at 10:17 AM, Gregory M. Kurtzer <span dir=3D"ltr">&lt;<a=
 href=3D"javascript:" target=3D"_blank" gdf-obfuscated-mailto=3D"ldIAaosfDA=
AJ" rel=3D"nofollow" onmousedown=3D"this.href=3D&#39;javascript:&#39;;retur=
n true;" onclick=3D"this.href=3D&#39;javascript:&#39;;return true;">gm...@g=
mail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=
=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir=
=3D"ltr">Hello everyone,=C2=A0<br clear=3D"all"><div><br></div><div>This is=
 a much longer email then I intended to write, but I felt that background i=
s important. I have been spending a lot of time considering the Singularity=
 container format. There are several pretty major considerations that are f=
ar from ideal that has warranted this:</div><div><br></div><div>1. Images a=
re always bloated and they have to be &quot;right sized&quot; which is diff=
icult to guess at before a container has been built.</div><div>2. Images mu=
st be packaged and/or compressed for distribution</div><div>3. Containers a=
re modifiable, and while many people use this functionality for development=
 or part of their workflow, it is not a great idea as it leads to container=
 &quot;black boxes&quot;.</div><div>4. When we `mkfs.ext3` the container pa=
yload, mkfs automatically adds some sparseness which creates inconsistencie=
s due to how programs, file systems, and users copy and move images.</div><=
div>5. Modifiable images will have to be resigned (working on that feature =
now) and may break encryption models that are being investigated.</div><div=
><br></div><div>These points have caused me to think about different format=
s, and I&#39;ve considered several alternatives:</div><div><br></div><div>1=
. Custom Singularity file system: This gives us massive flexibility, but we=
 do not want to require Singularity support on the host kernel. Also a long=
 time to develop and Q/A.</div><div><br></div><div>2. Fuse singularity file=
 system: This also gives us lots of flexibility, but also comes with the ba=
ggage of Fuse and will take a long time to develop and Q/A.</div><div><br><=
/div><div>3. SquashFS: This is an existing file system which is supported b=
y all (I believe) currently supported distributions of Linux. Using SquashF=
S based containers is already supported, but we don&#39;t have any mechanis=
m for creating containers of this form. Development of that interface would=
 be pretty easy, and quite possibly even more intuitive then it currently s=
tands.</div><div><br></div><div>Out of the 3 above options, #3 is the most =
appealing for me for the short term. But there are some pros and a con asso=
ciated with it:</div><div><br></div><div>Pros:</div><div>- Container images=
 never need a size, bootstrap, import, etc.. will always be &quot;right siz=
ed&quot;</div><div>- Containers will always be compressed, and never need t=
o be uncompressed</div><div>- No sparseness, so containers are very easy to=
 move</div><div>- Containers are guaranteed immutable</div><div>- We can be=
tter support signing and possible encryption of containers</div><div>- Labe=
ls/keys/metadata will always be in sync with containers</div><div>- SquashF=
S is a known standard for doing this sort of thing</div><div><br></div><div=
>Cons:</div><div>- The --writable option and all associated features will n=
o longer be supported as containers will be immutable.</div><div><br></div>=
<div>Personally, I see the negative as not even completely negative. It mea=
ns we will force the container management paradigm to something more akin t=
o compiling. Metaphorically, the definition file is the source code, and th=
e resulting container is the compiled result. When dealing with source code=
, we don&#39;t edit the binary when there is a problem, we edit the source =
code and then recompile. This will have to be the model going forth if we c=
hoose immutable containers, and I actually consider this a good thing. It m=
eans containers are derived from a recipe.</div><div><br></div><div>There i=
s an additional bit of support I can add to mitigate any development issues=
 that this might cause, for example, container &quot;sandboxes&quot;. Singu=
larity already supports bootstrapping and running from a container director=
y. So development and testing can still easily occur. And when you are read=
y to create an image from that &quot;sandbox&quot;, you could do it directl=
y from the sandbox (icky, but we can in theory support it), or build from t=
he definition file.</div><div><br></div><div>After speaking with some peopl=
e about this, here is the interface I am considering for this to replace th=
e &quot;create&quot;, &quot;import&quot; (as they will no longer be necessa=
ry) and the &quot;bootstrap&quot; commands:</div><div><br></div><div># sing=
ularity build container.simg recipe.def</div><div># singularity build conta=
iner.simg docker://container</div><div># singularity build container.simg /=
path/to/container.tar.gz</div><div><br></div><div>Or using a sandbox:</div>=
<div><br></div><div># singularity build --sandbox /path/to/sandbox [any of =
the above targets]</div><div># singularity shell /path/to/sandbox</div><div=
><br></div><div>And then after making the necessary changes to the sandbox,=
 building an image directly from the sandbox:</div><div><br></div><div># si=
ngularity build container.simg /path/to/sandbox</div><div><br></div><div><b=
r></div><div>So my questions are,...</div><div><br></div><div>Aside from th=
e knee-jerk reactions of &quot;OMG, nooo, change scares me!&quot;, are ther=
e any known workflows that this will break that can be described?</div><div=
><br></div><div>Are there any additional workarounds that need consideratio=
n?</div><div><br></div><div>What about positive feedback, does this sound l=
ike a good idea?</div><span><font color=3D"#888888"><div><br></div><div><br=
></div>-- <br><div><div dir=3D"ltr"><div><div dir=3D"ltr"><div><div dir=3D"=
ltr"><div>Gregory M. Kurtzer</div><div>CEO, SingularityWare, LLC.</div><div=
>Senior Architect, RStor</div><div><span style=3D"font-size:12.8px">Computa=
tional Science Advisor, Lawrence Berkeley National Laboratory</span><br></d=
iv></div></div></div></div></div></div>
</font></span></div>
</blockquote></div><br><br clear=3D"all"><div><br></div>-- <br><div><div di=
r=3D"ltr"><div><div dir=3D"ltr"><div><div dir=3D"ltr"><div>Gregory M. Kurtz=
er</div><div>CEO, SingularityWare, LLC.</div><div>Senior Architect, RStor</=
div><div><span style=3D"font-size:12.8px">Computational Science Advisor, La=
wrence Berkeley National Laboratory</span><br></div></div></div></div></div=
></div></div>
</div>
</blockquote></div>
------=_Part_824_481186307.1501859281498--

------=_Part_823_1798132464.1501859281498--
