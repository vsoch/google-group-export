Date: Fri, 15 Feb 2019 20:25:15 -0800 (PST)
From: David Godlove <davidg...@gmail.com>
To: singularity <singu...@lbl.gov>
Message-Id: <884c2a99-085f-4079-990e-760838d36835@lbl.gov>
In-Reply-To: <b87e124c-e6d0-454d-a46c-69a25a9051f2@lbl.gov>
References: <36fc16f1-faa6-4284-8ef8-5b5c8b69ea08@lbl.gov>
 <b87e124c-e6d0-454d-a46c-69a25a9051f2@lbl.gov>
Subject: Re: In reference to the recent runc vulnerability (CVE-2019-5736)
MIME-Version: 1.0
Content-Type: multipart/mixed; 
	boundary="----=_Part_36_1746794687.1550291115899"

------=_Part_36_1746794687.1550291115899
Content-Type: multipart/alternative; 
	boundary="----=_Part_37_994066934.1550291115899"

------=_Part_37_994066934.1550291115899
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

And now, here is the official statement from Sylabs concerning=20
CVE-2019-5736.

https://www.sylabs.io/2019/02/cve-2019-5736-and-its-impact-on-singularity-c=
ontainers/

On Thursday, February 14, 2019 at 1:09:26 PM UTC-5, Hugo R Hernandez wrote:
>
> Great to know this is more than a 'just in case check'.  Thank you for=20
> addressing my concern!
>
> On Wednesday, February 13, 2019 at 7:59:00 PM UTC-6, David Godlove wrote:
>>
>> Hiya everyone! =20
>>
>> The folks at Sylabs have been investigating CVE-2019-5736, figuring out=
=20
>> the ramifications, and preparing a statement.  It=E2=80=99s long.  Sorry=
.  But it=20
>> seems important.  Here goes.
>>
>> It=E2=80=99s been widely reported that a security vulnerability in runc =
and=20
>> several other container runtimes allows a malicious container to =E2=80=
=9Cbreak=20
>> out=E2=80=9D and execute code with root-level permissions on the host sy=
stem.  The=20
>> container does this by tampering with the executable that is responsible=
=20
>> for running the image.  Critically, for this vulnerability to be exploit=
ed,=20
>> a malicious container must be executed with elevated privileges (e.g. ro=
ot).
>>
>> In a nutshell, Sylabs does not consider issues like CVE-2019-5736 to be=
=20
>> privilege-escalation vulnerabilities in the Singularity container runtim=
e. =20
>> If a user runs untrusted containers as root, it is the same as running=
=20
>> untrusted code as root.  Running untrusted containers as root is at odds=
=20
>> with the normal accepted use of Singularity.  To be very clear, it is=20
>> unrealistic to suggest that users must run all containers without elevat=
ed=20
>> privileges.  That is why Singularity provides a simple, built-in method =
to=20
>> verify that containers are created by trusted entities before running.  =
If=20
>> a user runs an untrusted container as root, and it contains an exploit l=
ike=20
>> the one detailed in CVE-2019-5736, it will behave in much the same way w=
ith=20
>> Singularity as the vulnerability detailed in runc.  Users should never r=
un=20
>> untrusted containers with root privileges.
>>
>> Sylabs will continue to write patches to mitigate issues like=20
>> CVE-2019-5736 in order to help prevent accidental damage, but there are =
no=20
>> explicit or implied guarantees when running untrusted containers with=20
>> elevated privileges.
>>
>> Singularity=E2=80=99s philosophy is that it is inherently unsafe to run =
untrusted=20
>> containers with elevated permissions.  Users must either 1) run containe=
rs=20
>> without any elevated privileges, or 2) verify and trust the entity that=
=20
>> originally created the container before running with privileges.  The=20
>> Singularity runtime and file format facilitate both of these requirement=
s. =20
>> By default, the Singularity runtime is executed without any elevated=20
>> privileges.  And the Singularity Image Format (SIF) allows an entity to=
=20
>> cryptographically sign a container, creating a signature block within th=
e=20
>> SIF file.  Users can then verify that the container they obtained is a=
=20
>> bit-for-bit reproduction of the container that was originally signed.  A=
s=20
>> long as the user knows and trusts the entity that signed the container,=
=20
>> they can run the container confidently with elevated privileges. =20
>> Critically, the trust mechanism exists within the SIF file.  So even if =
the=20
>> container was compromised, and malicious parties tampered with the=20
>> contents, the end user would see that the container they downloaded was =
no=20
>> longer properly signed.
>>
>> Security is not a checkbox that one can tick and forget.  It=E2=80=99s a=
n ongoing=20
>> process that begins with software architecture, and continues all the wa=
y=20
>> through to ongoing security practices.  In addition to ensuring that=20
>> containers are run without elevated privileges where appropriate, and th=
at=20
>> containers are produced by trusted sources, users must monitor their=20
>> containers for newly discovered vulnerabilities and update when necessar=
y=20
>> just as they would with any other software.  Sylabs is constantly probin=
g=20
>> to find and patch vulnerabilities within Singularity, and will continue =
to=20
>> do so.
>>
>
------=_Part_37_994066934.1550291115899
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">And now, here is the official statement from Sylabs concer=
ning CVE-2019-5736.<div><br></div><div><a href=3D"https://www.sylabs.io/201=
9/02/cve-2019-5736-and-its-impact-on-singularity-containers/" target=3D"_bl=
ank" rel=3D"nofollow" style=3D"cursor: pointer;">https://www.sylabs.io/2019=
/02/<wbr>cve-2019-5736-and-its-impact-<wbr>on-singularity-containers/</a></=
div><br>On Thursday, February 14, 2019 at 1:09:26 PM UTC-5, Hugo R Hernande=
z wrote:<blockquote class=3D"gmail_quote" style=3D"margin: 0;margin-left: 0=
.8ex;border-left: 1px #ccc solid;padding-left: 1ex;"><div dir=3D"ltr">Great=
 to know this is more than a &#39;just in case check&#39;.=C2=A0 Thank you =
for addressing my concern!<br><br>On Wednesday, February 13, 2019 at 7:59:0=
0 PM UTC-6, David Godlove wrote:<blockquote class=3D"gmail_quote" style=3D"=
margin:0;margin-left:0.8ex;border-left:1px #ccc solid;padding-left:1ex"><di=
v dir=3D"ltr"><div>Hiya everyone!=C2=A0=C2=A0</div><div><br></div><div>The =
folks at Sylabs have been investigating CVE-2019-5736, figuring out the ram=
ifications, and preparing a statement.=C2=A0 It=E2=80=99s long.=C2=A0 Sorry=
.=C2=A0 But it seems important.=C2=A0 Here goes.</div><div><br></div><div>I=
t=E2=80=99s been widely reported that a security vulnerability in runc and =
several other container runtimes allows a malicious container to =E2=80=9Cb=
reak out=E2=80=9D and execute code with root-level permissions on the host =
system.=C2=A0 The container does this by tampering with the executable that=
 is responsible for running the image.=C2=A0 Critically, for this vulnerabi=
lity to be exploited, a malicious container must be executed with elevated =
privileges (e.g. root).</div><div><br></div><div>In a nutshell, Sylabs does=
 not consider issues like CVE-2019-5736 to be privilege-escalation vulnerab=
ilities in the Singularity container runtime.=C2=A0 If a user runs untruste=
d containers as root, it is the same as running untrusted code as root.=C2=
=A0 Running untrusted containers as root is at odds with the normal accepte=
d use of Singularity.=C2=A0 To be very clear, it is unrealistic to suggest =
that users must run all containers without elevated privileges.=C2=A0 That =
is why Singularity provides a simple, built-in method to verify that contai=
ners are created by trusted entities before running.=C2=A0 If a user runs a=
n untrusted container as root, and it contains an exploit like the one deta=
iled in CVE-2019-5736, it will behave in much the same way with Singularity=
 as the vulnerability detailed in runc.=C2=A0 Users should never run untrus=
ted containers with root privileges.</div><div><br></div><div>Sylabs will c=
ontinue to write patches to mitigate issues like CVE-2019-5736 in order to =
help prevent accidental damage, but there are no explicit or implied guaran=
tees when running untrusted containers with elevated privileges.</div><div>=
<br></div><div>Singularity=E2=80=99s philosophy is that it is inherently un=
safe to run untrusted containers with elevated permissions.=C2=A0 Users mus=
t either 1) run containers without any elevated privileges, or 2) verify an=
d trust the entity that originally created the container before running wit=
h privileges.=C2=A0 The Singularity runtime and file format facilitate both=
 of these requirements.=C2=A0 By default, the Singularity runtime is execut=
ed without any elevated privileges.=C2=A0 And the Singularity Image Format =
(SIF) allows an entity to cryptographically sign a container, creating a si=
gnature block within the SIF file.=C2=A0 Users can then verify that the con=
tainer they obtained is a bit-for-bit reproduction of the container that wa=
s originally signed.=C2=A0 As long as the user knows and trusts the entity =
that signed the container, they can run the container confidently with elev=
ated privileges.=C2=A0 Critically, the trust mechanism exists within the SI=
F file.=C2=A0 So even if the container was compromised, and malicious parti=
es tampered with the contents, the end user would see that the container th=
ey downloaded was no longer properly signed.</div><div><br></div><div>Secur=
ity is not a checkbox that one can tick and forget.=C2=A0 It=E2=80=99s an o=
ngoing process that begins with software architecture, and continues all th=
e way through to ongoing security practices.=C2=A0 In addition to ensuring =
that containers are run without elevated privileges where appropriate, and =
that containers are produced by trusted sources, users must monitor their c=
ontainers for newly discovered vulnerabilities and update when necessary ju=
st as they would with any other software.=C2=A0 Sylabs is constantly probin=
g to find and patch vulnerabilities within Singularity, and will continue t=
o do so.</div></div></blockquote></div></blockquote></div>
------=_Part_37_994066934.1550291115899--

------=_Part_36_1746794687.1550291115899--
