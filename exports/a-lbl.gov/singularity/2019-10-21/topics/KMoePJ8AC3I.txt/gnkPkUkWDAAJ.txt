X-Received: by 10.98.4.3 with SMTP id 3mr1395549pfe.25.1501780658452;
        Thu, 03 Aug 2017 10:17:38 -0700 (PDT)
X-BeenThere: singularity@lbl.gov
Received: by 10.107.18.141 with SMTP id 13ls1789307ios.7.gmail; Thu, 03 Aug
 2017 10:17:36 -0700 (PDT)
X-Received: by 10.98.209.10 with SMTP id z10mr2302590pfg.93.1501780655990;
        Thu, 03 Aug 2017 10:17:35 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1501780655; cv=none;
        d=google.com; s=arc-20160816;
        b=y65xJ4JQVjQGq3LugLe7tFZ9RaI23Te4ImCZxbCgo3CCJlvdtRFk8SZ4GOoBfOJhSW
         RVkIaVJvDgMfQ7P+P0kSVXKxSwMDUhZG1ji4QrwUoCH9EQNeCUrIlPll5NE5SOh0aYVC
         DbGmcR+ZRcARQNYpOcfGVs7EwrcLjD8BT1bMCXFcaIT3LzmvjUIlyAWNpXTCNJjvO1Ya
         YV+gwP7xzdjx4LgpgHMOPAC1cxhF8nj42NfITiXOVbVvSFkyMZ4YmEDr+qUpUeHcYQTY
         5E3O1GquGHTWGvt/3rr9hXZDcmn7wI/IZVa9cvKbgMD/lhSucOwMupYKkDTAuCVEnrxS
         OLew==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=to:subject:message-id:date:from:mime-version:dkim-signature
         :arc-authentication-results;
        bh=UXpm1VNy1TgCaJUTyvPwgfsR5s2RzDk+JkNhNbIPXQs=;
        b=0LRnxP/2gBAzP6mmRM/fGy0KpLLQ5hMo/qIj7oJvWD2UmbNOwO8E+Nrj4xaaj9fi+X
         18wJIm4vi99EbOheu1csPf2Qk8qsJJpiBXpWxJPSDPpiczKgr8LrOymM4WVwhRIlPlJC
         oeesUacBd27Y+h3aZkc84wxCpSvD/RtkAAiA2GZiISqnPZS62/cS+UJ/9SYeZMDYQd7/
         lcqx2UVGv2DMTGVJ37huooUbH8AmoY90g+914rfQq4VPorl0Kn6eQrHW4GB9aDZM4IYY
         0ipNtvJ7Tp+ONseOov9/xrFUFsGcKTU2K+6Q6USUOb1g5pYLPcrRoc0mNHEt28gkZrGo
         07BA==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass head...@gmail.com header.b=YSWc30H/;
       spf=pass (google.com: domain of gmku...@gmail.com designates 209.85.223.177 as permitted sender) smtp.mailfrom=gmku...@gmail.com
Return-Path: <gmku...@gmail.com>
Received: from fe4.lbl.gov (fe4.lbl.gov. [128.3.41.71])
        by mx.google.com with ESMTP id q82si7649918pfj.16.2017.08.03.10.17.35
        for <singu...@lbl.gov>;
        Thu, 03 Aug 2017 10:17:35 -0700 (PDT)
Received-SPF: pass (google.com: domain of gmku...@gmail.com designates 209.85.223.177 as permitted sender) client-ip=209.85.223.177;
Authentication-Results: mx.google.com;
       dkim=pass head...@gmail.com header.b=YSWc30H/;
       spf=pass (google.com: domain of gmku...@gmail.com designates 209.85.223.177 as permitted sender) smtp.mailfrom=gmku...@gmail.com
X-Ironport-SBRS: 3.4
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A2EGCgAQWoNZhrHfVdFcgx9AUAGBKycHh?=
 =?us-ascii?q?SWYaosUhzyFMw6BQUMOgiGHUQdBFgEBAQEBAQEBAQEBAhABAQEICwsIKC+CMyI?=
 =?us-ascii?q?QRikvAQEBAQEBAQEBAR8CKyVEHQEbHgMSEDcCJAERAQUBiRKBOQEDFQWdJINFP?=
 =?us-ascii?q?4wKggQFARyDCQWDWAoZJw1Wg1UCBhKDFoICUoR4WIR0ARIBgzKCYQWRfY4AAoF?=
 =?us-ascii?q?mkkWSSJQ5FB+BFSYIgSkLd3iFDYITIDaHFYIyAQEB?=
X-IronPort-AV: E=Sophos;i="5.41,317,1498546800"; 
   d="scan'208,217";a="83671859"
Received: from mail-io0-f177.google.com ([209.85.223.177])
  by fe4.lbl.gov with ESMTP; 03 Aug 2017 10:17:31 -0700
Received: by mail-io0-f177.google.com with SMTP id j32so9542093iod.0
        for <singu...@lbl.gov>; Thu, 03 Aug 2017 10:17:31 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:from:date:message-id:subject:to;
        bh=UXpm1VNy1TgCaJUTyvPwgfsR5s2RzDk+JkNhNbIPXQs=;
        b=YSWc30H/YT6Xj06IZ5rOSfsE/QYQWi4b5AxL+S8rdijO+5NdMHVNvC1++5eWvTUngc
         WcDsmkcFBl3+UogjLpJ3EluWSq/dpCuul6r/EGF7BgHzakc42ajf71TXihYPMo6NRClC
         6BmmyeRn4qz9k73ROclZjkAo0Gi0QZxqTizCX7Q/uyKqX8+ljvl4gymGvEX9U7EpuwvQ
         WqJcI/4JhysMGKeQrT+9ut+Dk3a/5gICUpCZDB/7XBInu4mKS610OdfSlNSmh6uS5mUc
         mmOFuaG1dhTxT4Gjy0w5WQ2ys/cH8j68FWYwmuX8LwC0JtnfqBbLwVo32RBinbwdx7to
         PciQ==
X-Gm-Message-State: AHYfb5gRAI65sA59bc1meRhO0zOKpFrisigPqYNziTus0TZbBm4NFFvr
	fE73HzdgMS9RVkiEcUYd9Yy85lh+8w==
X-Received: by 10.107.179.137 with SMTP id c131mr2560528iof.174.1501780651019;
 Thu, 03 Aug 2017 10:17:31 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.107.23.132 with HTTP; Thu, 3 Aug 2017 10:17:30 -0700 (PDT)
From: "Gregory M. Kurtzer" <gmku...@gmail.com>
Date: Thu, 3 Aug 2017 10:17:30 -0700
Message-ID: <CAApQTTjU+=ASab7pEv8Vn=TOLY2h9j9av1+zAtK-x6qsZXZhxA@mail.gmail.com>
Subject: Container format change idea
To: singularity@lbl.gov
Content-Type: multipart/alternative; boundary="001a114857c03c17bd0555dc8ed4"

--001a114857c03c17bd0555dc8ed4
Content-Type: text/plain; charset="UTF-8"

Hello everyone,

This is a much longer email then I intended to write, but I felt that
background is important. I have been spending a lot of time considering the
Singularity container format. There are several pretty major considerations
that are far from ideal that has warranted this:

1. Images are always bloated and they have to be "right sized" which is
difficult to guess at before a container has been built.
2. Images must be packaged and/or compressed for distribution
3. Containers are modifiable, and while many people use this functionality
for development or part of their workflow, it is not a great idea as it
leads to container "black boxes".
4. When we `mkfs.ext3` the container payload, mkfs automatically adds some
sparseness which creates inconsistencies due to how programs, file systems,
and users copy and move images.
5. Modifiable images will have to be resigned (working on that feature now)
and may break encryption models that are being investigated.

These points have caused me to think about different formats, and I've
considered several alternatives:

1. Custom Singularity file system: This gives us massive flexibility, but
we do not want to require Singularity support on the host kernel. Also a
long time to develop and Q/A.

2. Fuse singularity file system: This also gives us lots of flexibility,
but also comes with the baggage of Fuse and will take a long time to
develop and Q/A.

3. SquashFS: This is an existing file system which is supported by all (I
believe) currently supported distributions of Linux. Using SquashFS based
containers is already supported, but we don't have any mechanism for
creating containers of this form. Development of that interface would be
pretty easy, and quite possibly even more intuitive then it currently
stands.

Out of the 3 above options, #3 is the most appealing for me for the short
term. But there are some pros and a con associated with it:

Pros:
- Container images never need a size, bootstrap, import, etc.. will always
be "right sized"
- Containers will always be compressed, and never need to be uncompressed
- No sparseness, so containers are very easy to move
- Containers are guaranteed immutable
- We can better support signing and possible encryption of containers
- Labels/keys/metadata will always be in sync with containers
- SquashFS is a known standard for doing this sort of thing

Cons:
- The --writable option and all associated features will no longer be
supported as containers will be immutable.

Personally, I see the negative as not even completely negative. It means we
will force the container management paradigm to something more akin to
compiling. Metaphorically, the definition file is the source code, and the
resulting container is the compiled result. When dealing with source code,
we don't edit the binary when there is a problem, we edit the source code
and then recompile. This will have to be the model going forth if we choose
immutable containers, and I actually consider this a good thing. It means
containers are derived from a recipe.

There is an additional bit of support I can add to mitigate any development
issues that this might cause, for example, container "sandboxes".
Singularity already supports bootstrapping and running from a container
directory. So development and testing can still easily occur. And when you
are ready to create an image from that "sandbox", you could do it directly
from the sandbox (icky, but we can in theory support it), or build from the
definition file.

After speaking with some people about this, here is the interface I am
considering for this to replace the "create", "import" (as they will no
longer be necessary) and the "bootstrap" commands:

# singularity build container.simg recipe.def
# singularity build container.simg docker://container
# singularity build container.simg /path/to/container.tar.gz

Or using a sandbox:

# singularity build --sandbox /path/to/sandbox [any of the above targets]
# singularity shell /path/to/sandbox

And then after making the necessary changes to the sandbox, building an
image directly from the sandbox:

# singularity build container.simg /path/to/sandbox


So my questions are,...

Aside from the knee-jerk reactions of "OMG, nooo, change scares me!", are
there any known workflows that this will break that can be described?

Are there any additional workarounds that need consideration?

What about positive feedback, does this sound like a good idea?


-- 
Gregory M. Kurtzer
CEO, SingularityWare, LLC.
Senior Architect, RStor
Computational Science Advisor, Lawrence Berkeley National Laboratory

--001a114857c03c17bd0555dc8ed4
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Hello everyone,=C2=A0<br clear=3D"all"><div><br></div><div=
>This is a much longer email then I intended to write, but I felt that back=
ground is important. I have been spending a lot of time considering the Sin=
gularity container format. There are several pretty major considerations th=
at are far from ideal that has warranted this:</div><div><br></div><div>1. =
Images are always bloated and they have to be &quot;right sized&quot; which=
 is difficult to guess at before a container has been built.</div><div>2. I=
mages must be packaged and/or compressed for distribution</div><div>3. Cont=
ainers are modifiable, and while many people use this functionality for dev=
elopment or part of their workflow, it is not a great idea as it leads to c=
ontainer &quot;black boxes&quot;.</div><div>4. When we `mkfs.ext3` the cont=
ainer payload, mkfs automatically adds some sparseness which creates incons=
istencies due to how programs, file systems, and users copy and move images=
.</div><div>5. Modifiable images will have to be resigned (working on that =
feature now) and may break encryption models that are being investigated.</=
div><div><br></div><div>These points have caused me to think about differen=
t formats, and I&#39;ve considered several alternatives:</div><div><br></di=
v><div>1. Custom Singularity file system: This gives us massive flexibility=
, but we do not want to require Singularity support on the host kernel. Als=
o a long time to develop and Q/A.</div><div><br></div><div>2. Fuse singular=
ity file system: This also gives us lots of flexibility, but also comes wit=
h the baggage of Fuse and will take a long time to develop and Q/A.</div><d=
iv><br></div><div>3. SquashFS: This is an existing file system which is sup=
ported by all (I believe) currently supported distributions of Linux. Using=
 SquashFS based containers is already supported, but we don&#39;t have any =
mechanism for creating containers of this form. Development of that interfa=
ce would be pretty easy, and quite possibly even more intuitive then it cur=
rently stands.</div><div><br></div><div>Out of the 3 above options, #3 is t=
he most appealing for me for the short term. But there are some pros and a =
con associated with it:</div><div><br></div><div>Pros:</div><div>- Containe=
r images never need a size, bootstrap, import, etc.. will always be &quot;r=
ight sized&quot;</div><div>- Containers will always be compressed, and neve=
r need to be uncompressed</div><div>- No sparseness, so containers are very=
 easy to move</div><div>- Containers are guaranteed immutable</div><div>- W=
e can better support signing and possible encryption of containers</div><di=
v>- Labels/keys/metadata will always be in sync with containers</div><div>-=
 SquashFS is a known standard for doing this sort of thing</div><div><br></=
div><div>Cons:</div><div>- The --writable option and all associated feature=
s will no longer be supported as containers will be immutable.</div><div><b=
r></div><div>Personally, I see the negative as not even completely negative=
. It means we will force the container management paradigm to something mor=
e akin to compiling. Metaphorically, the definition file is the source code=
, and the resulting container is the compiled result. When dealing with sou=
rce code, we don&#39;t edit the binary when there is a problem, we edit the=
 source code and then recompile. This will have to be the model going forth=
 if we choose immutable containers, and I actually consider this a good thi=
ng. It means containers are derived from a recipe.</div><div><br></div><div=
>There is an additional bit of support I can add to mitigate any developmen=
t issues that this might cause, for example, container &quot;sandboxes&quot=
;. Singularity already supports bootstrapping and running from a container =
directory. So development and testing can still easily occur. And when you =
are ready to create an image from that &quot;sandbox&quot;, you could do it=
 directly from the sandbox (icky, but we can in theory support it), or buil=
d from the definition file.</div><div><br></div><div>After speaking with so=
me people about this, here is the interface I am considering for this to re=
place the &quot;create&quot;, &quot;import&quot; (as they will no longer be=
 necessary) and the &quot;bootstrap&quot; commands:</div><div><br></div><di=
v># singularity build container.simg recipe.def</div><div># singularity bui=
ld container.simg docker://container</div><div># singularity build containe=
r.simg /path/to/container.tar.gz</div><div><br></div><div>Or using a sandbo=
x:</div><div><br></div><div># singularity build --sandbox /path/to/sandbox =
[any of the above targets]</div><div># singularity shell /path/to/sandbox</=
div><div><br></div><div>And then after making the necessary changes to the =
sandbox, building an image directly from the sandbox:</div><div><br></div><=
div># singularity build container.simg /path/to/sandbox</div><div><br></div=
><div><br></div><div>So my questions are,...</div><div><br></div><div>Aside=
 from the knee-jerk reactions of &quot;OMG, nooo, change scares me!&quot;, =
are there any known workflows that this will break that can be described?</=
div><div><br></div><div>Are there any additional workarounds that need cons=
ideration?</div><div><br></div><div>What about positive feedback, does this=
 sound like a good idea?</div><div><br></div><div><br></div>-- <br><div cla=
ss=3D"gmail_signature" data-smartmail=3D"gmail_signature"><div dir=3D"ltr">=
<div><div dir=3D"ltr"><div><div dir=3D"ltr"><div>Gregory M. Kurtzer</div><d=
iv>CEO, SingularityWare, LLC.</div><div>Senior Architect, RStor</div><div><=
span style=3D"font-size:12.8px">Computational Science Advisor, Lawrence Ber=
keley National Laboratory</span><br></div></div></div></div></div></div></d=
iv>
</div>

--001a114857c03c17bd0555dc8ed4--
