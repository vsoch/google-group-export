Date: Wed, 13 Feb 2019 17:59:00 -0800 (PST)
From: David Godlove <davidg...@gmail.com>
To: singularity <singu...@lbl.gov>
Message-Id: <36fc16f1-faa6-4284-8ef8-5b5c8b69ea08@lbl.gov>
Subject: In reference to the recent runc vulnerability (CVE-2019-5736)
MIME-Version: 1.0
Content-Type: multipart/mixed; 
	boundary="----=_Part_76_1237326311.1550109540322"

------=_Part_76_1237326311.1550109540322
Content-Type: multipart/alternative; 
	boundary="----=_Part_77_513941824.1550109540322"

------=_Part_77_513941824.1550109540322
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Hiya everyone! =20

The folks at Sylabs have been investigating CVE-2019-5736, figuring out the=
=20
ramifications, and preparing a statement.  It=E2=80=99s long.  Sorry.  But =
it seems=20
important.  Here goes.

It=E2=80=99s been widely reported that a security vulnerability in runc and=
 several=20
other container runtimes allows a malicious container to =E2=80=9Cbreak out=
=E2=80=9D and=20
execute code with root-level permissions on the host system.  The container=
=20
does this by tampering with the executable that is responsible for running=
=20
the image.  Critically, for this vulnerability to be exploited, a malicious=
=20
container must be executed with elevated privileges (e.g. root).

In a nutshell, Sylabs does not consider issues like CVE-2019-5736 to be=20
privilege-escalation vulnerabilities in the Singularity container runtime. =
=20
If a user runs untrusted containers as root, it is the same as running=20
untrusted code as root.  Running untrusted containers as root is at odds=20
with the normal accepted use of Singularity.  To be very clear, it is=20
unrealistic to suggest that users must run all containers without elevated=
=20
privileges.  That is why Singularity provides a simple, built-in method to=
=20
verify that containers are created by trusted entities before running.  If=
=20
a user runs an untrusted container as root, and it contains an exploit like=
=20
the one detailed in CVE-2019-5736, it will behave in much the same way with=
=20
Singularity as the vulnerability detailed in runc.  Users should never run=
=20
untrusted containers with root privileges.

Sylabs will continue to write patches to mitigate issues like CVE-2019-5736=
=20
in order to help prevent accidental damage, but there are no explicit or=20
implied guarantees when running untrusted containers with elevated=20
privileges.

Singularity=E2=80=99s philosophy is that it is inherently unsafe to run unt=
rusted=20
containers with elevated permissions.  Users must either 1) run containers=
=20
without any elevated privileges, or 2) verify and trust the entity that=20
originally created the container before running with privileges.  The=20
Singularity runtime and file format facilitate both of these requirements. =
=20
By default, the Singularity runtime is executed without any elevated=20
privileges.  And the Singularity Image Format (SIF) allows an entity to=20
cryptographically sign a container, creating a signature block within the=
=20
SIF file.  Users can then verify that the container they obtained is a=20
bit-for-bit reproduction of the container that was originally signed.  As=
=20
long as the user knows and trusts the entity that signed the container,=20
they can run the container confidently with elevated privileges. =20
Critically, the trust mechanism exists within the SIF file.  So even if the=
=20
container was compromised, and malicious parties tampered with the=20
contents, the end user would see that the container they downloaded was no=
=20
longer properly signed.

Security is not a checkbox that one can tick and forget.  It=E2=80=99s an o=
ngoing=20
process that begins with software architecture, and continues all the way=
=20
through to ongoing security practices.  In addition to ensuring that=20
containers are run without elevated privileges where appropriate, and that=
=20
containers are produced by trusted sources, users must monitor their=20
containers for newly discovered vulnerabilities and update when necessary=
=20
just as they would with any other software.  Sylabs is constantly probing=
=20
to find and patch vulnerabilities within Singularity, and will continue to=
=20
do so.

------=_Part_77_513941824.1550109540322
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>Hiya everyone!=C2=A0=C2=A0</div><div><br></div><div>T=
he folks at Sylabs have been investigating CVE-2019-5736, figuring out the =
ramifications, and preparing a statement.=C2=A0 It=E2=80=99s long.=C2=A0 So=
rry.=C2=A0 But it seems important.=C2=A0 Here goes.</div><div><br></div><di=
v>It=E2=80=99s been widely reported that a security vulnerability in runc a=
nd several other container runtimes allows a malicious container to =E2=80=
=9Cbreak out=E2=80=9D and execute code with root-level permissions on the h=
ost system.=C2=A0 The container does this by tampering with the executable =
that is responsible for running the image.=C2=A0 Critically, for this vulne=
rability to be exploited, a malicious container must be executed with eleva=
ted privileges (e.g. root).</div><div><br></div><div>In a nutshell, Sylabs =
does not consider issues like CVE-2019-5736 to be privilege-escalation vuln=
erabilities in the Singularity container runtime.=C2=A0 If a user runs untr=
usted containers as root, it is the same as running untrusted code as root.=
=C2=A0 Running untrusted containers as root is at odds with the normal acce=
pted use of Singularity.=C2=A0 To be very clear, it is unrealistic to sugge=
st that users must run all containers without elevated privileges.=C2=A0 Th=
at is why Singularity provides a simple, built-in method to verify that con=
tainers are created by trusted entities before running.=C2=A0 If a user run=
s an untrusted container as root, and it contains an exploit like the one d=
etailed in CVE-2019-5736, it will behave in much the same way with Singular=
ity as the vulnerability detailed in runc.=C2=A0 Users should never run unt=
rusted containers with root privileges.</div><div><br></div><div>Sylabs wil=
l continue to write patches to mitigate issues like CVE-2019-5736 in order =
to help prevent accidental damage, but there are no explicit or implied gua=
rantees when running untrusted containers with elevated privileges.</div><d=
iv><br></div><div>Singularity=E2=80=99s philosophy is that it is inherently=
 unsafe to run untrusted containers with elevated permissions.=C2=A0 Users =
must either 1) run containers without any elevated privileges, or 2) verify=
 and trust the entity that originally created the container before running =
with privileges.=C2=A0 The Singularity runtime and file format facilitate b=
oth of these requirements.=C2=A0 By default, the Singularity runtime is exe=
cuted without any elevated privileges.=C2=A0 And the Singularity Image Form=
at (SIF) allows an entity to cryptographically sign a container, creating a=
 signature block within the SIF file.=C2=A0 Users can then verify that the =
container they obtained is a bit-for-bit reproduction of the container that=
 was originally signed.=C2=A0 As long as the user knows and trusts the enti=
ty that signed the container, they can run the container confidently with e=
levated privileges.=C2=A0 Critically, the trust mechanism exists within the=
 SIF file.=C2=A0 So even if the container was compromised, and malicious pa=
rties tampered with the contents, the end user would see that the container=
 they downloaded was no longer properly signed.</div><div><br></div><div>Se=
curity is not a checkbox that one can tick and forget.=C2=A0 It=E2=80=99s a=
n ongoing process that begins with software architecture, and continues all=
 the way through to ongoing security practices.=C2=A0 In addition to ensuri=
ng that containers are run without elevated privileges where appropriate, a=
nd that containers are produced by trusted sources, users must monitor thei=
r containers for newly discovered vulnerabilities and update when necessary=
 just as they would with any other software.=C2=A0 Sylabs is constantly pro=
bing to find and patch vulnerabilities within Singularity, and will continu=
e to do so.</div></div>
------=_Part_77_513941824.1550109540322--

------=_Part_76_1237326311.1550109540322--
