X-Received: by 10.200.53.101 with SMTP id z34mr4204551qtb.72.1477652988016;
        Fri, 28 Oct 2016 04:09:48 -0700 (PDT)
X-BeenThere: singularity@lbl.gov
Received: by 10.157.13.110 with SMTP id 101ls6318869oti.25.gmail; Fri, 28 Oct
 2016 04:09:47 -0700 (PDT)
X-Received: by 10.200.53.22 with SMTP id y22mr4350868qtb.58.1477652987357;
        Fri, 28 Oct 2016 04:09:47 -0700 (PDT)
Received: by 10.202.117.17 with SMTP id q17msoic;
        Thu, 27 Oct 2016 10:28:39 -0700 (PDT)
X-Received: by 10.98.100.215 with SMTP id y206mr16479207pfb.49.1477589319118;
        Thu, 27 Oct 2016 10:28:39 -0700 (PDT)
Return-Path: <ch...@cam.ac.uk>
Received: from fe3.lbl.gov (fe3.lbl.gov. [128.3.41.68])
        by mx.google.com with ESMTP id a17si8956044pgh.22.2016.10.27.10.28.38
        for <singu...@lbl.gov>;
        Thu, 27 Oct 2016 10:28:39 -0700 (PDT)
Received-SPF: pass (google.com: domain of ch...@cam.ac.uk designates 131.111.8.130 as permitted sender) client-ip=131.111.8.130;
Authentication-Results: mx.google.com;
       spf=pass (google.com: domain of ch...@cam.ac.uk designates 131.111.8.130 as permitted sender) smtp.mailfrom=ch...@cam.ac.uk
IronPort-PHdr: 9a23:uy1FyRbHyWDlKmB7e/3Div//LSx+4OfEezUN459isYplN5qZpM2/bnLW6fgltlLVR4KTs6sC0LuM9f+5EjVYu96oizMrSNR0TRgLiMEbzUQLIfWuLgnFFsPsdDEwB89YVVVorDmROElRH9viNRWJ+iXhpQAbFhi3DwdpPOO9QteU1JXtkb/rsMSLOU1hv3mUWftKNhK4rAHc5IE9oLBJDeIP8CbPuWZCYO9MxGlldhq5lhf44dqsrtY4q3wD888784Z8dYmyP+FmDO8QMTI9Lmpg5NH3rQKRCkyA52ccT29QmR1NRATC5xL3RND9tSD5u/A62TKBIMDtCulvAW78vJtsHQTpjigaMzcj8X3GwphrjaRUvRaovR1j0qbQaoXTO/1gKPDzZ9QfEEFBRMdKHwxIDoG9YIYIFeUAOvsQ+4L9+AdXhRC3AE+lD6XyyWkb1TfNwaQm3rF5Qkn91ws6EodL7nk=
X-Ironport-SBRS: 3.5
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0GrAACDOBJYh4IIb4NcHAEBBAEBCgEBFwEFAQsBgwABAQEBAXV9oxIBAQaBG4dehHOCU4F+hGJCASeCRSOCSUoCggRCEQEBAQEBAQEBAQEBAhABAQEIDQkJHTCCMwQCAQIRBQQBOQoyAQEBAQEBAQEBAQEBAQEBGgINMRIBARkBAQEBAgE6RAsLFQMJJQ8SNgYTiDoDDwgFCbw4DSsZgzIBAQEBIoVyhSCCR4FdhgIFgSUBmDsrCAEBhi2BOIFQg0qDGQuCPI1IiHGEGoQBNIE1gmURC4FTcYYoVTGBMQEBAQ
X-IPAS-Result: A0GrAACDOBJYh4IIb4NcHAEBBAEBCgEBFwEFAQsBgwABAQEBAXV9oxIBAQaBG4dehHOCU4F+hGJCASeCRSOCSUoCggRCEQEBAQEBAQEBAQEBAhABAQEIDQkJHTCCMwQCAQIRBQQBOQoyAQEBAQEBAQEBAQEBAQEBGgINMRIBARkBAQEBAgE6RAsLFQMJJQ8SNgYTiDoDDwgFCbw4DSsZgzIBAQEBIoVyhSCCR4FdhgIFgSUBmDsrCAEBhi2BOIFQg0qDGQuCPI1IiHGEGoQBNIE1gmURC4FTcYYoVTGBMQEBAQ
X-IronPort-AV: E=Sophos;i="5.31,553,1473145200"; 
   d="scan'208";a="54012823"
Received: from ppsw-30.csi.cam.ac.uk ([131.111.8.130])
  by fe3.lbl.gov with ESMTP; 27 Oct 2016 10:28:37 -0700
X-Cam-AntiVirus: no malware found
X-Cam-ScannerInfo: http://www.cam.ac.uk/cs/email/scanner/
Received: from erebus.hpc.cam.ac.uk ([131.111.56.110]:55322)
	by ppsw-30.csi.cam.ac.uk (smtp.hermes.cam.ac.uk [131.111.8.156]:587)
	with esmtpsa (LOGIN:ch741) (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
	id 1bzoTk-000wCf-ey (Exim 4.86_36-e07b163) for singu...@lbl.gov
	(return-path <ch...@cam.ac.uk>); Thu, 27 Oct 2016 18:28:36 +0100
Date: Thu, 27 Oct 2016 18:28:36 +0100
From: Chris Hadjigeorgiou <ch...@cam.ac.uk>
To: singularity <singu...@lbl.gov>
Subject: Re: [Singularity] Container Inheritance
Message-ID: <20161027182836.2ce5c4b5@erebus.hpc.cam.ac.uk>
In-Reply-To: <CAN7etTzGop+YMFJ3nC1F3MBRFB0sqrYOzZxfMyyx+ohbY7L_3A@mail.gmail.com>
References: <5356fb8bc8f38cc652658fd80480ea67@cam.ac.uk>
	<CAM=pu+LMXzkzE7qR4TbJDyja9t0seGWzn2CKyN3JviBx5r3GZA@mail.gmail.com>
	<CAN7etTzGop+YMFJ3nC1F3MBRFB0sqrYOzZxfMyyx+ohbY7L_3A@mail.gmail.com>
X-Mailer: Claws Mail 3.13.2 (GTK+ 2.24.30; x86_64-redhat-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit

On Wed, 26 Oct 2016 16:46:31 -0700
"Gregory M. Kurtzer" <gmku...@lbl.gov> wrote:

> On Wed, Oct 26, 2016 at 3:28 PM, vanessa s <vso...@gmail.com> wrote:
> 
> > This is a great idea, and the reason that we added the "From"
> > command (akin to docker). For example, right now you can bootstrap
> > from a Docker image:
> >
> > Boostrap: Docker
> > From: ubuntu:latest
> >
> > etc.
> >
> > In the case you showed, your "inherit" is simply a renaming of
> > "From" - and I (think) we either have something in the queue, or
> > have talked about the idea of image "overlays" before. It sounds
> > like to achieve the functionality you are describing, given that we
> > have another Singularity definition, we would do something like:
> >
> > Bootstrap: Singularity
> > From: myimage/latest
> >
> > etc.
> >
> > My overall 0.02 - let's focus on doing the current functionality
> > really well, without bugs, before we try to expand it too quickly.
> > A lot of what we are talking about will be greatly helped with a
> > singularity equivalent of Docker Hub, and this is still in
> > development. Some more comments below! 
> 
> I interpreted it as a slightly different use case as the From in the
> Docker bootstrap. This would need to be parsed via a pre-processor
> and reassemble a new definition file based that includes the bits
> from the definition file that it is inheriting. I would prefer to
> call it Include as it is more akin to how includes work with the
> C/C++ preprocessors. For example, considering the following two files
> main.def and included.def:
> 
> main.def:
>    Param1: foo
>    Include: ./included.def
>    Param2: bar
> 
> included.def:
>    ParamA: hello
>    %foo
>    echo hi
> 
> would be functionally equiv to
> 
>    Param1: foo
>    ParamA: hello
>    Param2; bar
> 
> Of course there must be some logic to automatically separate the
> header from the sections, but that isn't too hard. The trickier part
> is recursion.
> 

My thinking was more along the C/C++ include but from what I've seen in
CentOS/SL definitions the Include keyword is already used.

This could potentially work in a similar way in 2 steps:
1) Do a first pass replacing all include/inherit keywords with the
corresponding file/s in place, output to the single temp definition.
2) Do a second pass to make sure keywords such as bootstrap/OSversion
exist only once from the first place and any subsequent occurences are
removed.

I think it shouldn't get more complicated than this.

Currently this works more like the Docker From but with the ability to
have multiple inclusions. Although it doesn't need to be at the start of
the definition the Inherit keywords are parsed before anything else.

> 
> >
> >  
> >> Some remarks/clarifications:
> >>
> >> 1. Currently there's no built-in limit on the depth of inheritance
> >> but the deepest definition is considered the main parent.
> >>  
> >
> > This makes sense.
> >  
> 
> While there is probably no use cases that would require recursion,
> why not support it from the get-go?
> 
> 

Initially it was recursive but I put in a check to avoid infinite
loops. This could easily be an option.

> >
> >  
> >> 2. The main parent's BootStrap, OSVersion, MirrorURL and UpdateURL
> >> keywords take priority over all other definitions.
> >>  
> >
> > We would want to explicitly walk people through different goals and
> > use cases...
> >  
> 
> This should be easy and I would submit that the order of the keywords
> should always take precedent (first will be used, and all others
> ignored). With that, if we use an Include statement above any other
> keywords, then the file that is being included will have keywords
> defined *above* the parent, and thus those will end up being parsed
> first.
> 

I think it's easy as long as the difference in behaviour between
keywords and sections is clearly spelled out. Some
guidelines/walkthroughs would definitely be needed. For example even if
you could include a file in the middle of %post that should be avoided
for clarity. Instead consider breaking up the definition.

> >
> >  
> >> 3. The Inherit keyword can contain multiple definitions, but the
> >> first definition will always be considered the parent or
> >> the one which leads to the parent. ie.
> >> Inherit: def1 def2 def3
> >>  
> >  
> I didn't realize it until now, but I think we are indeed thinking of
> different features. In the vision that I have, you could have as many
> Include keywords as you want. All in order of how they would be
> included (again just like in C). For example:
> 
> Include: def1
> Include: def2
> Include: def3
> 
> With of course the first defined keyword taking priority.
> 
> But where I think this makes the most sense, is not in keywords... but
> rather section support. This yields the possibility of concatenating
> alike sections together. I can see this being VERY useful for a use
> case like:
> 
> I distribute my awesome definition/recipe that builds a very specific
> workflow. Someone downloads this, and instead of modifying it, they
> include it in a definition that they have which is customized for a
> particular OS. So, this can be implemented in a manner of having a
> base Ubuntu bootstrap (that could either bootstrap from debootstrap
> or docker), and that gets included by another bootstrap definition
> that adds some scientific packages to it. And that one can be
> included by another that does something else.
> 

I tried this out earlier and it works both ways. I wasn't aware
that singularity_keys_get handled multiple keywords like in your
example.

> 
> >
> > I never thought about the idea of allowing for multiple inherits
> > (From) in one file, I'm interested to hear what others think about
> > this. My instinct is telling me if would lead to a lot more bugs,
> > given that three different things are going into one image
> > generation (what if one image has a bug? What if one software is
> > reinstalled? not compatible? etc). There is something to be said
> > for maintaining the standard that is known, the one that Docker has
> > been using, but I'd be open to support for the other way. 
> 
> If you consider inherits being functionality equivalent as froms,
> then I would agree that this would lead to a lot more bugs as you
> would be layering in a manner that is not designed to be layered.
> 

How does the Docker From stop someone from pulling an image and
then running something incompatible? Or creating a chain of dockerfiles
with one of them containing a bug?

Also Docker does have or had multiple Froms but it was proposed for
removal as it wasn't well supported:

https://github.com/docker/docker/issues/13026

> 
> >
> >  
> >> def1 is the parent unless it inherits from other definitions as
> >> well. 4. Packages from the Include keyword are concatenated.
> >>  
> >  
> IncludePkgs? Hrmm... That would be tough. I don't think this should
> change any configurations of an existing keyword.
> 

What about having multiple Include/IncludePkgs keywords? 
Either way a guideline for this would be to avoid putting
packages which depend on some inheritance in this, instead do a manual
yum install in %post.

> 
> > 5. Sections (runscript, post, test) are combined but this could  
> >> potentially be changed to create multiple posts or tests.
> >>  
> >
> > This also sounds messy. I like the idea of having "modules" that
> > could be added to the post section (so the same code isn't done
> > over a million times) but I'm not sure how this would work easily -
> > some kind of template library? Then if the template changes, it's
> > another thing to keep track of second to the image and it's spec.
> > No, I don't like this idea. 
> 
> I actually don't think it is so bad if implemented correctly, and it
> is a use case that I actually need at LBNL. Is it more reasonable to
> you under the explanation of "include" rather then "from"? In that
> case, for example, a %post would be executed from both recipes in the
> order that they were included.
> 
Could the tracking of includes be optional? 


> 
> >
> >  
> >> 6. No docker bootstrap support at the moment.
> >>
> >> We have lots of ways, and are working on improving them, for
> >> working with  
> > Docker: http://singularity.lbl.gov/docs-docker
> >
> > I don't see any reason this wouldn't work exactly as it already
> > does if we  
> implement it as a preprocessor.
> 
> The last bit that I would like to add is the ability for the Include
> to be a URI so it could be a web address or Github location. Should
> be easy enough to implement using a shell based case statement.
> 
> Thanks, this is a great idea!
> 
> 
> 
Definitely!

Thanks,

Chris
