X-Received: by 10.31.155.143 with SMTP id d137mr1449038vke.7.1477525596719;
        Wed, 26 Oct 2016 16:46:36 -0700 (PDT)
X-BeenThere: singularity@lbl.gov
Received: by 10.107.15.196 with SMTP id 65ls865835iop.22.gmail; Wed, 26 Oct
 2016 16:46:36 -0700 (PDT)
X-Received: by 10.99.113.94 with SMTP id b30mr7065448pgn.79.1477525595942;
        Wed, 26 Oct 2016 16:46:35 -0700 (PDT)
Return-Path: <gmku...@lbl.gov>
Received: from fe4.lbl.gov (fe4.lbl.gov. [128.3.41.71])
        by mx.google.com with ESMTP id l3si5069413pgn.2.2016.10.26.16.46.35
        for <singu...@lbl.gov>;
        Wed, 26 Oct 2016 16:46:35 -0700 (PDT)
Received-SPF: pass (google.com: domain of gmku...@lbl.gov designates 209.85.215.71 as permitted sender) client-ip=209.85.215.71;
Authentication-Results: mx.google.com;
       spf=pass (google.com: domain of gmku...@lbl.gov designates 209.85.215.71 as permitted sender) smtp.mailfrom=gmku...@lbl.gov
IronPort-PHdr: 9a23:i7YJ6RaHAczR1oQNR9Oq6dT/LSx+4OfEezUN459isYplN5qZpcq8bnLW6fgltlLVR4KTs6sC0LuM9f+4EjRbqb+681k6OKRWUBEEjchE1ycBO+WiTXPBEfjxciYhF95DXlI2t1uyMExSBdqsLwaK+i760zceF13FOBZvIaytQ8iJ3p7xiLj5o8abSj4LrQL1Wal1IhSyoFeZnegtqqwmFJwMzADUqGBDYeVcyDAgD1uSmxHh+pX4p8Y7oGxtofZpy+psGeW/Jvx5HvRkC2E9MmY6+cnirxjfXEPb/XoaXXgSmwBJHxnt6Bv+GJj2rH2pmPB63XzQEtf7QrcuSHyHqe9IVQX0miodfXZt/2TUl9Zsnq9BiBaro1pwxJCCM9LdD+Z3Yq6IJYBSfmFGRMsEEnUZDw==
X-Ironport-SBRS: 3.5
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A2GLAACrPxFYh0fXVdFdHQEFAQsBGAEFAQsBgkg3AQEBAQF1bRAHjTCWfoJXhQeHRgWFFoFHGycjgkmBXIFaAoF9Bz8UAQEBAQEBAQEBAQECEAEBAQgNCQkdMIIzBAMTBQQBOQoyAQEBAQEBAQEBAQEBAQEBGgINMQMqAQEBAwESEVsLCwsKLQICIQESAQUBHAYTIogYAw8IBQmlMIEyPzKLRoh8DYNvAQEIAQEBAQEBASAQiwKCR4FdgyeCWwWPQoR2hSk1AYYrgTiBT4NKgyOCPI1IiHCEGoI/Ex6BEQ8Pg3I7EQuBch40hiiBBoExAQEB
X-IronPort-AV: E=Sophos;i="5.31,551,1473145200"; 
   d="scan'208,217";a="53323629"
Received: from mail-lf0-f71.google.com ([209.85.215.71])
  by fe4.lbl.gov with ESMTP; 26 Oct 2016 16:46:33 -0700
Received: by mail-lf0-f71.google.com with SMTP id x79so4656499lff.2
        for <singu...@lbl.gov>; Wed, 26 Oct 2016 16:46:33 -0700 (PDT)
X-Gm-Message-State: ABUngvcAZZCj0tpC166Pq/BXC0L0OeIzjIgm5Yna/FiINsYYcKu02eK2RrHkbOgQnFkuU4DBswvdSRox0YdhT7n9510qiHBDj+8foz3C8hXAhynVorwINXQWPQs5q4N7TWUL400kRdxROwbmbF2/P583uiI=
X-Received: by 10.25.217.209 with SMTP id s78mr3446389lfi.8.1477525592801;
        Wed, 26 Oct 2016 16:46:32 -0700 (PDT)
X-Received: by 10.25.217.209 with SMTP id s78mr3446377lfi.8.1477525592390;
 Wed, 26 Oct 2016 16:46:32 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.25.167.67 with HTTP; Wed, 26 Oct 2016 16:46:31 -0700 (PDT)
In-Reply-To: <CAM=pu+LMXzkzE7qR4TbJDyja9t0seGWzn2CKyN3JviBx5r3GZA@mail.gmail.com>
References: <5356fb8bc8f38cc652658fd80480ea67@cam.ac.uk> <CAM=pu+LMXzkzE7qR4TbJDyja9t0seGWzn2CKyN3JviBx5r3GZA@mail.gmail.com>
From: "Gregory M. Kurtzer" <gmku...@lbl.gov>
Date: Wed, 26 Oct 2016 16:46:31 -0700
Message-ID: <CAN7etTzGop+YMFJ3nC1F3MBRFB0sqrYOzZxfMyyx+ohbY7L_3A@mail.gmail.com>
Subject: Re: [Singularity] Container Inheritance
To: singularity <singu...@lbl.gov>
Content-Type: multipart/alternative; boundary=94eb2c0655c414d3d2053fcd3c2b

--94eb2c0655c414d3d2053fcd3c2b
Content-Type: text/plain; charset=UTF-8

On Wed, Oct 26, 2016 at 3:28 PM, vanessa s <vso...@gmail.com> wrote:

> This is a great idea, and the reason that we added the "From" command
> (akin to docker). For example, right now you can bootstrap from a Docker
> image:
>
> Boostrap: Docker
> From: ubuntu:latest
>
> etc.
>
> In the case you showed, your "inherit" is simply a renaming of "From" -
> and I (think) we either have something in the queue, or have talked about
> the idea of image "overlays" before. It sounds like to achieve the
> functionality you are describing, given that we have another Singularity
> definition, we would do something like:
>
> Bootstrap: Singularity
> From: myimage/latest
>
> etc.
>
> My overall 0.02 - let's focus on doing the current functionality really
> well, without bugs, before we try to expand it too quickly. A lot of what
> we are talking about will be greatly helped with a singularity equivalent
> of Docker Hub, and this is still in development. Some more comments below!
>

I interpreted it as a slightly different use case as the From in the Docker
bootstrap. This would need to be parsed via a pre-processor and reassemble
a new definition file based that includes the bits from the definition file
that it is inheriting. I would prefer to call it Include as it is more akin
to how includes work with the C/C++ preprocessors. For example, considering
the following two files main.def and included.def:

main.def:
   Param1: foo
   Include: ./included.def
   Param2: bar

included.def:
   ParamA: hello
   %foo
   echo hi

would be functionally equiv to

   Param1: foo
   ParamA: hello
   Param2; bar

Of course there must be some logic to automatically separate the header
from the sections, but that isn't too hard. The trickier part is recursion.


>
>
>> Some remarks/clarifications:
>>
>> 1. Currently there's no built-in limit on the depth of inheritance but
>> the deepest definition is considered the main parent.
>>
>
> This makes sense.
>

While there is probably no use cases that would require recursion, why not
support it from the get-go?


>
>
>> 2. The main parent's BootStrap, OSVersion, MirrorURL and UpdateURL
>> keywords take priority over all other definitions.
>>
>
> We would want to explicitly walk people through different goals and use
> cases...
>

This should be easy and I would submit that the order of the keywords
should always take precedent (first will be used, and all others ignored).
With that, if we use an Include statement above any other keywords, then
the file that is being included will have keywords defined *above* the
parent, and thus those will end up being parsed first.

>
>
>> 3. The Inherit keyword can contain multiple definitions, but the first
>> definition will always be considered the parent or
>> the one which leads to the parent. ie.
>> Inherit: def1 def2 def3
>>
>
I didn't realize it until now, but I think we are indeed thinking of
different features. In the vision that I have, you could have as many
Include keywords as you want. All in order of how they would be included
(again just like in C). For example:

Include: def1
Include: def2
Include: def3

With of course the first defined keyword taking priority.

But where I think this makes the most sense, is not in keywords... but
rather section support. This yields the possibility of concatenating alike
sections together. I can see this being VERY useful for a use case like:

I distribute my awesome definition/recipe that builds a very specific
workflow. Someone downloads this, and instead of modifying it, they include
it in a definition that they have which is customized for a particular OS.
So, this can be implemented in a manner of having a base Ubuntu bootstrap
(that could either bootstrap from debootstrap or docker), and that gets
included by another bootstrap definition that adds some scientific packages
to it. And that one can be included by another that does something else.


>
> I never thought about the idea of allowing for multiple inherits (From) in
> one file, I'm interested to hear what others think about this. My instinct
> is telling me if would lead to a lot more bugs, given that three different
> things are going into one image generation (what if one image has a bug?
> What if one software is reinstalled? not compatible? etc). There is
> something to be said for maintaining the standard that is known, the one
> that Docker has been using, but I'd be open to support for the other way.
>

If you consider inherits being functionality equivalent as froms, then I
would agree that this would lead to a lot more bugs as you would be
layering in a manner that is not designed to be layered.


>
>
>> def1 is the parent unless it inherits from other definitions as well.
>> 4. Packages from the Include keyword are concatenated.
>>
>
IncludePkgs? Hrmm... That would be tough. I don't think this should change
any configurations of an existing keyword.


> 5. Sections (runscript, post, test) are combined but this could
>> potentially be changed to create multiple posts or tests.
>>
>
> This also sounds messy. I like the idea of having "modules" that could be
> added to the post section (so the same code isn't done over a million
> times) but I'm not sure how this would work easily - some kind of template
> library? Then if the template changes, it's another thing to keep track of
> second to the image and it's spec. No, I don't like this idea.
>

I actually don't think it is so bad if implemented correctly, and it is a
use case that I actually need at LBNL. Is it more reasonable to you under
the explanation of "include" rather then "from"? In that case, for example,
a %post would be executed from both recipes in the order that they were
included.


>
>
>> 6. No docker bootstrap support at the moment.
>>
>> We have lots of ways, and are working on improving them, for working with
> Docker: http://singularity.lbl.gov/docs-docker
>
> I don't see any reason this wouldn't work exactly as it already does if we
implement it as a preprocessor.

The last bit that I would like to add is the ability for the Include to be
a URI so it could be a web address or Github location. Should be easy
enough to implement using a shell based case statement.

Thanks, this is a great idea!



-- 
Gregory M. Kurtzer
HPC Systems Architect and Technology Developer
Lawrence Berkeley National Laboratory HPCS
University of California Berkeley Research IT
Singularity Linux Containers (http://singularity.lbl.gov/)
Warewulf Cluster Management (http://warewulf.lbl.gov/)
GitHub: https://github.com/gmkurtzer, Twitter: https://twitter.com/gmkurtzer

--94eb2c0655c414d3d2053fcd3c2b
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><br><div class=3D"gmail_extra"><br><div class=3D"gmail_quo=
te">On Wed, Oct 26, 2016 at 3:28 PM, vanessa s <span dir=3D"ltr">&lt;<a hre=
f=3D"mailto:vso...@gmail.com" target=3D"_blank">vso...@gmail.com</a>&gt;</s=
pan> wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex=
;border-left:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr"><span style=
=3D"font-size:12.8px">This is a great idea, and the reason that we added th=
e &quot;From&quot; command (akin to docker). For example, right now you can=
 bootstrap from a Docker image:</span><div style=3D"font-size:12.8px"><br><=
/div><div style=3D"font-size:12.8px">Boostrap: Docker</div><div style=3D"fo=
nt-size:12.8px">From: ubuntu:latest</div><div style=3D"font-size:12.8px"><b=
r></div><div style=3D"font-size:12.8px">etc.</div><div style=3D"font-size:1=
2.8px"><br></div><div style=3D"font-size:12.8px">In the case you showed, yo=
ur &quot;inherit&quot; is simply a renaming of &quot;From&quot; - and I (th=
ink) we either have something in the queue, or have talked about the idea o=
f image &quot;overlays&quot; before. It sounds like to achieve the function=
ality you are describing, given that we have another Singularity definition=
, we would do something like:</div><div style=3D"font-size:12.8px"><br></di=
v><div style=3D"font-size:12.8px">Bootstrap: Singularity</div><div style=3D=
"font-size:12.8px">From: myimage/latest</div><div style=3D"font-size:12.8px=
"><br></div><div style=3D"font-size:12.8px">etc.</div><div style=3D"font-si=
ze:12.8px"><br></div><div style=3D"font-size:12.8px">My overall 0.02 - let&=
#39;s focus on doing the current functionality really well, without bugs, b=
efore we try to expand it too quickly. A lot of what we are talking about w=
ill be greatly helped with a singularity equivalent of Docker Hub, and this=
 is still in development. Some more comments below!</div></div></blockquote=
><div><br></div><div>I interpreted it as a slightly different use case as t=
he From in the Docker bootstrap. This would need to be parsed via a pre-pro=
cessor and reassemble a new definition file based that includes the bits fr=
om the definition file that it is inheriting. I would prefer to call it Inc=
lude as it is more akin to how includes work with the C/C++ preprocessors. =
For example, considering the following two files main.def and included.def:=
</div><div><br></div><div>main.def:</div><div>=C2=A0 =C2=A0Param1: foo</div=
><div>=C2=A0 =C2=A0Include: ./included.def</div><div>=C2=A0 =C2=A0Param2: b=
ar</div><div><br></div><div>included.def:</div><div>=C2=A0 =C2=A0ParamA: he=
llo</div><div>=C2=A0 =C2=A0%foo</div><div>=C2=A0 =C2=A0echo hi</div><div><b=
r></div><div>would be functionally equiv to</div><div><br></div><div>=C2=A0=
 =C2=A0Param1: foo</div><div>=C2=A0 =C2=A0ParamA: hello</div><div>=C2=A0 =
=C2=A0Param2; bar</div><div><br></div><div>Of course there must be some log=
ic to automatically separate the header from the sections, but that isn&#39=
;t too hard. The trickier part is recursion.</div><div>=C2=A0</div><blockqu=
ote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc s=
olid;padding-left:1ex"><div dir=3D"ltr"><div style=3D"font-size:12.8px"><br=
></div><div class=3D"gmail_extra" style=3D"font-size:12.8px"><div class=3D"=
gmail_quote"><span class=3D""><span class=3D"m_-7040607336735898574gmail-im=
"><blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;borde=
r-left:1px solid rgb(204,204,204);padding-left:1ex"><br>Some remarks/clarif=
ications:<br><br>1. Currently there&#39;s no built-in limit on the depth of=
 inheritance but the deepest definition is considered the main parent.<br><=
/blockquote><div><br></div></span></span><div>This makes sense.</div></div>=
</div></div></blockquote><div><br></div><div>While there is probably no use=
 cases that would require recursion, why not support it from the get-go?</d=
iv><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0=
 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr"><div cl=
ass=3D"gmail_extra" style=3D"font-size:12.8px"><div class=3D"gmail_quote"><=
span class=3D""><span class=3D"m_-7040607336735898574gmail-im"><div>=C2=A0<=
/div><blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;bo=
rder-left:1px solid rgb(204,204,204);padding-left:1ex">2. The main parent&#=
39;s BootStrap, OSVersion, MirrorURL and UpdateURL keywords take priority o=
ver all other definitions.<br></blockquote><div><br></div></span></span><di=
v>We would want to explicitly walk people through different goals and use c=
ases...</div></div></div></div></blockquote><div><br></div><div>This should=
 be easy and I would submit that the order of the keywords should always ta=
ke precedent (first will be used, and all others ignored). With that, if we=
 use an Include statement above any other keywords, then the file that is b=
eing included will have keywords defined *above* the parent, and thus those=
 will end up being parsed first.</div><blockquote class=3D"gmail_quote" sty=
le=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div d=
ir=3D"ltr"><div class=3D"gmail_extra" style=3D"font-size:12.8px"><div class=
=3D"gmail_quote"><span class=3D""><span class=3D"m_-7040607336735898574gmai=
l-im"><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0p=
x 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">3.=
 The Inherit keyword can contain multiple definitions, but the first defini=
tion will always be considered the parent or<br>the one which leads to the =
parent. ie.<br>Inherit: def1 def2 def3<br></blockquote></span></span></div>=
</div></div></blockquote><div><br></div><div>I didn&#39;t realize it until =
now, but I think we are indeed thinking of different features. In the visio=
n that I have, you could have as many Include keywords as you want. All in =
order of how they would be included (again just like in C). For example:</d=
iv><div><br></div><div>Include: def1</div><div>Include: def2</div><div>Incl=
ude: def3</div><div><br></div><div>With of course the first defined keyword=
 taking priority.</div><div><br></div><div>But where I think this makes the=
 most sense, is not in keywords... but rather section support. This yields =
the possibility of concatenating alike sections together. I can see this be=
ing VERY useful for a use case like:</div><div><br></div><div>I distribute =
my awesome definition/recipe that builds a very specific workflow. Someone =
downloads this, and instead of modifying it, they include it in a definitio=
n that they have which is customized for a particular OS. So, this can be i=
mplemented in a manner of having a base Ubuntu bootstrap (that could either=
 bootstrap from debootstrap or docker), and that gets included by another b=
ootstrap definition that adds some scientific packages to it. And that one =
can be included by another that does something else.</div><div>=C2=A0</div>=
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div dir=3D"ltr"><div class=3D"gmail_extra" =
style=3D"font-size:12.8px"><div class=3D"gmail_quote"><span class=3D""><spa=
n class=3D"m_-7040607336735898574gmail-im"><blockquote class=3D"gmail_quote=
" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);=
padding-left:1ex"></blockquote><div><br></div></span></span><div>I never th=
ought about the idea of allowing for multiple inherits (From) in one file, =
I&#39;m interested to hear what others think about this. My instinct is tel=
ling me if would lead to a lot more bugs, given that three different things=
 are going into one image generation (what if one image has a bug? What if =
one software is reinstalled? not compatible? etc). There is something to be=
 said for maintaining the standard that is known, the one that Docker has b=
een using, but I&#39;d be open to support for the other way.</div></div></d=
iv></div></blockquote><div><br></div><div>If you consider inherits being fu=
nctionality equivalent as froms, then I would agree that this would lead to=
 a lot more bugs as you would be layering in a manner that is not designed =
to be layered.</div><div>=C2=A0</div><blockquote class=3D"gmail_quote" styl=
e=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div di=
r=3D"ltr"><div class=3D"gmail_extra" style=3D"font-size:12.8px"><div class=
=3D"gmail_quote"><span class=3D""><span class=3D"m_-7040607336735898574gmai=
l-im"><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0p=
x 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">de=
f1 is the parent unless it inherits from other definitions as well.<br>4. P=
ackages from the Include keyword are concatenated.<br></blockquote></span><=
/span></div></div></div></blockquote><div><br></div><div>IncludePkgs? Hrmm.=
.. That would be tough. I don&#39;t think this should change any configurat=
ions of an existing keyword.</div><div>=C2=A0</div><blockquote class=3D"gma=
il_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-lef=
t:1ex"><div dir=3D"ltr"><div class=3D"gmail_extra" style=3D"font-size:12.8p=
x"><div class=3D"gmail_quote"><span class=3D""><span class=3D"m_-7040607336=
735898574gmail-im"><blockquote class=3D"gmail_quote" style=3D"margin:0px 0p=
x 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">5. Sec=
tions (runscript, post, test) are combined but this could potentially be ch=
anged to create multiple posts or tests.<br></blockquote><div><br></div></s=
pan></span><div>This also sounds messy. I like the idea of having &quot;mod=
ules&quot; that could be added to the post section (so the same code isn&#3=
9;t done over a million times) but I&#39;m not sure how this would work eas=
ily - some kind of template library? Then if the template changes, it&#39;s=
 another thing to keep track of second to the image and it&#39;s spec. No, =
I don&#39;t like this idea.</div></div></div></div></blockquote><div><br></=
div><div>I actually don&#39;t think it is so bad if implemented correctly, =
and it is a use case that I actually need at LBNL. Is it more reasonable to=
 you under the explanation of &quot;include&quot; rather then &quot;from&qu=
ot;? In that case, for example, a %post would be executed from both recipes=
 in the order that they were included.</div><div>=C2=A0</div><blockquote cl=
ass=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;p=
adding-left:1ex"><div dir=3D"ltr"><div class=3D"gmail_extra" style=3D"font-=
size:12.8px"><div class=3D"gmail_quote"><span class=3D""><span class=3D"m_-=
7040607336735898574gmail-im"><div>=C2=A0</div><blockquote class=3D"gmail_qu=
ote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,20=
4);padding-left:1ex">6. No docker bootstrap support at the moment.<br><br><=
/blockquote></span></span><div>We have lots of ways, and are working on imp=
roving them, for working with Docker:=C2=A0<a href=3D"http://singularity.lb=
l.gov/docs-docker" target=3D"_blank">http://singularity.lbl<wbr>.gov/docs-d=
ocker</a></div></div></div></div><div class=3D"HOEnZb"><div class=3D"h5">

<p></p></div></div></blockquote></div><div class=3D"gmail_extra">I don&#39;=
t see any reason this wouldn&#39;t work exactly as it already does if we im=
plement it as a preprocessor.</div><div class=3D"gmail_extra"><br></div><di=
v class=3D"gmail_extra">The last bit that I would like to add is the abilit=
y for the Include to be a URI so it could be a web address or Github locati=
on. Should be easy enough to implement using a shell based case statement.<=
/div><div class=3D"gmail_extra"><br></div><div class=3D"gmail_extra">Thanks=
, this is a great idea!</div><div class=3D"gmail_extra"><br></div><div clas=
s=3D"gmail_extra"><br></div><div><br></div>-- <br><div class=3D"gmail_signa=
ture" data-smartmail=3D"gmail_signature"><div dir=3D"ltr"><div><div dir=3D"=
ltr"><div><div dir=3D"ltr"><div><div dir=3D"ltr"><div dir=3D"ltr"><div dir=
=3D"ltr"><div>Gregory M. Kurtzer</div><div>HPC Systems Architect and Techno=
logy Developer</div><div>Lawrence Berkeley National Laboratory HPCS<br>Univ=
ersity of California Berkeley Research IT<br>Singularity Linux Containers=
=C2=A0(<a href=3D"http://singularity.lbl.gov/" target=3D"_blank">http://sin=
gularity.lbl.gov/</a>)</div><div>Warewulf Cluster Management=C2=A0(<a href=
=3D"http://warewulf.lbl.gov/" target=3D"_blank">http://warewulf.lbl.gov/</a=
>)</div><div>GitHub:=C2=A0<a href=3D"https://github.com/gmkurtzer" target=
=3D"_blank">https://github.com/gmkurtzer</a>,=C2=A0<span style=3D"font-size=
:12.8px">Twitter:=C2=A0</span><a href=3D"https://twitter.com/gmkurtzer" sty=
le=3D"font-size:12.8px" target=3D"_blank">https://twitter.com/gmkurtzer</a>=
</div></div></div></div></div></div></div></div></div></div></div>
</div></div>

--94eb2c0655c414d3d2053fcd3c2b--
