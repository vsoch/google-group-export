X-Received: by 10.66.21.197 with SMTP id x5mr17918068pae.4.1469480720795;
        Mon, 25 Jul 2016 14:05:20 -0700 (PDT)
X-BeenThere: singularity@lbl.gov
Received: by 10.36.17.22 with SMTP id 22ls3840569itf.18.gmail; Mon, 25 Jul
 2016 14:05:20 -0700 (PDT)
X-Received: by 10.66.100.202 with SMTP id fa10mr32824895pab.106.1469480720208;
        Mon, 25 Jul 2016 14:05:20 -0700 (PDT)
Return-Path: <gmku...@lbl.gov>
Received: from fe3.lbl.gov (fe3.lbl.gov. [128.3.41.68])
        by mx.google.com with ESMTPS id sy1si35315995pac.262.2016.07.25.14.05.20
        for <singu...@lbl.gov>
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Mon, 25 Jul 2016 14:05:20 -0700 (PDT)
Received-SPF: pass (google.com: domain of gmku...@lbl.gov designates 74.125.82.71 as permitted sender) client-ip=74.125.82.71;
Authentication-Results: mx.google.com;
       spf=pass (google.com: domain of gmku...@lbl.gov designates 74.125.82.71 as permitted sender) smtp.mailfrom=gmku...@lbl.gov
X-Ironport-SBRS: 2.7
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A2EkBADqfZZXf0dSfUpchREGs2iHAYYdAoE7BzsRAQEBAQEBAQMPAQEJCwsJFzGEXQEEARIRSBMLCws3AgIiEgEFARwGEyKIBggFmmGBMj4xizuOCBCJZIEDhB2DJIJaBY4NdYomAY5ugWyEWoh5jmISHoEPNIIrHIFsHDKHGoFDAQEB
X-IronPort-AV: E=Sophos;i="5.28,421,1464678000"; 
   d="scan'208,217";a="31297609"
Received: from mail-wm0-f71.google.com ([74.125.82.71])
  by fe3.lbl.gov with ESMTP; 25 Jul 2016 14:05:18 -0700
Received: by mail-wm0-f71.google.com with SMTP id x83so87612792wma.2
        for <singu...@lbl.gov>; Mon, 25 Jul 2016 14:05:17 -0700 (PDT)
X-Gm-Message-State: AEkooussBo2VUXp8hLv+h4UHPQjV1+yRXZ+OZYkOumBqAUgeddaymBperxwUqMnu7JJog1QO+zQX6kaeOpAzVDhfXSIDflEoajpw/cQO0fijhaxxi/JYhg//uvjrLjjh2UqczyEJIG8hnkf8kAe2Pt1+qao=
X-Received: by 10.25.87.2 with SMTP id l2mr8834006lfb.170.1469480717095;
        Mon, 25 Jul 2016 14:05:17 -0700 (PDT)
X-Received: by 10.25.87.2 with SMTP id l2mr8833999lfb.170.1469480716846; Mon,
 25 Jul 2016 14:05:16 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.25.214.141 with HTTP; Mon, 25 Jul 2016 14:05:16 -0700 (PDT)
In-Reply-To: <87bn1lsksq.fsf@pc102091.liv.ac.uk>
References: <CAN7etTxV2KivnVCCHAMe-KLdQrReXoQ0=LcBUTWqhT0G7yPwAA@mail.gmail.com>
 <878twvszfx.fsf@pc102091.liv.ac.uk> <CAN7etTz5zH4Qop-j87c31D3Qpc2+4xY2XOcHOua1q4UNTtGJvQ@mail.gmail.com>
 <87bn1lsksq.fsf@pc102091.liv.ac.uk>
From: "Gregory M. Kurtzer" <gmku...@lbl.gov>
Date: Mon, 25 Jul 2016 14:05:16 -0700
Message-ID: <CAN7etTxQ0rr9ZxY5F6c-y+kepW64QouyXoaz8avuYyVZaDs5=w@mail.gmail.com>
Subject: Re: [Singularity] Singularity 2.1 testing?
To: singularity <singu...@lbl.gov>
Content-Type: multipart/alternative; boundary=001a114127bc21f17205387c24b5

--001a114127bc21f17205387c24b5
Content-Type: text/plain; charset=UTF-8

On Mon, Jul 25, 2016 at 10:13 AM, Dave Love <d....@liverpool.ac.uk> wrote:

> "Gregory M. Kurtzer" <gmku...@lbl.gov> writes:
>
> >> Doubtless it won't go down well, but from the state of the source I last
> >> checked, I think it needs plenty of work before it's released.  In
> >> particular, I don't consider it releasable for Fedora (though the
> >> automated system unfortunately pushed it into f24).
> >>
> >
> > Can you elaborate on this please?
>
> Well, I've laboriously gone through checking return codes and fixing, or
> noting some incorrect usage, but that keeps needing merging.  (In some
> cases functions seemed to be failing in normal usage, so I had to revert
> checks pending investigation.)  I don't think any memory allocations
> were checked, for instance.  I'm not sure I trust myself to audit setuid
> programs, though I've fixed things which eluded Sun in the past.
>

I need help with auditing the Singularity code. I am quite aware that
security is the number one concern with Singularity, and the best I can do
is encourage people to help and share their findings.


>
> Of what i remember:  There are still unsafe calls in signal handlers, at
> least, but I don't know how important that is.  Various things are
> broken, e.g. due to the crazy set -u in the shell scripts.  The
> backward-incompatible changes to have broken docker import, and I
> haven't understood that yet.  I think there should be a warning that the
> new version is incompatible with old containers.
>

The 'set -u' was requested in the name of "security" and trusting the
environment. While I am not a shell expert, I was open to the feature
request to increase sanity and things being properly set. I have seen some
issues with it, but nothing that was not easily fixed.


>
> > At present, I am checking the return code for success/fail on pretty much
> > every system and function call passed. Please let me/us know if any were
> > missed! As you know, I am completely open and supportive of patches,
> fixes
> > and updates!
>
> As I said, I can't contribute now due to the policy of ignoring
> copyright law, though I've published assorted changes under BSD3.
>

There is no project policy which ignores copyright law.


>
> > I went through each of the flawfinder warnings, and fixed a massive
> amount
> > of what it found and commented on almost all of the others that were a
> > severity greater then 1. Again, help is wanted and I'm sure everyone on
> the
> > list would be appreciative!
>
> Incorrect use of strncpy had the warning silenced.  For some reason
> there's also truncation of strings that seems to be a result of the
> checks, so that it can't now deal with the path lengths up to the system
> limit.  Rather than mark each instance of classes of warning, I'd
> suppress them in the tool, however that's done.
>

$ flawfinder -n -S src/ | grep strncpy
src/image-mount.c:173:  [1] (buffer) strncpy: Easily used incorrectly;
doesn't always \0-terminate or check for invalid pointers (CWE-120).  Risk
is low because the source is a constant string.
src/image-mount.c:190:  [1] (buffer) strncpy: Easily used incorrectly;
doesn't always \0-terminate or check for invalid pointers (CWE-120).  Risk
is low because the source is a constant string.
src/sexec.c:695:  [1] (buffer) strncpy: Easily used incorrectly; doesn't
always \0-terminate or check for invalid pointers (CWE-120).  Risk is low
because the source is a constant string.
src/sexec.c:715:  [1] (buffer) strncpy: Easily used incorrectly; doesn't
always \0-terminate or check for invalid pointers (CWE-120).  Risk is low
because the source is a constant string.

In each of those cases, I am indeed copying a constant string and
specifying the length of the buffer which pretty much nullifies CWE-120 as
I understand it. Additionally if the buffer is not big enough, I want the
string to be truncated to length. To call this "incorrect use..." without
any specifics or proposing a fix is not helpful.

Flawfinder categorized these warnings as a low level 1 risk, so I choose to
ignore those warnings. If you feel my take on that is in error, then
justify it with some specifics and/or send a patch.


>
> >> [There are potentially better checking tools, but splint won't cope with
> >> c99, cpachecker crashes, I don't know how to drive frama-c usefully, and
> >> I haven't tried rose/compass (which I wish didn't use proprietary
> >> parsers).  However, I found two classes of error with gcc.]
> >>
> >
> > If you don't have the time, whatever pointers you can provide would be
> > helpful.
>
> Gcc found incorrect checks of the result of functions that return
> pointers for them being negative -- -Wextra is sometimes useful -- and
> some format errors.


I am not currently aware of any compile time warnings or errors, it is
possible you grabbed a snapshot from master/trunk before I was done.
Regarding -Wextra, I add that by hand from time to time when I do spot
checking.... As you mentioned, the output is only sometimes useful.


-- 
Gregory M. Kurtzer
High Performance Computing Services (HPCS)
University of California
Lawrence Berkeley National Laboratory
One Cyclotron Road, Berkeley, CA 94720

--001a114127bc21f17205387c24b5
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><br><div class=3D"gmail_extra"><br><div class=3D"gmail_quo=
te">On Mon, Jul 25, 2016 at 10:13 AM, Dave Love <span dir=3D"ltr">&lt;<a hr=
ef=3D"mailto:d....@liverpool.ac.uk" target=3D"_blank">d....@liverpool.ac.uk=
</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin=
:0px 0px 0px 0.8ex;border-left-width:1px;border-left-style:solid;border-lef=
t-color:rgb(204,204,204);padding-left:1ex"><span class=3D"gmail-">&quot;Gre=
gory M. Kurtzer&quot; &lt;<a href=3D"mailto:gmku...@lbl.gov">gmku...@lbl.go=
v</a>&gt; writes:<br>
<br>
</span><span class=3D"gmail-">&gt;&gt; Doubtless it won&#39;t go down well,=
 but from the state of the source I last<br>
&gt;&gt; checked, I think it needs plenty of work before it&#39;s released.=
=C2=A0 In<br>
&gt;&gt; particular, I don&#39;t consider it releasable for Fedora (though =
the<br>
&gt;&gt; automated system unfortunately pushed it into f24).<br>
&gt;&gt;<br>
&gt;<br>
&gt; Can you elaborate on this please?<br>
<br>
</span>Well, I&#39;ve laboriously gone through checking return codes and fi=
xing, or<br>
noting some incorrect usage, but that keeps needing merging.=C2=A0 (In some=
<br>
cases functions seemed to be failing in normal usage, so I had to revert<br=
>
checks pending investigation.)=C2=A0 I don&#39;t think any memory allocatio=
ns<br>
were checked, for instance.=C2=A0 I&#39;m not sure I trust myself to audit =
setuid<br>
programs, though I&#39;ve fixed things which eluded Sun in the past.<br></b=
lockquote><div><br></div><div>I need help with auditing the Singularity cod=
e. I am quite aware that security is the number one concern with Singularit=
y, and the best I can do is encourage people to help and share their findin=
gs.</div><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin=
:0px 0px 0px 0.8ex;border-left-width:1px;border-left-style:solid;border-lef=
t-color:rgb(204,204,204);padding-left:1ex">
<br>
Of what i remember:=C2=A0 There are still unsafe calls in signal handlers, =
at<br>
least, but I don&#39;t know how important that is.=C2=A0 Various things are=
<br>
broken, e.g. due to the crazy set -u in the shell scripts.=C2=A0 The<br>
backward-incompatible changes to have broken docker import, and I<br>
haven&#39;t understood that yet.=C2=A0 I think there should be a warning th=
at the<br>
new version is incompatible with old containers.<br></blockquote><div><br><=
/div><div>The &#39;set -u&#39; was requested in the name of &quot;security&=
quot; and trusting the environment. While I am not a shell expert, I was op=
en to the feature request to increase sanity and things being properly set.=
 I have seen some issues with it, but nothing that was not easily fixed.</d=
iv><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0px 0=
px 0px 0.8ex;border-left-width:1px;border-left-style:solid;border-left-colo=
r:rgb(204,204,204);padding-left:1ex">
<span class=3D"gmail-"><br>
&gt; At present, I am checking the return code for success/fail on pretty m=
uch<br>
&gt; every system and function call passed. Please let me/us know if any we=
re<br>
&gt; missed! As you know, I am completely open and supportive of patches, f=
ixes<br>
&gt; and updates!<br>
<br>
</span>As I said, I can&#39;t contribute now due to the policy of ignoring<=
br>
copyright law, though I&#39;ve published assorted changes under BSD3.<br></=
blockquote><div><br></div><div>There is no project policy which ignores cop=
yright law.<br></div><div>=C2=A0<br></div><blockquote class=3D"gmail_quote"=
 style=3D"margin:0px 0px 0px 0.8ex;border-left-width:1px;border-left-style:=
solid;border-left-color:rgb(204,204,204);padding-left:1ex">
<span class=3D"gmail-"><br>
&gt; I went through each of the flawfinder warnings, and fixed a massive am=
ount<br>
&gt; of what it found and commented on almost all of the others that were a=
<br>
&gt; severity greater then 1. Again, help is wanted and I&#39;m sure everyo=
ne on the<br>
&gt; list would be appreciative!<br>
<br>
</span>Incorrect use of strncpy had the warning silenced.=C2=A0 For some re=
ason<br>
there&#39;s also truncation of strings that seems to be a result of the<br>
checks, so that it can&#39;t now deal with the path lengths up to the syste=
m<br>
limit.=C2=A0 Rather than mark each instance of classes of warning, I&#39;d<=
br>
suppress them in the tool, however that&#39;s done.<br></blockquote><div><b=
r></div><div>$ flawfinder -n -S src/ | grep strncpy<br></div><div><div>src/=
image-mount.c:173: =C2=A0[1] (buffer) strncpy: Easily used incorrectly; doe=
sn&#39;t always \0-terminate or check for invalid pointers (CWE-120).=C2=A0=
 Risk is low because the source is a constant string.</div><div>src/image-m=
ount.c:190: =C2=A0[1] (buffer) strncpy: Easily used incorrectly; doesn&#39;=
t always \0-terminate or check for invalid pointers (CWE-120).=C2=A0 Risk i=
s low because the source is a constant string.</div><div>src/sexec.c:695: =
=C2=A0[1] (buffer) strncpy: Easily used incorrectly; doesn&#39;t always \0-=
terminate or check for invalid pointers (CWE-120).=C2=A0 Risk is low becaus=
e the source is a constant string.</div><div>src/sexec.c:715: =C2=A0[1] (bu=
ffer) strncpy: Easily used incorrectly; doesn&#39;t always \0-terminate or =
check for invalid pointers (CWE-120).=C2=A0 Risk is low because the source =
is a constant string.</div></div><div><br></div><div>In each of those cases=
, I am indeed copying a constant string and specifying the length of the bu=
ffer which pretty much nullifies CWE-120 as I understand it. Additionally i=
f the buffer is not big enough, I want the string to be truncated to length=
. To call this &quot;incorrect use...&quot; without any specifics or propos=
ing a fix is not helpful.</div><div><br></div><div>Flawfinder categorized t=
hese warnings as a low level 1 risk, so I choose to ignore those warnings. =
If you feel my take on that is in error, then justify it with some specific=
s and/or send a patch.</div><div>=C2=A0<br></div><blockquote class=3D"gmail=
_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left-width:1px;border-left=
-style:solid;border-left-color:rgb(204,204,204);padding-left:1ex">
<span class=3D"gmail-"><br>
&gt;&gt; [There are potentially better checking tools, but splint won&#39;t=
 cope with<br>
&gt;&gt; c99, cpachecker crashes, I don&#39;t know how to drive frama-c use=
fully, and<br>
&gt;&gt; I haven&#39;t tried rose/compass (which I wish didn&#39;t use prop=
rietary<br>
&gt;&gt; parsers).=C2=A0 However, I found two classes of error with gcc.]<b=
r>
&gt;&gt;<br>
&gt;<br>
&gt; If you don&#39;t have the time, whatever pointers you can provide woul=
d be<br>
&gt; helpful.<br>
<br>
</span>Gcc found incorrect checks of the result of functions that return<br=
>
pointers for them being negative -- -Wextra is sometimes useful -- and<br>
some format errors.</blockquote><div><br></div><div>I am not currently awar=
e of any compile time warnings or errors, it is possible you grabbed a snap=
shot from master/trunk before I was done. Regarding -Wextra, I add that by =
hand from time to time when I do spot checking.... As you mentioned, the ou=
tput is only sometimes useful.</div><div><br></div><div><br></div></div>-- =
<br><div class=3D"gmail_signature"><div dir=3D"ltr"><div>Gregory M. Kurtzer=
<br>High Performance Computing Services (HPCS)<br>University of California<=
br>Lawrence Berkeley National Laboratory<br>One Cyclotron Road, Berkeley, C=
A 94720</div></div></div>
</div></div>

--001a114127bc21f17205387c24b5--
