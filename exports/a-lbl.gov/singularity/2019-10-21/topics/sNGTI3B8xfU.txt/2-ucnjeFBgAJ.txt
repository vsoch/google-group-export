X-Received: by 10.157.48.18 with SMTP id d18mr8547174otc.121.1477926144963;
        Mon, 31 Oct 2016 08:02:24 -0700 (PDT)
X-BeenThere: singularity@lbl.gov
Received: by 10.36.22.203 with SMTP id a194ls1706633ita.22.canary-gmail; Mon,
 31 Oct 2016 08:02:24 -0700 (PDT)
X-Received: by 10.36.85.9 with SMTP id e9mr8309964itb.31.1477926144383;
        Mon, 31 Oct 2016 08:02:24 -0700 (PDT)
Return-Path: <ch...@cam.ac.uk>
Received: from fe4.lbl.gov (fe4.lbl.gov. [128.3.41.71])
        by mx.google.com with ESMTP id o6si6799810pag.135.2016.10.31.08.02.24
        for <singu...@lbl.gov>;
        Mon, 31 Oct 2016 08:02:24 -0700 (PDT)
Received-SPF: pass (google.com: domain of ch...@cam.ac.uk designates 131.111.8.140 as permitted sender) client-ip=131.111.8.140;
Authentication-Results: mx.google.com;
       spf=pass (google.com: domain of ch...@cam.ac.uk designates 131.111.8.140 as permitted sender) smtp.mailfrom=ch...@cam.ac.uk
IronPort-PHdr: 9a23:98E/4B3llJHHwX36smDT+DRfVm0co7zxezQtwd8ZsegSLfad9pjvdHbS+e9qxAeQG96KsbQb2qGI7OjJYi8p2d65qncMcZhBBVcuqP49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL2PbrnD61zMOABK3bVMzfbWvXNGDxJron8mJuLTrKz1SgzS8Zb4gZD6Xli728vcsvI15N6wqwQHIqHYbM85fxGdvOE7B102kvpT4wYRnuxh0l7phspABAu3GePEjTLpXETAvKWEp9eXvvx2FQgyRtVUGVWBDuRpSAhONzBj2XJb+vyzguet6xWHONs2pEekcUj2nqa5gDgLr3nRUfwUl+X3a35QjxJlQpwis8lkhzg==
X-Ironport-SBRS: 3.5
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A0G0AAB4XBdYh4wIb4NcHQEFAQsBGAEFAQsBgn8BAQEBAXd9gz+Jd5VcAQaBG4dehHKCU4F+gx2BRRsZDgEcB4JJgzYCggo/FAEBAQEBAQEBAQEBAhABAQEKCwkJHTCCMwQDEwUEATkKMgEBAQEBAQEBAQEBAQEBARoCDTEDKgEBAQECAToUMAsLFQMJJQ8SECYOBwQBHASIGQMPCAUJuSQNKxqDJAEKAQEBASKFcoQbgQWCR4FSCwYBBoV2BYElAZg9KwgBAYYwgTiBUINKgyMLgjyNSIh1hByEAh5ja4JrEQuBU3IHhUsBDRcHWoExAQEB
X-IPAS-Result: A0G0AAB4XBdYh4wIb4NcHQEFAQsBGAEFAQsBgn8BAQEBAXd9gz+Jd5VcAQaBG4dehHKCU4F+gx2BRRsZDgEcB4JJgzYCggo/FAEBAQEBAQEBAQEBAhABAQEKCwkJHTCCMwQDEwUEATkKMgEBAQEBAQEBAQEBAQEBARoCDTEDKgEBAQECAToUMAsLFQMJJQ8SECYOBwQBHASIGQMPCAUJuSQNKxqDJAEKAQEBASKFcoQbgQWCR4FSCwYBBoV2BYElAZg9KwgBAYYwgTiBUINKgyMLgjyNSIh1hByEAh5ja4JrEQuBU3IHhUsBDRcHWoExAQEB
X-IronPort-AV: E=Sophos;i="5.31,575,1473145200"; 
   d="scan'208";a="53660303"
Received: from ppsw-40.csi.cam.ac.uk ([131.111.8.140])
  by fe4.lbl.gov with ESMTP; 31 Oct 2016 08:01:11 -0700
X-Cam-AntiVirus: no malware found
X-Cam-ScannerInfo: http://www.cam.ac.uk/cs/email/scanner/
Received: from erebus.hpc.cam.ac.uk ([131.111.56.110]:50506)
	by ppsw-40.csi.cam.ac.uk (smtp.hermes.cam.ac.uk [131.111.8.158]:587)
	with esmtpsa (LOGIN:ch741) (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)
	id 1c1E5G-000fDW-kB (Exim 4.86_36-e07b163) for singu...@lbl.gov
	(return-path <ch...@cam.ac.uk>); Mon, 31 Oct 2016 15:01:10 +0000
Date: Mon, 31 Oct 2016 15:01:10 +0000
From: Chris Hadjigeorgiou <ch...@cam.ac.uk>
To: singularity@lbl.gov
Subject: Re: [Singularity] Container Inheritance
Message-ID: <20161031150110.4ae399ac@erebus.hpc.cam.ac.uk>
In-Reply-To: <CAM=pu++C0H28BpymGFeJy4YiZg-hbcvbUvuHRweYUpdti--QXw@mail.gmail.com>
References: <5356fb8bc8f38cc652658fd80480ea67@cam.ac.uk>
	<CAM=pu+LMXzkzE7qR4TbJDyja9t0seGWzn2CKyN3JviBx5r3GZA@mail.gmail.com>
	<CAN7etTzGop+YMFJ3nC1F3MBRFB0sqrYOzZxfMyyx+ohbY7L_3A@mail.gmail.com>
	<CAM=pu++C0H28BpymGFeJy4YiZg-hbcvbUvuHRweYUpdti--QXw@mail.gmail.com>
X-Mailer: Claws Mail 3.13.2 (GTK+ 2.24.30; x86_64-redhat-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit


The "scientific workflows" is an interesting use case although I agree
the second case fits better. 

One option for both use cases is to use the %test section to understand
whether the result of an included bootstrap has changed from one
version to the other. This could also be considered the other way
around, by adding some condition to the include, ie. what's the output
of some command or if some library gives the same numeric result.

I'm not sure there's a way around the redundancy vs familiarity.
The system could have more strict moderation but too much of that and
adoption could be affected. Also from a sys admin/software management
point of view the includes can be a considered an advantage, if
multiple definitions include one definition then it's easier to keep
track of updates. Instead if someone builds an image using a single
definition and doesn't keep track of all the packages it could easily
become outdated.

The multiple OS part is really cool and could be developed
independently. Just think of downloading a specification and during
bootstrap use some tag/option to specify which OS to use:

singularity bootstrap --os yum vim.img vim.def

This could allow as much code reusability as possible, again if done
right. What happens with packages installed with bootstrap? Would you
need to have a keyword for each OS? especially since packages can have
different names across distros.


On Wed, 26 Oct 2016 18:01:04 -0700
vanessa s <vso...@gmail.com> wrote:

> ahh, I think I understand the difference. This is more like an
> include (or an import) depending on what language you metaphor with -
> another way of thinking about it is like bootstrapping a snippet into
> an image? I definitely like that idea for convenience, but it poses
> some problems, in terms of reproducibility. There are two use cases I
> see:
> 
> *scientific workflows:*
> If I'm a scientist, and I want to put together a bunch of "pieces"
> for my pipeline (and this is definitely a cool idea, instead of
> having each component of a workflow be a separate image, build them
> into the image) this gets complicated quickly because each
> include/snippet thing is really a specification for some step that
> (probably) has inputs and outputs. How do my snippets talk to one
> another? How does the user know how to connect them? With containers,
> we can (eventually) have each one understood as an executable, with
> some kind of input/output (file, pipe, whatever) but this is a lot
> more complicated with just chunks of code. Do-able, yes, but hairy.
> Conceptually they are both sort of the same - like functions right? A
> container with a runscript that does something specific, used from
> the outside as an executable, is just a function. A snippet doesn't
> necessary "have" to be a function, but for the scientist, it might be.

> 
> *module / software setup*
> The second (more fitting) use case is to install stuff. If I have an
> include snippet that installs anaconda, then I can just "include:
> anaconda snippet." But this is a bit scary for reproducibility,
> because what if I can't get access to anaconda snippet? It would
> totally rely on being able to have a reliable and available "snippet
> server" with proper versioning, etc. But it would be a beautiful
> (probably idealistic is the better word) world if we could eliminate
> a bunch of redundancy and have people re-use others code. This is
> kind of what Github should be - a repo is like a URI, and the code
> within it has versioning and all that. But they are not optimized to
> find things easily, they are optimized for users to create as many
> repos as possible.
> 
> *if we could do it perfectly...*
> Then I would, akin to having the Singularity spec file, have some
> kind of simple spec for an include. If you drop it in a folder with
> one or more files, the folder would be flagged/identified as having
> the include, and whatever other dependencies are required would be in
> the folder. The spec would also say what kinds of Os it is allowed to
> be included in. Then when a user adds:
> 
> include vanessa/vim
> include vanessa/spec1
> include vanessa/spec2
> 
> it really comes down to cloning a bunch of repos on the back end,
> validating the specs, and adding them (or not). A spec could be valid
> for multiple os. How would that work? Having different sections, for
> example:
> 
> # vanessa/vim
> 
> %container: yum
> > yum install vim
> >  
> 
> 
> > %container: debian
> > apt-get install vim  
> 
> 
> 
> Github could still be used to host and provide version control, and
> the snippet's uri would be the github repo. When you think about it,
> this is really just another layer of a Dockerfile or Singularityfile,
> but the actual specification is a simple set of code to install
> something. If Singularity is big and well known, we would want people
> that produce software things to provide these include nuggets to be
> easily used. So actually, if github is the source of these things
> (and not some Singularity Hub) we could just do:
> 
> include singularityware/singularity
> include vsoch/vim
> 
> etc.
> 
> I really like this idea of breaking code (and things generally) down
> into the most atomic of pieces. If you look across a bunch of
> Dockerfiles, you are going to find a million times when a user
> installs anaconda, or sets up an ipython notebook server, and it's a
> bit redundant. On the other hand, the redundancy is important for
> reproducibility - it ensures that we are (closer) to the core lines
> of code that build the environment we need. Adding an include to an
> external thing, while reducing redundancy and adding convenience,
> makes us a bit farther from that. So hmm, let's keep thinking about
> this! It's a good idea, just not sure how to do it right.
> 
> 
> On Wed, Oct 26, 2016 at 4:46 PM, Gregory M. Kurtzer
> <gmku...@lbl.gov> wrote:
> 
> >
> >
> > On Wed, Oct 26, 2016 at 3:28 PM, vanessa s <vso...@gmail.com>
> > wrote: 
> >> This is a great idea, and the reason that we added the "From"
> >> command (akin to docker). For example, right now you can bootstrap
> >> from a Docker image:
> >>
> >> Boostrap: Docker
> >> From: ubuntu:latest
> >>
> >> etc.
> >>
> >> In the case you showed, your "inherit" is simply a renaming of
> >> "From" - and I (think) we either have something in the queue, or
> >> have talked about the idea of image "overlays" before. It sounds
> >> like to achieve the functionality you are describing, given that
> >> we have another Singularity definition, we would do something like:
> >>
> >> Bootstrap: Singularity
> >> From: myimage/latest
> >>
> >> etc.
> >>
> >> My overall 0.02 - let's focus on doing the current functionality
> >> really well, without bugs, before we try to expand it too quickly.
> >> A lot of what we are talking about will be greatly helped with a
> >> singularity equivalent of Docker Hub, and this is still in
> >> development. Some more comments below! 
> >
> > I interpreted it as a slightly different use case as the From in the
> > Docker bootstrap. This would need to be parsed via a pre-processor
> > and reassemble a new definition file based that includes the bits
> > from the definition file that it is inheriting. I would prefer to
> > call it Include as it is more akin to how includes work with the
> > C/C++ preprocessors. For example, considering the following two
> > files main.def and included.def:
> >
> > main.def:
> >    Param1: foo
> >    Include: ./included.def
> >    Param2: bar
> >
> > included.def:
> >    ParamA: hello
> >    %foo
> >    echo hi
> >
> > would be functionally equiv to
> >
> >    Param1: foo
> >    ParamA: hello
> >    Param2; bar
> >
> > Of course there must be some logic to automatically separate the
> > header from the sections, but that isn't too hard. The trickier
> > part is recursion.
> >
> >  
> >>
> >>  
> >>> Some remarks/clarifications:
> >>>
> >>> 1. Currently there's no built-in limit on the depth of
> >>> inheritance but the deepest definition is considered the main
> >>> parent. 
> >>
> >> This makes sense.
> >>  
> >
> > While there is probably no use cases that would require recursion,
> > why not support it from the get-go?
> >
> >  
> >>
> >>  
> >>> 2. The main parent's BootStrap, OSVersion, MirrorURL and UpdateURL
> >>> keywords take priority over all other definitions.
> >>>  
> >>
> >> We would want to explicitly walk people through different goals
> >> and use cases...
> >>  
> >
> > This should be easy and I would submit that the order of the
> > keywords should always take precedent (first will be used, and all
> > others ignored). With that, if we use an Include statement above
> > any other keywords, then the file that is being included will have
> > keywords defined *above* the parent, and thus those will end up
> > being parsed first. 
> >>
> >>  
> >>> 3. The Inherit keyword can contain multiple definitions, but the
> >>> first definition will always be considered the parent or
> >>> the one which leads to the parent. ie.
> >>> Inherit: def1 def2 def3
> >>>  
> >>  
> > I didn't realize it until now, but I think we are indeed thinking of
> > different features. In the vision that I have, you could have as
> > many Include keywords as you want. All in order of how they would
> > be included (again just like in C). For example:
> >
> > Include: def1
> > Include: def2
> > Include: def3
> >
> > With of course the first defined keyword taking priority.
> >
> > But where I think this makes the most sense, is not in keywords...
> > but rather section support. This yields the possibility of
> > concatenating alike sections together. I can see this being VERY
> > useful for a use case like:
> >
> > I distribute my awesome definition/recipe that builds a very
> > specific workflow. Someone downloads this, and instead of modifying
> > it, they include it in a definition that they have which is
> > customized for a particular OS. So, this can be implemented in a
> > manner of having a base Ubuntu bootstrap (that could either
> > bootstrap from debootstrap or docker), and that gets included by
> > another bootstrap definition that adds some scientific packages to
> > it. And that one can be included by another that does something
> > else.
> >
> >  
> >>
> >> I never thought about the idea of allowing for multiple inherits
> >> (From) in one file, I'm interested to hear what others think about
> >> this. My instinct is telling me if would lead to a lot more bugs,
> >> given that three different things are going into one image
> >> generation (what if one image has a bug? What if one software is
> >> reinstalled? not compatible? etc). There is something to be said
> >> for maintaining the standard that is known, the one that Docker
> >> has been using, but I'd be open to support for the other way. 
> >
> > If you consider inherits being functionality equivalent as froms,
> > then I would agree that this would lead to a lot more bugs as you
> > would be layering in a manner that is not designed to be layered.
> >
> >  
> >>
> >>  
> >>> def1 is the parent unless it inherits from other definitions as
> >>> well. 4. Packages from the Include keyword are concatenated.
> >>>  
> >>  
> > IncludePkgs? Hrmm... That would be tough. I don't think this should
> > change any configurations of an existing keyword.
> >
> >  
> >> 5. Sections (runscript, post, test) are combined but this could  
> >>> potentially be changed to create multiple posts or tests.
> >>>  
> >>
> >> This also sounds messy. I like the idea of having "modules" that
> >> could be added to the post section (so the same code isn't done
> >> over a million times) but I'm not sure how this would work easily
> >> - some kind of template library? Then if the template changes,
> >> it's another thing to keep track of second to the image and it's
> >> spec. No, I don't like this idea. 
> >
> > I actually don't think it is so bad if implemented correctly, and
> > it is a use case that I actually need at LBNL. Is it more
> > reasonable to you under the explanation of "include" rather then
> > "from"? In that case, for example, a %post would be executed from
> > both recipes in the order that they were included.
> >
> >  
> >>
> >>  
> >>> 6. No docker bootstrap support at the moment.
> >>>
> >>> We have lots of ways, and are working on improving them, for
> >>> working  
> >> with Docker: http://singularity.lbl.gov/docs-docker
> >>
> >> I don't see any reason this wouldn't work exactly as it already
> >> does if  
> > we implement it as a preprocessor.
> >
> > The last bit that I would like to add is the ability for the
> > Include to be a URI so it could be a web address or Github
> > location. Should be easy enough to implement using a shell based
> > case statement.
> >
> > Thanks, this is a great idea!
> >
> >
> >
> > --
> > Gregory M. Kurtzer
> > HPC Systems Architect and Technology Developer
> > Lawrence Berkeley National Laboratory HPCS
> > University of California Berkeley Research IT
> > Singularity Linux Containers (http://singularity.lbl.gov/)
> > Warewulf Cluster Management (http://warewulf.lbl.gov/)
> > GitHub: https://github.com/gmkurtzer, Twitter: https://
> > twitter.com/gmkurtzer
> >
> > --
> > You received this message because you are subscribed to the Google
> > Groups "singularity" group.
> > To unsubscribe from this group and stop receiving emails from it,
> > send an email to singu...@lbl.gov.
> >  
> 
> 
> 

