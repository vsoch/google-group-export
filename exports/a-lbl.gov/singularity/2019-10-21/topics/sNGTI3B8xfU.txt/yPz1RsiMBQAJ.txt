X-Received: by 10.107.34.6 with SMTP id i6mr4762452ioi.14.1477652987865;
        Fri, 28 Oct 2016 04:09:47 -0700 (PDT)
X-BeenThere: singularity@lbl.gov
Received: by 10.36.28.73 with SMTP id c70ls428554itc.13.canary-gmail; Fri, 28
 Oct 2016 04:09:47 -0700 (PDT)
X-Received: by 10.107.7.33 with SMTP id 33mr4859106ioh.35.1477652987273;
        Fri, 28 Oct 2016 04:09:47 -0700 (PDT)
Received: by 10.202.253.130 with SMTP id b124msoii;
        Wed, 26 Oct 2016 18:01:28 -0700 (PDT)
X-Received: by 10.99.170.79 with SMTP id x15mr7589399pgo.105.1477530088548;
        Wed, 26 Oct 2016 18:01:28 -0700 (PDT)
Return-Path: <vso...@gmail.com>
Received: from fe4.lbl.gov (fe4.lbl.gov. [128.3.41.71])
        by mx.google.com with ESMTP id bq3si4364332pab.70.2016.10.26.18.01.28
        for <singu...@lbl.gov>;
        Wed, 26 Oct 2016 18:01:28 -0700 (PDT)
Received-SPF: pass (google.com: domain of vso...@gmail.com designates 209.85.218.41 as permitted sender) client-ip=209.85.218.41;
Authentication-Results: mx.google.com;
       dkim=pass head...@gmail.com;
       spf=pass (google.com: domain of vso...@gmail.com designates 209.85.218.41 as permitted sender) smtp.mailfrom=vso...@gmail.com
IronPort-PHdr: 9a23:f3KZPx2fxOOdQIIHsmDT+DRfVm0co7zxezQtwd8ZsegeLPad9pjvdHbS+e9qxAeQG96KsbQb06GN6+jJYi8p2d65qncMcZhBBVcuqP49uEgeOvODElDxN/XwbiY3T4xoXV5h+GynYwAOQJ6tL2PbrnD61zMOABK3bVMzfbWvXNGKxJ/vn8mJuLTrKz1SgzS8Zb4gZD6Xli728vcsvI15N6wqwQHIqHYbM85fxGdvOE7B102kvpT4wYRnuxh0l7phspcYEPayQqIjULYNCT0nN3wyttbqsxbeSQKV52cNEXgQiQdCGAPf7Rv3dpP7tm31sfQu5C7PJszwQq0wUC6j87ZDTBXszigAKW0X6mbS39J5iq9AuxvpvFQr3ZXTa4GcKNJxe6rceZURQm8XDZUZbDBIHo7pN9hHNOEGJ+sN6tClqg==
X-Ironport-SBRS: 2.7
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A2FXAABhURFYfynaVdFZAx0BBQELARkGDIJINwEBAQEBdX0HgTKCBol4ln+CV4xNhRuBRxskAxwBCoJFgVyBWgKBdwc/FAEBAQEBAQEBAQEBAhABAQkLCwkbMoIzBAIBAhEFBAE5CgYsAQEBAQEBAQEBAQEBAQEBGgINHhMDDwIZAQEBAwESCAkdAQ0OHgMMBgULCgMgCgICIQEBDgMBBQEcDgcEARwEAYgXAQMPCAUJpSGBMj8yi0aBa4JfBYNmChknDVODHAEBAQEGAQEBAQEBAQEBFgIGEIl9gQWCR4FSCwYBBjcMGoIFOIJbBY9ChHaFKTWGLIE4gU+DSoMjgjyNSIhwhBqCPxMegREPD2Mxgl4sDxyBch40B4YhAQ0XBykxgTEBAQE
X-IronPort-AV: E=Sophos;i="5.31,551,1473145200"; 
   d="scan'208,217";a="53329804"
Received: from mail-oi0-f41.google.com ([209.85.218.41])
  by fe4.lbl.gov with ESMTP; 26 Oct 2016 18:01:26 -0700
Received: by mail-oi0-f41.google.com with SMTP id i127so23038484oia.2
        for <singu...@lbl.gov>; Wed, 26 Oct 2016 18:01:26 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to;
        bh=XG/X2W+X316TIS74MqRyZCfVHGelLmWRBPHzbXFXigs=;
        b=pxdLMyEaxJiNQJtI7cho7b1u11R9s6BMqPk3TQeEwPFAYgowX78z9Fa4NvxXrg8Tbv
         WVHv4sCUDANPu8w5iCOFoAGGIDHzS5AQcqiglZ3gVABqKDOhDT0IM2oJGcn0M8/htBGh
         xudBwD/YdxIP0p7eEDZ0atFb/sznctzdF+MreI3Omf2je9LRMlH0sRhZE2rL31FKxnsS
         2q+t7tzviKEA2c8sFsbHbQBMmjmH4gRiGCpsXMNHHUX1hLu7OeMOsZ1GSfByO6Rb/We3
         nr0DbG/Er8YOIdPCwoNGc4vOMfqkZiYDIJzan4B7no3IjYY36XnhgvdvnOTkfwiRW+DT
         ZaXg==
X-Gm-Message-State: ABUngvd2DUn00u0rhJDhDeiMW8pkaWq+SzlFsR6NYJW5Z1vbdqe96ngC3YKtEZ/Pcq8Y8OPc6v6232YBqqkPdQ==
X-Received: by 10.107.164.103 with SMTP id n100mr4765627ioe.35.1477530085792;
 Wed, 26 Oct 2016 18:01:25 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.50.93.39 with HTTP; Wed, 26 Oct 2016 18:01:04 -0700 (PDT)
In-Reply-To: <CAN7etTzGop+YMFJ3nC1F3MBRFB0sqrYOzZxfMyyx+ohbY7L_3A@mail.gmail.com>
References: <5356fb8bc8f38cc652658fd80480ea67@cam.ac.uk> <CAM=pu+LMXzkzE7qR4TbJDyja9t0seGWzn2CKyN3JviBx5r3GZA@mail.gmail.com>
 <CAN7etTzGop+YMFJ3nC1F3MBRFB0sqrYOzZxfMyyx+ohbY7L_3A@mail.gmail.com>
From: vanessa s <vso...@gmail.com>
Date: Wed, 26 Oct 2016 18:01:04 -0700
Message-ID: <CAM=pu++C0H28BpymGFeJy4YiZg-hbcvbUvuHRweYUpdti--QXw@mail.gmail.com>
Subject: Re: [Singularity] Container Inheritance
To: singularity@lbl.gov
Content-Type: multipart/alternative; boundary=001a1141c956e8a564053fce4702

--001a1141c956e8a564053fce4702
Content-Type: text/plain; charset=UTF-8

ahh, I think I understand the difference. This is more like an include (or
an import) depending on what language you metaphor with - another way of
thinking about it is like bootstrapping a snippet into an image? I
definitely like that idea for convenience, but it poses some problems, in
terms of reproducibility. There are two use cases I see:

*scientific workflows:*
If I'm a scientist, and I want to put together a bunch of "pieces" for my
pipeline (and this is definitely a cool idea, instead of having each
component of a workflow be a separate image, build them into the image)
this gets complicated quickly because each include/snippet thing is really
a specification for some step that (probably) has inputs and outputs. How
do my snippets talk to one another? How does the user know how to connect
them? With containers, we can (eventually) have each one understood as an
executable, with some kind of input/output (file, pipe, whatever) but this
is a lot more complicated with just chunks of code. Do-able, yes, but
hairy. Conceptually they are both sort of the same - like functions right?
A container with a runscript that does something specific, used from the
outside as an executable, is just a function. A snippet doesn't necessary
"have" to be a function, but for the scientist, it might be.

*module / software setup*
The second (more fitting) use case is to install stuff. If I have an
include snippet that installs anaconda, then I can just "include: anaconda
snippet." But this is a bit scary for reproducibility, because what if I
can't get access to anaconda snippet? It would totally rely on being able
to have a reliable and available "snippet server" with proper versioning,
etc. But it would be a beautiful (probably idealistic is the better word)
world if we could eliminate a bunch of redundancy and have people re-use
others code. This is kind of what Github should be - a repo is like a URI,
and the code within it has versioning and all that. But they are not
optimized to find things easily, they are optimized for users to create as
many repos as possible.

*if we could do it perfectly...*
Then I would, akin to having the Singularity spec file, have some kind of
simple spec for an include. If you drop it in a folder with one or more
files, the folder would be flagged/identified as having the include, and
whatever other dependencies are required would be in the folder. The spec
would also say what kinds of Os it is allowed to be included in. Then when
a user adds:

include vanessa/vim
include vanessa/spec1
include vanessa/spec2

it really comes down to cloning a bunch of repos on the back end,
validating the specs, and adding them (or not). A spec could be valid for
multiple os. How would that work? Having different sections, for example:

# vanessa/vim

%container: yum
> yum install vim
>


> %container: debian
> apt-get install vim



Github could still be used to host and provide version control, and the
snippet's uri would be the github repo. When you think about it, this is
really just another layer of a Dockerfile or Singularityfile, but the
actual specification is a simple set of code to install something. If
Singularity is big and well known, we would want people that produce
software things to provide these include nuggets to be easily used. So
actually, if github is the source of these things (and not some Singularity
Hub) we could just do:

include singularityware/singularity
include vsoch/vim

etc.

I really like this idea of breaking code (and things generally) down into
the most atomic of pieces. If you look across a bunch of Dockerfiles, you
are going to find a million times when a user installs anaconda, or sets up
an ipython notebook server, and it's a bit redundant. On the other hand,
the redundancy is important for reproducibility - it ensures that we are
(closer) to the core lines of code that build the environment we need.
Adding an include to an external thing, while reducing redundancy and
adding convenience, makes us a bit farther from that. So hmm, let's keep
thinking about this! It's a good idea, just not sure how to do it right.


On Wed, Oct 26, 2016 at 4:46 PM, Gregory M. Kurtzer <gmku...@lbl.gov>
wrote:

>
>
> On Wed, Oct 26, 2016 at 3:28 PM, vanessa s <vso...@gmail.com> wrote:
>
>> This is a great idea, and the reason that we added the "From" command
>> (akin to docker). For example, right now you can bootstrap from a Docker
>> image:
>>
>> Boostrap: Docker
>> From: ubuntu:latest
>>
>> etc.
>>
>> In the case you showed, your "inherit" is simply a renaming of "From" -
>> and I (think) we either have something in the queue, or have talked about
>> the idea of image "overlays" before. It sounds like to achieve the
>> functionality you are describing, given that we have another Singularity
>> definition, we would do something like:
>>
>> Bootstrap: Singularity
>> From: myimage/latest
>>
>> etc.
>>
>> My overall 0.02 - let's focus on doing the current functionality really
>> well, without bugs, before we try to expand it too quickly. A lot of what
>> we are talking about will be greatly helped with a singularity equivalent
>> of Docker Hub, and this is still in development. Some more comments below!
>>
>
> I interpreted it as a slightly different use case as the From in the
> Docker bootstrap. This would need to be parsed via a pre-processor and
> reassemble a new definition file based that includes the bits from the
> definition file that it is inheriting. I would prefer to call it Include as
> it is more akin to how includes work with the C/C++ preprocessors. For
> example, considering the following two files main.def and included.def:
>
> main.def:
>    Param1: foo
>    Include: ./included.def
>    Param2: bar
>
> included.def:
>    ParamA: hello
>    %foo
>    echo hi
>
> would be functionally equiv to
>
>    Param1: foo
>    ParamA: hello
>    Param2; bar
>
> Of course there must be some logic to automatically separate the header
> from the sections, but that isn't too hard. The trickier part is recursion.
>
>
>>
>>
>>> Some remarks/clarifications:
>>>
>>> 1. Currently there's no built-in limit on the depth of inheritance but
>>> the deepest definition is considered the main parent.
>>>
>>
>> This makes sense.
>>
>
> While there is probably no use cases that would require recursion, why not
> support it from the get-go?
>
>
>>
>>
>>> 2. The main parent's BootStrap, OSVersion, MirrorURL and UpdateURL
>>> keywords take priority over all other definitions.
>>>
>>
>> We would want to explicitly walk people through different goals and use
>> cases...
>>
>
> This should be easy and I would submit that the order of the keywords
> should always take precedent (first will be used, and all others ignored).
> With that, if we use an Include statement above any other keywords, then
> the file that is being included will have keywords defined *above* the
> parent, and thus those will end up being parsed first.
>
>>
>>
>>> 3. The Inherit keyword can contain multiple definitions, but the first
>>> definition will always be considered the parent or
>>> the one which leads to the parent. ie.
>>> Inherit: def1 def2 def3
>>>
>>
> I didn't realize it until now, but I think we are indeed thinking of
> different features. In the vision that I have, you could have as many
> Include keywords as you want. All in order of how they would be included
> (again just like in C). For example:
>
> Include: def1
> Include: def2
> Include: def3
>
> With of course the first defined keyword taking priority.
>
> But where I think this makes the most sense, is not in keywords... but
> rather section support. This yields the possibility of concatenating alike
> sections together. I can see this being VERY useful for a use case like:
>
> I distribute my awesome definition/recipe that builds a very specific
> workflow. Someone downloads this, and instead of modifying it, they include
> it in a definition that they have which is customized for a particular OS.
> So, this can be implemented in a manner of having a base Ubuntu bootstrap
> (that could either bootstrap from debootstrap or docker), and that gets
> included by another bootstrap definition that adds some scientific packages
> to it. And that one can be included by another that does something else.
>
>
>>
>> I never thought about the idea of allowing for multiple inherits (From)
>> in one file, I'm interested to hear what others think about this. My
>> instinct is telling me if would lead to a lot more bugs, given that three
>> different things are going into one image generation (what if one image has
>> a bug? What if one software is reinstalled? not compatible? etc). There is
>> something to be said for maintaining the standard that is known, the one
>> that Docker has been using, but I'd be open to support for the other way.
>>
>
> If you consider inherits being functionality equivalent as froms, then I
> would agree that this would lead to a lot more bugs as you would be
> layering in a manner that is not designed to be layered.
>
>
>>
>>
>>> def1 is the parent unless it inherits from other definitions as well.
>>> 4. Packages from the Include keyword are concatenated.
>>>
>>
> IncludePkgs? Hrmm... That would be tough. I don't think this should change
> any configurations of an existing keyword.
>
>
>> 5. Sections (runscript, post, test) are combined but this could
>>> potentially be changed to create multiple posts or tests.
>>>
>>
>> This also sounds messy. I like the idea of having "modules" that could be
>> added to the post section (so the same code isn't done over a million
>> times) but I'm not sure how this would work easily - some kind of template
>> library? Then if the template changes, it's another thing to keep track of
>> second to the image and it's spec. No, I don't like this idea.
>>
>
> I actually don't think it is so bad if implemented correctly, and it is a
> use case that I actually need at LBNL. Is it more reasonable to you under
> the explanation of "include" rather then "from"? In that case, for example,
> a %post would be executed from both recipes in the order that they were
> included.
>
>
>>
>>
>>> 6. No docker bootstrap support at the moment.
>>>
>>> We have lots of ways, and are working on improving them, for working
>> with Docker: http://singularity.lbl.gov/docs-docker
>>
>> I don't see any reason this wouldn't work exactly as it already does if
> we implement it as a preprocessor.
>
> The last bit that I would like to add is the ability for the Include to be
> a URI so it could be a web address or Github location. Should be easy
> enough to implement using a shell based case statement.
>
> Thanks, this is a great idea!
>
>
>
> --
> Gregory M. Kurtzer
> HPC Systems Architect and Technology Developer
> Lawrence Berkeley National Laboratory HPCS
> University of California Berkeley Research IT
> Singularity Linux Containers (http://singularity.lbl.gov/)
> Warewulf Cluster Management (http://warewulf.lbl.gov/)
> GitHub: https://github.com/gmkurtzer, Twitter: https://
> twitter.com/gmkurtzer
>
> --
> You received this message because you are subscribed to the Google Groups
> "singularity" group.
> To unsubscribe from this group and stop receiving emails from it, send an
> email to singu...@lbl.gov.
>



-- 
Vanessa Villamia Sochat
Stanford University '16
(603) 321-0676

--001a1141c956e8a564053fce4702
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">ahh, I think I understand the difference. This is more lik=
e an include (or an import) depending on what language you metaphor with - =
another way of thinking about it is like bootstrapping a snippet into an im=
age? I definitely like that idea for convenience, but it poses some problem=
s, in terms of reproducibility. There are two use cases I see:<div><br></di=
v><div><b>scientific workflows:</b></div><div>If I&#39;m a scientist, and I=
 want to put together a bunch of &quot;pieces&quot; for my pipeline (and th=
is is definitely a cool idea, instead of having each component of a workflo=
w be a separate image, build them into the image) this gets complicated qui=
ckly because each include/snippet thing is really a specification for some =
step that (probably) has inputs and outputs. How do my snippets talk to one=
 another? How does the user know how to connect them? With containers, we c=
an (eventually) have each one understood as an executable, with some kind o=
f input/output (file, pipe, whatever) but this is a lot more complicated wi=
th just chunks of code. Do-able, yes, but hairy. Conceptually they are both=
 sort of the same - like functions right? A container with a runscript that=
 does something specific, used from the outside as an executable, is just a=
 function. A snippet doesn&#39;t necessary &quot;have&quot; to be a functio=
n, but for the scientist, it might be.</div><div><br></div><div><b>module /=
 software setup</b></div><div>The second (more fitting) use case is to inst=
all stuff. If I have an include snippet that installs anaconda, then I can =
just &quot;include: anaconda snippet.&quot; But this is a bit scary for rep=
roducibility, because what if I can&#39;t get access to anaconda snippet? I=
t would totally rely on being able to have a reliable and available &quot;s=
nippet server&quot; with proper versioning, etc. But it would be a beautifu=
l (probably idealistic is the better word) world if we could eliminate a bu=
nch of redundancy and have people re-use others code. This is kind of what =
Github should be - a repo is like a URI, and the code within it has version=
ing and all that. But they are not optimized to find things easily, they ar=
e optimized for users to create as many repos as possible.</div><div><br></=
div><div><b>if we could do it perfectly...</b></div><div>Then I would, akin=
 to having the Singularity spec file, have some kind of simple spec for an =
include. If you drop it in a folder with one or more files, the folder woul=
d be flagged/identified as having the include, and whatever other dependenc=
ies are required would be in the folder. The spec would also say what kinds=
 of Os it is allowed to be included in. Then when a user adds:</div><div><b=
r></div><div>include vanessa/vim<br></div><div>include vanessa/spec1</div><=
div>include vanessa/spec2</div><div><br></div><div>it really comes down to =
cloning a bunch of repos on the back end, validating the specs, and adding =
them (or not). A spec could be valid for multiple os. How would that work? =
Having different sections, for example:</div><div><br></div><div># vanessa/=
vim</div><div><br></div><blockquote class=3D"gmail_quote" style=3D"margin:0=
px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">%=
container: yum<br>yum install vim<br></blockquote><div>=C2=A0</div><blockqu=
ote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px=
 solid rgb(204,204,204);padding-left:1ex">%container: debian<br>apt-get ins=
tall vim</blockquote><div><br></div><div><br></div><div>Github could still =
be used to host and provide version control, and the snippet&#39;s uri woul=
d be the github repo. When you think about it, this is really just another =
layer of a Dockerfile or Singularityfile, but the actual specification is a=
 simple set of code to install something. If Singularity is big and well kn=
own, we would want people that produce software things to provide these inc=
lude nuggets to be easily used. So actually, if github is the source of the=
se things (and not some Singularity Hub) we could just do:</div><div><br></=
div><div><div>include singularityware/singularity<br></div><div>include vso=
ch/vim</div><div><br></div></div><div>etc.</div><div><br></div><div>I reall=
y like this idea of breaking code (and things generally) down into the most=
 atomic of pieces. If you look across a bunch of Dockerfiles, you are going=
 to find a million times when a user installs anaconda, or sets up an ipyth=
on notebook server, and it&#39;s a bit redundant. On the other hand, the re=
dundancy is important for reproducibility - it ensures that we are (closer)=
 to the core lines of code that build the environment we need. Adding an in=
clude to an external thing, while reducing redundancy and adding convenienc=
e, makes us a bit farther from that. So hmm, let&#39;s keep thinking about =
this! It&#39;s a good idea, just not sure how to do it right.<br></div><div=
><br></div></div><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">=
On Wed, Oct 26, 2016 at 4:46 PM, Gregory M. Kurtzer <span dir=3D"ltr">&lt;<=
a href=3D"mailto:gmku...@lbl.gov" target=3D"_blank">gmku...@lbl.gov</a>&gt;=
</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .=
8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr"><br><div =
class=3D"gmail_extra"><br><div class=3D"gmail_quote"><span class=3D"">On We=
d, Oct 26, 2016 at 3:28 PM, vanessa s <span dir=3D"ltr">&lt;<a href=3D"mail=
to:vso...@gmail.com" target=3D"_blank">vso...@gmail.com</a>&gt;</span> wrot=
e:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-l=
eft:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr"><span style=3D"font-s=
ize:12.8px">This is a great idea, and the reason that we added the &quot;Fr=
om&quot; command (akin to docker). For example, right now you can bootstrap=
 from a Docker image:</span><div style=3D"font-size:12.8px"><br></div><div =
style=3D"font-size:12.8px">Boostrap: Docker</div><div style=3D"font-size:12=
.8px">From: ubuntu:latest</div><div style=3D"font-size:12.8px"><br></div><d=
iv style=3D"font-size:12.8px">etc.</div><div style=3D"font-size:12.8px"><br=
></div><div style=3D"font-size:12.8px">In the case you showed, your &quot;i=
nherit&quot; is simply a renaming of &quot;From&quot; - and I (think) we ei=
ther have something in the queue, or have talked about the idea of image &q=
uot;overlays&quot; before. It sounds like to achieve the functionality you =
are describing, given that we have another Singularity definition, we would=
 do something like:</div><div style=3D"font-size:12.8px"><br></div><div sty=
le=3D"font-size:12.8px">Bootstrap: Singularity</div><div style=3D"font-size=
:12.8px">From: myimage/latest</div><div style=3D"font-size:12.8px"><br></di=
v><div style=3D"font-size:12.8px">etc.</div><div style=3D"font-size:12.8px"=
><br></div><div style=3D"font-size:12.8px">My overall 0.02 - let&#39;s focu=
s on doing the current functionality really well, without bugs, before we t=
ry to expand it too quickly. A lot of what we are talking about will be gre=
atly helped with a singularity equivalent of Docker Hub, and this is still =
in development. Some more comments below!</div></div></blockquote><div><br>=
</div></span><div>I interpreted it as a slightly different use case as the =
From in the Docker bootstrap. This would need to be parsed via a pre-proces=
sor and reassemble a new definition file based that includes the bits from =
the definition file that it is inheriting. I would prefer to call it Includ=
e as it is more akin to how includes work with the C/C++ preprocessors. For=
 example, considering the following two files main.def and included.def:</d=
iv><div><br></div><div>main.def:</div><div>=C2=A0 =C2=A0Param1: foo</div><d=
iv>=C2=A0 =C2=A0Include: ./included.def</div><div>=C2=A0 =C2=A0Param2: bar<=
/div><div><br></div><div>included.def:</div><div>=C2=A0 =C2=A0ParamA: hello=
</div><div>=C2=A0 =C2=A0%foo</div><div>=C2=A0 =C2=A0echo hi</div><div><br><=
/div><div>would be functionally equiv to</div><div><br></div><div>=C2=A0 =
=C2=A0Param1: foo</div><div>=C2=A0 =C2=A0ParamA: hello</div><div>=C2=A0 =C2=
=A0Param2; bar</div><div><br></div><div>Of course there must be some logic =
to automatically separate the header from the sections, but that isn&#39;t =
too hard. The trickier part is recursion.</div><span class=3D""><div>=C2=A0=
</div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-l=
eft:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr"><div style=3D"font-si=
ze:12.8px"><br></div><div class=3D"gmail_extra" style=3D"font-size:12.8px">=
<div class=3D"gmail_quote"><span><span class=3D"m_-32034950794924632m_-7040=
607336735898574gmail-im"><blockquote class=3D"gmail_quote" style=3D"margin:=
0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">=
<br>Some remarks/clarifications:<br><br>1. Currently there&#39;s no built-i=
n limit on the depth of inheritance but the deepest definition is considere=
d the main parent.<br></blockquote><div><br></div></span></span><div>This m=
akes sense.</div></div></div></div></blockquote><div><br></div></span><div>=
While there is probably no use cases that would require recursion, why not =
support it from the get-go?</div><span class=3D""><div>=C2=A0</div><blockqu=
ote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc s=
olid;padding-left:1ex"><div dir=3D"ltr"><div class=3D"gmail_extra" style=3D=
"font-size:12.8px"><div class=3D"gmail_quote"><span><span class=3D"m_-32034=
950794924632m_-7040607336735898574gmail-im"><div>=C2=A0</div><blockquote cl=
ass=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid=
 rgb(204,204,204);padding-left:1ex">2. The main parent&#39;s BootStrap, OSV=
ersion, MirrorURL and UpdateURL keywords take priority over all other defin=
itions.<br></blockquote><div><br></div></span></span><div>We would want to =
explicitly walk people through different goals and use cases...</div></div>=
</div></div></blockquote><div><br></div></span><div>This should be easy and=
 I would submit that the order of the keywords should always take precedent=
 (first will be used, and all others ignored). With that, if we use an Incl=
ude statement above any other keywords, then the file that is being include=
d will have keywords defined *above* the parent, and thus those will end up=
 being parsed first.</div><span class=3D""><blockquote class=3D"gmail_quote=
" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><=
div dir=3D"ltr"><div class=3D"gmail_extra" style=3D"font-size:12.8px"><div =
class=3D"gmail_quote"><span><span class=3D"m_-32034950794924632m_-704060733=
6735898574gmail-im"><div>=C2=A0</div><blockquote class=3D"gmail_quote" styl=
e=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);paddin=
g-left:1ex">3. The Inherit keyword can contain multiple definitions, but th=
e first definition will always be considered the parent or<br>the one which=
 leads to the parent. ie.<br>Inherit: def1 def2 def3<br></blockquote></span=
></span></div></div></div></blockquote><div><br></div></span><div>I didn&#3=
9;t realize it until now, but I think we are indeed thinking of different f=
eatures. In the vision that I have, you could have as many Include keywords=
 as you want. All in order of how they would be included (again just like i=
n C). For example:</div><div><br></div><div>Include: def1</div><div>Include=
: def2</div><div>Include: def3</div><div><br></div><div>With of course the =
first defined keyword taking priority.</div><div><br></div><div>But where I=
 think this makes the most sense, is not in keywords... but rather section =
support. This yields the possibility of concatenating alike sections togeth=
er. I can see this being VERY useful for a use case like:</div><div><br></d=
iv><div>I distribute my awesome definition/recipe that builds a very specif=
ic workflow. Someone downloads this, and instead of modifying it, they incl=
ude it in a definition that they have which is customized for a particular =
OS. So, this can be implemented in a manner of having a base Ubuntu bootstr=
ap (that could either bootstrap from debootstrap or docker), and that gets =
included by another bootstrap definition that adds some scientific packages=
 to it. And that one can be included by another that does something else.</=
div><span class=3D""><div>=C2=A0</div><blockquote class=3D"gmail_quote" sty=
le=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div d=
ir=3D"ltr"><div class=3D"gmail_extra" style=3D"font-size:12.8px"><div class=
=3D"gmail_quote"><span><span class=3D"m_-32034950794924632m_-70406073367358=
98574gmail-im"><blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0p=
x 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"></blockquo=
te><div><br></div></span></span><div>I never thought about the idea of allo=
wing for multiple inherits (From) in one file, I&#39;m interested to hear w=
hat others think about this. My instinct is telling me if would lead to a l=
ot more bugs, given that three different things are going into one image ge=
neration (what if one image has a bug? What if one software is reinstalled?=
 not compatible? etc). There is something to be said for maintaining the st=
andard that is known, the one that Docker has been using, but I&#39;d be op=
en to support for the other way.</div></div></div></div></blockquote><div><=
br></div></span><div>If you consider inherits being functionality equivalen=
t as froms, then I would agree that this would lead to a lot more bugs as y=
ou would be layering in a manner that is not designed to be layered.</div><=
span class=3D""><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D=
"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir=3D=
"ltr"><div class=3D"gmail_extra" style=3D"font-size:12.8px"><div class=3D"g=
mail_quote"><span><span class=3D"m_-32034950794924632m_-7040607336735898574=
gmail-im"><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margi=
n:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex=
">def1 is the parent unless it inherits from other definitions as well.<br>=
4. Packages from the Include keyword are concatenated.<br></blockquote></sp=
an></span></div></div></div></blockquote><div><br></div></span><div>Include=
Pkgs? Hrmm... That would be tough. I don&#39;t think this should change any=
 configurations of an existing keyword.</div><span class=3D""><div>=C2=A0</=
div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-lef=
t:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr"><div class=3D"gmail_ext=
ra" style=3D"font-size:12.8px"><div class=3D"gmail_quote"><span><span class=
=3D"m_-32034950794924632m_-7040607336735898574gmail-im"><blockquote class=
=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rg=
b(204,204,204);padding-left:1ex">5. Sections (runscript, post, test) are co=
mbined but this could potentially be changed to create multiple posts or te=
sts.<br></blockquote><div><br></div></span></span><div>This also sounds mes=
sy. I like the idea of having &quot;modules&quot; that could be added to th=
e post section (so the same code isn&#39;t done over a million times) but I=
&#39;m not sure how this would work easily - some kind of template library?=
 Then if the template changes, it&#39;s another thing to keep track of seco=
nd to the image and it&#39;s spec. No, I don&#39;t like this idea.</div></d=
iv></div></div></blockquote><div><br></div></span><div>I actually don&#39;t=
 think it is so bad if implemented correctly, and it is a use case that I a=
ctually need at LBNL. Is it more reasonable to you under the explanation of=
 &quot;include&quot; rather then &quot;from&quot;? In that case, for exampl=
e, a %post would be executed from both recipes in the order that they were =
included.</div><span class=3D""><div>=C2=A0</div><blockquote class=3D"gmail=
_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:=
1ex"><div dir=3D"ltr"><div class=3D"gmail_extra" style=3D"font-size:12.8px"=
><div class=3D"gmail_quote"><span><span class=3D"m_-32034950794924632m_-704=
0607336735898574gmail-im"><div>=C2=A0</div><blockquote class=3D"gmail_quote=
" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);=
padding-left:1ex">6. No docker bootstrap support at the moment.<br><br></bl=
ockquote></span></span><div>We have lots of ways, and are working on improv=
ing them, for working with Docker:=C2=A0<a href=3D"http://singularity.lbl.g=
ov/docs-docker" target=3D"_blank">http://singularity.lbl<wbr>.gov/docs-dock=
er</a></div></div></div></div><div class=3D"m_-32034950794924632HOEnZb"><di=
v class=3D"m_-32034950794924632h5">

<p></p></div></div></blockquote></span></div><div class=3D"gmail_extra">I d=
on&#39;t see any reason this wouldn&#39;t work exactly as it already does i=
f we implement it as a preprocessor.</div><div class=3D"gmail_extra"><br></=
div><div class=3D"gmail_extra">The last bit that I would like to add is the=
 ability for the Include to be a URI so it could be a web address or Github=
 location. Should be easy enough to implement using a shell based case stat=
ement.</div><div class=3D"gmail_extra"><br></div><div class=3D"gmail_extra"=
>Thanks, this is a great idea!</div><span class=3D"HOEnZb"><font color=3D"#=
888888"><div class=3D"gmail_extra"><br></div><div class=3D"gmail_extra"><br=
></div><div><br></div>-- <br><div class=3D"m_-32034950794924632gmail_signat=
ure" data-smartmail=3D"gmail_signature"><div dir=3D"ltr"><div><div dir=3D"l=
tr"><div><div dir=3D"ltr"><div><div dir=3D"ltr"><div dir=3D"ltr"><div dir=
=3D"ltr"><div>Gregory M. Kurtzer</div><div>HPC Systems Architect and Techno=
logy Developer</div><div>Lawrence Berkeley National Laboratory HPCS<br>Univ=
ersity of California Berkeley Research IT<br>Singularity Linux Containers=
=C2=A0(<a href=3D"http://singularity.lbl.gov/" target=3D"_blank">http://<wb=
r>singularity.lbl.gov/</a>)</div><div>Warewulf Cluster Management=C2=A0(<a =
href=3D"http://warewulf.lbl.gov/" target=3D"_blank">http://warewulf.<wbr>lb=
l.gov/</a>)</div><div>GitHub:=C2=A0<a href=3D"https://github.com/gmkurtzer"=
 target=3D"_blank">https://github.com/<wbr>gmkurtzer</a>,=C2=A0<span style=
=3D"font-size:12.8px">Twitter:=C2=A0</span><a href=3D"https://twitter.com/g=
mkurtzer" style=3D"font-size:12.8px" target=3D"_blank">https://<wbr>twitter=
.com/gmkurtzer</a></div></div></div></div></div></div></div></div></div></d=
iv></div>
</font></span></div></div><div class=3D"HOEnZb"><div class=3D"h5">

<p></p>

-- <br>
You received this message because you are subscribed to the Google Groups &=
quot;singularity&quot; group.<br>
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to <a href=3D"mailto:singu...@lbl.gov" target=3D"_blank">singularity+u=
nsubscribe@lbl.<wbr>gov</a>.<br>
</div></div></blockquote></div><br><br clear=3D"all"><div><br></div>-- <br>=
<div class=3D"gmail_signature" data-smartmail=3D"gmail_signature">Vanessa V=
illamia Sochat<br>Stanford University &#39;16<br><div><div><div>(603) 321-0=
676</div></div></div></div>
</div>

--001a1141c956e8a564053fce4702--
