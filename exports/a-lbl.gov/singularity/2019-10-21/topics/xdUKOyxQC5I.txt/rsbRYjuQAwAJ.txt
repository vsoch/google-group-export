Date: Mon, 26 Nov 2018 10:42:31 -0800 (PST)
From: Rutu Pandya <rut...@gmail.com>
To: singularity <singu...@lbl.gov>
Message-Id: <c6bef5e1-80b9-4516-885d-9dae5bbe1f1d@lbl.gov>
In-Reply-To: <e8911f2b-d946-4940-9da1-9f840ddcf234@lbl.gov>
References: <e8911f2b-d946-4940-9da1-9f840ddcf234@lbl.gov>
Subject: Re: pull NVIDIA Tensorflow container in Singularity without token
MIME-Version: 1.0
Content-Type: multipart/mixed; 
	boundary="----=_Part_1385_1106351852.1543257751691"

------=_Part_1385_1106351852.1543257751691
Content-Type: multipart/alternative; 
	boundary="----=_Part_1386_262202609.1543257751692"

------=_Part_1386_262202609.1543257751692
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit

Thanks Everyone for the help and feedback. I have attached the vagrant file 
for reference.

Vanessa - Will restart and enable the BIOS and test again.

John, thanks for pointing out the obvious mistakes I was making. Will use 
Martin's recipe file as reference and make changes as he has pointed out. 

What I am trying to do is build a Singularity container with Tensorflow, 
cuda, Python 3.4 to run a deep learning application(does image segmentation 
on it. Eventual goal is to install the container on another Windows Server 
and execute this application sitting inside the container. 

Thanks!
Rutu




On Friday, November 16, 2018 at 3:38:38 PM UTC-5, Rutu Pandya wrote:
>
> Hello,
>
> I am trying to pull the tensorflow container from NVIDIA. It has the pull 
> command given. Unable to pull with error saying "Got permission denied when 
> trying to connect to the Docker daemon socket". 
>
> Thanks!
>

------=_Part_1386_262202609.1543257751692
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Thanks Everyone for the help and feedback. I have attached=
 the vagrant file for reference.<div><br></div><div>Vanessa - Will restart =
and enable the BIOS and test again.</div><div><br></div><div>John, thanks f=
or pointing out the obvious mistakes I was making. Will use Martin&#39;s re=
cipe file as reference and make changes as he has pointed out.=C2=A0</div><=
div><br></div><div>What I am trying to do is build a Singularity container =
with Tensorflow, cuda, Python 3.4 to run a deep learning application(does i=
mage segmentation on it. Eventual goal is to install the container on anoth=
er Windows Server and execute this application sitting inside the container=
.=C2=A0</div><div><br><div>Thanks!</div><div>Rutu</div><div><br></div><div>=
<br></div><div><br></div><div><br>On Friday, November 16, 2018 at 3:38:38 P=
M UTC-5, Rutu Pandya wrote:<blockquote class=3D"gmail_quote" style=3D"margi=
n: 0;margin-left: 0.8ex;border-left: 1px #ccc solid;padding-left: 1ex;"><di=
v dir=3D"ltr"><div>Hello,</div><div><br></div>I am trying to pull the tenso=
rflow container from NVIDIA. It has the pull command given. Unable to pull =
with error saying &quot;Got permission denied when trying to connect to the=
 Docker daemon socket&quot;.=C2=A0<div><br></div><div>Thanks!</div></div></=
blockquote></div></div></div>
------=_Part_1386_262202609.1543257751692--

------=_Part_1385_1106351852.1543257751691
Content-Type: application/octet-stream; name=Vagrantfile
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename=Vagrantfile
X-Attachment-Id: eb1f7b60-a818-4d75-aefb-37ed7683a2b2
Content-ID: <eb1f7b60-a818-4d75-aefb-37ed7683a2b2>

# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/xenial64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
config.vm.synced_folder "vmfiles", "/vagrant", type: "smb"
end

------=_Part_1385_1106351852.1543257751691--
