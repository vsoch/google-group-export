X-Received: by 2002:a62:4855:: with SMTP id v82mr7237876pfa.51.1551713696741;
        Mon, 04 Mar 2019 07:34:56 -0800 (PST)
X-BeenThere: singularity@lbl.gov
Received: by 2002:a63:5751:: with SMTP id h17ls6361244pgm.4.gmail; Mon, 04 Mar
 2019 07:34:55 -0800 (PST)
X-Received: by 2002:a62:398d:: with SMTP id u13mr20440419pfj.32.1551713695552;
        Mon, 04 Mar 2019 07:34:55 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1551713695; cv=none;
        d=google.com; s=arc-20160816;
        b=DnIqY2Sk3uUhurHjV1Loy9RiVxCQ7VLkRgNmYpfF7rDEpnCGVP5LsmS/ZluTgTAvRE
         r/006Ngmve9qXK4qHqB9GZZLaiNy9fE5gOzugNfONN8lj3OyJqr/GgbEjGG1Ef6oIPqv
         JjoNP8YyXoIuBDcWyuPpHCHmUaJ0iz2bI4uM0DK4Ozwow9LFNiBGj0xGvJTuehiyBjzX
         iVFmg97tOsTyvsxmUwjHmmeK8C3MY/ZjRF80OXKNHuQxQcntuq02dBW5M3l4YSOX7JCr
         KEKxCJrwQp0sHAhjC0plZrUCVFEv8im3Jd53O1GqWN5t28f3TKO5ZVwwwa2maZzZQl7o
         O/qg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=content-language:mime-version:user-agent:date:message-id:subject
         :from:to;
        bh=omNQDhEoyB6Uya1/lebYb7v0BJE7lHoMs4/GDdCKTl8=;
        b=B1Ll+mHxEl42o1R0SvwPs06f3ZBm7ZgOR4m5ehqlt7czVpWCGaBj6TMSByYFaJkSJ1
         gPrK3uoj5TJPECUaXCzNtuazeVvBu+omKPxIPUVpjTXHGvLkTQ0cCHb8mlpURc6+2Qqi
         V6IkRW5sVX/3+tjhb4QZ0HyjkqXXxzeFGyvYOEJ8xKcHqQj9Z4rFvbx8TpwgrGAaiNBR
         RBXPsmpjZRlFWXRQWGy3fIRGn7a7zth9OaOcbFMOt3fh2tWPneGeT6N1T2C3lJke9yqX
         qt74P3dSXwFxkhPLhBwLGUTqC8p93gqGuNDTK6fJGv9fSQu677RgWFWggSV8tRkXiBQ6
         gY2g==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of gras...@lal.in2p3.fr designates 134.158.66.141 as permitted sender) smtp.mailfrom=gras...@lal.in2p3.fr
Return-Path: <gras...@lal.in2p3.fr>
Received: from fe4.lbl.gov (fe4.lbl.gov. [131.243.228.53])
        by mx.google.com with ESMTP id q72si411456pfa.163.2019.03.04.07.34.54
        for <singu...@lbl.gov>;
        Mon, 04 Mar 2019 07:34:55 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of gras...@lal.in2p3.fr designates 134.158.66.141 as permitted sender) client-ip=134.158.66.141;
Authentication-Results: mx.google.com;
       spf=pass (google.com: best guess record for domain of gras...@lal.in2p3.fr designates 134.158.66.141 as permitted sender) smtp.mailfrom=gras...@lal.in2p3.fr
X-Ironport-SBRS: 3.5
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0F8BADORH1ch41CnoZlHgEGBwaBZYFmg?=
 =?us-ascii?q?RKBA4Qvk2SCHJIfhgeBKzwLAQETEAuBSYcdIjgSAQEDAQEBAgEDAgEBAhABAQE?=
 =?us-ascii?q?KCwkIKSMMgjoiGARNOzABAQEBAQEBAQEBAQEBAQEaAg2BDQRADTUtAl8NCAEBF?=
 =?us-ascii?q?4MHASYBgU4FCqh3fDMfhSWEXAWBL4soF4F/gTiCNoNTAoEpg0KCNSICigkKhlF?=
 =?us-ascii?q?MgReRPQmBHFyFS4N4hzMfiniIKpA/jEgCERMBgV6BeE0nEYMogiOBCQEJgkGKV?=
 =?us-ascii?q?D6OeyqCIwEB?=
X-IPAS-Result: =?us-ascii?q?A0F8BADORH1ch41CnoZlHgEGBwaBZYFmgRKBA4Qvk2SCHJI?=
 =?us-ascii?q?fhgeBKzwLAQETEAuBSYcdIjgSAQEDAQEBAgEDAgEBAhABAQEKCwkIKSMMgjoiG?=
 =?us-ascii?q?ARNOzABAQEBAQEBAQEBAQEBAQEaAg2BDQRADTUtAl8NCAEBF4MHASYBgU4FCqh?=
 =?us-ascii?q?3fDMfhSWEXAWBL4soF4F/gTiCNoNTAoEpg0KCNSICigkKhlFMgReRPQmBHFyFS?=
 =?us-ascii?q?4N4hzMfiniIKpA/jEgCERMBgV6BeE0nEYMogiOBCQEJgkGKVD6OeyqCIwEB?=
X-IronPort-AV: E=Sophos;i="5.58,440,1544515200"; 
   d="scan'208,217";a="53548480"
Received: from cczrelay01.in2p3.fr ([134.158.66.141])
  by fe4.lbl.gov with ESMTP; 04 Mar 2019 07:34:52 -0800
Received: from [134.158.76.29] (pc-grasland.lal.in2p3.fr [134.158.76.29])
	(authenticated bits=0)
	by cczrelay01.in2p3.fr (8.14.4/8.14.4) with ESMTP id x24FYkQO003939
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <singu...@lbl.gov>; Mon, 4 Mar 2019 16:34:47 +0100
X-Virus-Status: Clean
X-Virus-Scanned: clamav-milter 0.100.2 at cczrelay01
To: singularity <singu...@lbl.gov>
From: Hadrien Grasland <gras...@lal.in2p3.fr>
Subject: Thoughts from a Docker -> Singularity conversion attempt
Message-ID: <7bb2ddd5-0de0-5bbd-0fa2-d60c36966e57@lal.in2p3.fr>
Date: Mon, 4 Mar 2019 16:36:06 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.5.1
MIME-Version: 1.0
Content-Type: multipart/alternative;
 boundary="------------9D7BADF46AB4EE8239A3F9CD"
Content-Language: en-US

--------------9D7BADF46AB4EE8239A3F9CD
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit

Dear Singularity users,

I've been packaging HEP software and development environments using a 
combination of Spack and Docker for a while.

  * Spack gives me customizable and ergonomic software builds, with
    automated dependency management and peaceful coexistence between
    different build configurations.
  * Docker gives me cross-OS binary + environment portability, and a way
    to "freeze" a snapshot of my rolling Linux distribution of choice in
    order to momentarily prevent Spack from rebuilding everything over
    and over again the way it loves to.

This is what the end result currently looks like: 
https://github.com/HadrienG2/spack-based-docker .

A problem with using Docker for this purpose, though, is that it does 
too much container/host isolation for my use case. I don't really care 
for Docker masquerading as a VM by hiding the host filesystem and 
processes from the container, but I do care about the cumbersome side of 
remembering to bind mount everything, ending up with root-owned files in 
these bind mounts if I'm not very careful, and ptrace rights being taken 
away from me unless I take care to pass the magical "I don't care, I 
trust this container" flags to the docker run command line. From this 
perspective, I sometimes feel like I'm fighting Docker's cloud-oriented 
design a bit too much.

Which is what led me to investigate Singularity, an experience which I 
now feel ready to report on.

------------------------------------------------------------------------

Having some previous bad experience from the Docker -> Singularity image 
conversion machinery, I decided for this attempt to try to stick with a 
pure Singularity workflow, without Docker getting in the way at any 
time. This was easier than expected: bootstrapping a zypper-based image 
actually proved very smooth.

My feeling from translating my Docker recipes afterwards is that 
Singularity does deliver beautifully on the final image usability front 
(hurray for the simple CLI, ptrace privileges, proper file permissions, 
and /home mounting by default), but feels quite a bit more painful than 
Docker on the image builder's side. Here are some particular pain points 
that I encountered, maybe they have some well-known solutions / 
workarounds ?

  * I miss Docker's build arguments a lot.
      o A typical use case is building an image twice, once with debug
        software builds (for debugging) and once with release builds
        (for end usage and profiling)
      o Another use case is controlling from remote which version of
        some software gets built, and to synchronize that with the
        output image's file name.
      o A third use case is synchronizing the directory where image
        files are written across multiple Singularity definition file,
        and making it externally configurable.
  * I appreciate Singuarity's attempt to cautiously separate build
    environment from runtime environment, but find that it makes build
    environment management difficult:
      o I often have to write each environment-altering statement three
        times, once in %post, once in %test, and once in
        ${SINGULARITY_ENVIRONMENT}
      o Build environment not being carried over from one parent image
        to a child image often makes me give up and just write my whole
        build setup in ${SINGULARITY_ENVIRONMENT} so that I can source
        that at the beginning of the next image.
      o %environment is almost never usable for me because most of the
        time I need some environment to be set both for runtime and for
        child images.
  * The idea of separating a build in clear-cut %build, %post, %test
    phases is nice in theory, but limiting for complex recipes
      o The folder to which I want to copy files may be created during
        %post, in which case I need to move files to a temporary
        directory during %copy and re-move them later.
      o Some tests can only be run at some stages during the build
        process, because they rely on a build folder which must be
        cleaned up at the end of the recipe.
      o SINGULARITY_ENVIRONMENT not being sourced before %test is
        painful and uncalled for.
  * A replacement to Docker layers for build snapshots would be much
    appreciated.
      o I certainly don't miss the build performance/size vs recipe
        readability compromise of Docker saving a layer after every RUN
        statement...
      o ...but I do miss being able to quickly investigate a failed
        build and restart it without going through my whole %post
        section all over again.

In short, I would be longing for....

  * A way to use some externally configurable environment in a
    singularity definition file (including, and I guess that's the
    difficult part, in the "From:" statement)
  * An alternative to SINGULARITY_ENVIRONMENT for configuring build
    environment instead of runtime environment
  * A less hacky way to pass environment to childe images' build recipes
    (may or may not be merged with the above)
  * A way to check if tests are enabled in %post as a more flexible
    alternative to the %test section
      o ...and runtime environment being sourced before the %test
        section begins.
  * Faster / easier ways to debug failed Singularity builds than
    modifying the recipe and restarting it from the beginning.

...but some of that may be an XY problem coming from my Docker user 
habits :)

Cheers,
Hadrien


--------------9D7BADF46AB4EE8239A3F9CD
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: 7bit

<html>
  <head>

    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  </head>
  <body text="#000000" bgcolor="#FFFFFF">
    <p>Dear Singularity users,</p>
    <p>I've been packaging HEP software and development environments
      using a combination of Spack and Docker for a while.</p>
    <ul>
      <li>Spack gives me customizable and ergonomic software builds,
        with automated dependency management and peaceful coexistence
        between different build configurations.</li>
      <li>Docker gives me cross-OS binary + environment portability, and
        a way to "freeze" a snapshot of my rolling Linux distribution of
        choice in order to momentarily prevent Spack from rebuilding
        everything over and over again the way it loves to.</li>
    </ul>
    <p>This is what the end result currently looks like:
      <a class="moz-txt-link-freetext" href="https://github.com/HadrienG2/spack-based-docker">https://github.com/HadrienG2/spack-based-docker</a> .</p>
    <p>A problem with using Docker for this purpose, though, is that it
      does too much container/host isolation for my use case. I don't
      really care for Docker masquerading as a VM by hiding the host
      filesystem and processes from the container, but I do care about
      the cumbersome side of remembering to bind mount everything,
      ending up with root-owned files in these bind mounts if I'm not
      very careful, and ptrace rights being taken away from me unless I
      take care to pass the magical "I don't care, I trust this
      container" flags to the docker run command line. From this
      perspective, I sometimes feel like I'm fighting Docker's
      cloud-oriented design a bit too much.</p>
    <p>Which is what led me to investigate Singularity, an experience
      which I now feel ready to report on.</p>
    <hr width="100%" size="2">
    <p>Having some previous bad experience from the Docker -&gt;
      Singularity image conversion machinery, I decided for this attempt
      to try to stick with a pure Singularity workflow, without Docker
      getting in the way at any time. This was easier than expected:
      bootstrapping a zypper-based image actually proved very smooth.<br>
    </p>
    <p>My feeling from translating my Docker recipes afterwards is that
      Singularity does deliver beautifully on the final image usability
      front (hurray for the simple CLI, ptrace privileges, proper file
      permissions, and /home mounting by default), but feels quite a bit
      more painful than Docker on the image builder's side. Here are
      some particular pain points that I encountered, maybe they have
      some well-known solutions / workarounds ?</p>
    <ul>
      <li>I miss Docker's build arguments a lot.<br>
      </li>
      <ul>
        <li>A typical use case is building an image twice, once with
          debug software builds (for debugging) and once with release
          builds (for end usage and profiling)</li>
        <li>Another use case is controlling from remote which version of
          some software gets built, and to synchronize that with the
          output image's file name.</li>
        <li>A third use case is synchronizing the directory where image
          files are written across multiple Singularity definition file,
          and making it externally configurable.<br>
        </li>
      </ul>
      <li>I appreciate Singuarity's attempt to cautiously separate build
        environment from runtime environment, but find that it makes
        build environment management difficult:</li>
      <ul>
        <li>I often have to write each environment-altering statement
          three times, once in %post, once in %test, and once in
          ${SINGULARITY_ENVIRONMENT}</li>
        <li>Build environment not being carried over from one parent
          image to a child image often makes me give up and just write
          my whole build setup in ${SINGULARITY_ENVIRONMENT} so that I
          can source that at the beginning of the next image.</li>
        <li>%environment is almost never usable for me because most of
          the time I need some environment to be set both for runtime
          and for child images.<br>
        </li>
      </ul>
      <li>The idea of separating a build in clear-cut %build, %post,
        %test phases is nice in theory, but limiting for complex recipes</li>
      <ul>
        <li>The folder to which I want to copy files may be created
          during %post, in which case I need to move files to a
          temporary directory during %copy and re-move them later.</li>
        <li>Some tests can only be run at some stages during the build
          process, because they rely on a build folder which must be
          cleaned up at the end of the recipe.</li>
        <li>SINGULARITY_ENVIRONMENT not being sourced before %test is
          painful and uncalled for.<br>
        </li>
      </ul>
      <li>A replacement to Docker layers for build snapshots would be
        much appreciated.</li>
      <ul>
        <li>I certainly don't miss the build performance/size vs recipe
          readability compromise of Docker saving a layer after every
          RUN statement...</li>
        <li>...but I do miss being able to quickly investigate a failed
          build and restart it without going through my whole %post
          section all over again.</li>
      </ul>
    </ul>
    <p>In short, I would be longing for....</p>
    <ul>
      <li>A way to use some externally configurable environment in a
        singularity definition file (including, and I guess that's the
        difficult part, in the "From:" statement)</li>
      <li>An alternative to SINGULARITY_ENVIRONMENT for configuring
        build environment instead of runtime environment</li>
      <li>A less hacky way to pass environment to childe images' build
        recipes (may or may not be merged with the above)<br>
      </li>
      <li>A way to check if tests are enabled in %post as a more
        flexible alternative to the %test section</li>
      <ul>
        <li>...and runtime environment being sourced before the %test
          section begins.</li>
      </ul>
      <li>Faster / easier ways to debug failed Singularity builds than
        modifying the recipe and restarting it from the beginning.</li>
    </ul>
    <p>...but some of that may be an XY problem coming from my Docker
      user habits :)<br>
    </p>
    <p>Cheers,<br>
      Hadrien<br>
    </p>
  </body>
</html>

--------------9D7BADF46AB4EE8239A3F9CD--
