Date: Fri, 1 Mar 2019 10:55:23 -0800 (PST)
From: Mike Moore <wxdu...@gmail.com>
To: singularity <singu...@lbl.gov>
Message-Id: <cf2e25e7-f366-493f-a736-e67f89768570@lbl.gov>
In-Reply-To: <CAApQTTj0BV3GfLJbhH7uT4Deo28W9fnPP0tWB1DU42gVO5NwNA@mail.gmail.com>
References: <a94c4768-8cd7-43aa-8bb9-b21b3ccf950c@lbl.gov> <CAApQTTh9E=oNwfTLFmjmH6rAXDH2Q+X29D0Ur_Y3VMXvGvsDtg@mail.gmail.com>
 <710b4b5e-f209-41da-bfcb-c19043201fa4@lbl.gov>
 <CAApQTTj0BV3GfLJbhH7uT4Deo28W9fnPP0tWB1DU42gVO5NwNA@mail.gmail.com>
Subject: Re: [Singularity] Singularity image download syncronization during
 multiple job startup
MIME-Version: 1.0
Content-Type: multipart/mixed; 
	boundary="----=_Part_428_1252134479.1551466523729"

------=_Part_428_1252134479.1551466523729
Content-Type: multipart/alternative; 
	boundary="----=_Part_429_741997115.1551466523729"

------=_Part_429_741997115.1551466523729
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit

Hi Greg,

As I said to Vanessa, our sticking points are trying to get legacy 
workflows moved into containers in a non-intrusive way. But pre-pulling the 
image is going to be intrusive (requires workflow changes to the users) or 
will still run into the same issue (wrapper pulls to the local disk, but 
simultaneous task startups would run into each other).  Short of putting 
some logic into the wrapper to look for some sort of lock file for an 
active download, I don't see how to work around this issue other than 
having the containers available everywhere, either by regularly syncing 
images to all nodes or by using a shared file system (NFS, GPFS, Lustre, 
etc.).

Just for a reference point, UNIVA's solution for the integration of 
Singularity and Grid Engine was to have a directory to store the images and 
a load sensor that looks for the available images in that directory and 
report that back to the scheduler. Then the user would ask for the image 
they want as a resource request and Grid Engine would run the job on nodes 
that reported that image. Not super cloud-friendly...  



------=_Part_429_741997115.1551466523729
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Hi Greg,<br><br>As I said to Vanessa, our sticking points =
are trying to get legacy workflows moved into containers in a non-intrusive=
 way. But pre-pulling the image is going to be intrusive (requires workflow=
 changes to the users) or will still run into the same issue (wrapper pulls=
 to the local disk, but simultaneous task startups would run into each othe=
r).=C2=A0 Short of putting some logic into the wrapper to look for some sor=
t of lock file for an active download, I don&#39;t see how to work around t=
his issue other than having the containers available everywhere, either by =
regularly syncing images to all nodes or by using a shared file system (NFS=
, GPFS, Lustre, etc.).<br><br>Just for a reference point, UNIVA&#39;s solut=
ion for the integration of Singularity and Grid Engine was to have a direct=
ory to store the images and a load sensor that looks for the available imag=
es in that directory and report that back to the scheduler. Then the user w=
ould ask for the image they want as a resource request and Grid Engine woul=
d run the job on nodes that reported that image. Not super cloud-friendly..=
.=C2=A0 <br><br><br></div>
------=_Part_429_741997115.1551466523729--

------=_Part_428_1252134479.1551466523729--
