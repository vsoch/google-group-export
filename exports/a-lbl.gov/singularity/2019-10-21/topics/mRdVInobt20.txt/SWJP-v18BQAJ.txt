X-Received: by 10.99.112.21 with SMTP id l21mr294770pgc.86.1507310735422;
        Fri, 06 Oct 2017 10:25:35 -0700 (PDT)
X-BeenThere: singularity@lbl.gov
Received: by 10.98.93.142 with SMTP id n14ls4110164pfj.9.gmail; Fri, 06 Oct
 2017 10:25:34 -0700 (PDT)
X-Received: by 10.99.180.7 with SMTP id s7mr2531258pgf.171.1507310734360;
        Fri, 06 Oct 2017 10:25:34 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1507310734; cv=none;
        d=google.com; s=arc-20160816;
        b=egm5dUrGsbXLWzXbejs6YnYMiQ1ZFQZcT4TYWkyLjxX4Upj2eEadRDn228amWiAarK
         mHSqw3jx63GXSo2VayHsPAYBhQFLRzy7F47uKtqJZ75JRjC41KdIDjyLucMClF1hETSa
         Ff4NOqAhBTVzeaQnqORXxJWHOeUpKrsgm0DGsjhTVNdYdJt0qXp+WUVmBSTIIJGqv32i
         cMY1cFGTItLVfVRvY1E4wWOiyTAeFU3RNTStTPguW0nxZ3qGqVEe2YWdTToYAWlpO/Vv
         s+BNartQdG976KdcQNIQdiTKtRu4XDi6kbVCXQC9bhWyysbyKCAf1oTXvTJrwx0Grve5
         +oBQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=cc:to:subject:message-id:date:from:references:in-reply-to
         :mime-version:dkim-signature:arc-authentication-results;
        bh=xfkUFc/R0sl/x48k4ZXhwND+o3ZphOB2DNKN30qZjRA=;
        b=0xoh3iL0GUNPI60UKRoNKdEgwKhoZG16KlEbfYSALZZVYNzY8WTzehw77kOXi7brT6
         RZl07p49bpydmHN2vX7fCnmZrJEUHYMmD6sz2re5SfoNUhC4TFkRpBnTIzKTB4znpSdi
         QPk/murNOi8yxWkG1EekLj3YYi5T1lXqKq16aAzHyrho/D2D+vfY9xLZX6bJPqTYvD9b
         50/KWu4L49UCa9SC3aBaj8T6bKaFrzxRMHuz7GDDM4xOfvK+jC0fKgRJTALEwXPVbCDu
         zWxTIudGggmmPVWlrWCGihsxY3ae29wiEmxQFf3htlck0XJ1Ooj3Qr+AwWNPBZ1eX9a/
         TK4w==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass head...@gmail.com header.s=20161025 header.b=NWMC0JYL;
       spf=pass (google.com: domain of vso...@gmail.com designates 209.85.218.53 as permitted sender) smtp.mailfrom=vso...@gmail.com
Return-Path: <vso...@gmail.com>
Received: from fe4.lbl.gov (fe4.lbl.gov. [128.3.41.71])
        by mx.google.com with ESMTP id j21si1423474pga.373.2017.10.06.10.25.34
        for <singu...@lbl.gov>;
        Fri, 06 Oct 2017 10:25:34 -0700 (PDT)
Received-SPF: pass (google.com: domain of vso...@gmail.com designates 209.85.218.53 as permitted sender) client-ip=209.85.218.53;
Authentication-Results: mx.google.com;
       dkim=pass head...@gmail.com header.s=20161025 header.b=NWMC0JYL;
       spf=pass (google.com: domain of vso...@gmail.com designates 209.85.218.53 as permitted sender) smtp.mailfrom=vso...@gmail.com
X-Ironport-SBRS: 3.4
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A2EhBABWu9dZhjXaVdFYA4QyAT5uJweDa?=
 =?us-ascii?q?whjU5hRgXaJNYkvg0sOgUFAAyIBCoELgi+BD08ChBkHQBcBAQEBAQEBAQEBAQI?=
 =?us-ascii?q?QAQEBCAsLCCgvgjMFAgMaAQUEBEYpAwEBAQEBAQEBASIBAQEBAQEBAQEBAQEBA?=
 =?us-ascii?q?QEBGgINHgQ8AQICARoJHQENDh0BAwELBgMCCwMqBwMCAiIBDgMBBQELEQYIBwQ?=
 =?us-ascii?q?BFQQBAgSJdgEDDQgFC4ZCkRtAilgRgSOCBQUBHIMKBYNfChknDVeDDgEBAQEBA?=
 =?us-ascii?q?QQBAQEBAQEBAQEXAgYSgxuCAoVWgQ6EUQESAUAMGoJMgkEgBZFAgRCGCIhbh16?=
 =?us-ascii?q?NB4IUW4UUg36HCYw9hTUBg1IZH4EVIQGBBQ0nC3gVY4RHSYFyISA2CIcBSIFsA?=
 =?us-ascii?q?QEB?=
X-IronPort-AV: E=Sophos;i="5.42,484,1500966000"; 
   d="scan'208,217";a="91255419"
Received: from mail-oi0-f53.google.com ([209.85.218.53])
  by fe4.lbl.gov with ESMTP; 06 Oct 2017 10:25:31 -0700
Received: by mail-oi0-f53.google.com with SMTP id u130so30734451oib.11
        for <singu...@lbl.gov>; Fri, 06 Oct 2017 10:25:31 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc;
        bh=xfkUFc/R0sl/x48k4ZXhwND+o3ZphOB2DNKN30qZjRA=;
        b=NWMC0JYLC1G1mLuBPDBM/Q94SaluBqgOu3//JB+SqnNRZq1tacl2suTNTW1VNqKs/L
         1xESTqPWH/9Dw3w7rRLnYtafVuqLRlFWNOqF/HsBRV8d5iMlnfcK0snhyl/pPJK/poua
         FfnGB9rjQIpue5XTNQdOAET3j2WrrhoBBWlKUu0ONZojoVz+lB2BKxmtGyeua6b7RWZo
         vrvkVe/02NxyvWGMNgxCdiVX1QOWrhO+VozZA/ZvKNENsGLYiUneWjehFIpZEujYofdt
         wKskP2hI36dvzAzHQ5i1KuaD+zFqhh998vyIgMq8MrGUfc9qRTeY8LzUV0AOcp1wFcJF
         swOQ==
X-Gm-Message-State: AMCzsaXbB2IdoPjHT8lTvHo1yJDSbnQPoQC7z2LciMij+OLojY4jE3rq
	FB2Y+zb3RJxCbA3iMQiFREM9HeM9MuEIl93hr5E=
X-Received: by 10.202.77.19 with SMTP id a19mr254248oib.219.1507310730948;
 Fri, 06 Oct 2017 10:25:30 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.74.151.145 with HTTP; Fri, 6 Oct 2017 10:25:10 -0700 (PDT)
In-Reply-To: <aa96e91d-7dd8-83e7-f25b-1d75ecec94d7@googlemail.com>
References: <c7ac581e-de03-1e02-207c-55c3b5677eba@googlemail.com>
 <CAM=pu+Ja9J+mb1MsswRU3X-vy-BJT64TcwKu3=B2hjo4anEMQQ@mail.gmail.com> <aa96e91d-7dd8-83e7-f25b-1d75ecec94d7@googlemail.com>
From: vanessa s <vso...@gmail.com>
Date: Fri, 6 Oct 2017 10:25:10 -0700
Message-ID: <CAM=pu++w-5sgrAPH3vibN-VFTDgEyhbSssi1Z6-a8e92Xo4F4g@mail.gmail.com>
Subject: Re: [Singularity] Adding files in a build recipe
To: Oliver Freyermuth <o.fre...@googlemail.com>
Cc: singu...@lbl.gov
Content-Type: multipart/alternative; boundary="001a11c15ceeaf3478055ae420ab"

--001a11c15ceeaf3478055ae420ab
Content-Type: text/plain; charset="UTF-8"

>
> For docker (please correct me if I am wrong), the build context is
> enforced to be the place where the Dockerfile is placed, so again it does
> not matter where I call the actual "docker build" binary.
> If singularity really uses the working directory where the binary is
> started as build context, I consider this a portability and reproducibility
> issue,
>

Oh sorry I mispoke then - Singularity is an executable added to your path
that you can call from anywhere. It works just as Docker does with regards
to the build recipe, but is more flexible because it doesn't automatically
add everything in sight (eg, why we have .dockerignore)


> since a user always has to enter the directory where the singularity
> recipe is placed in to achieve reproducible behaviour on his / her machine.
>

Another clarification - this is *only* the case when you build. Before you
build the image and have different files, of course it's not a reproducible
container. Once you build the container, then you can be assured
reproducibility as everything is packaged inside.


> Otherwise, it could happen that he/she accidentally includes files or
> directories from a totally different place.
>
> If you have a simple practice (like Docker) of keeping recipes and
relevant build files in the same place, this seems logical to me.


> Let's visualize with a security-relevant, but not unrealistic example.
> Let's assume my recipe contains:
>
> %files
> .ssh/id_rsa /home/user/.ssh/id_rsa
> .ssh/id_rsa.pub /home/user/.ssh/id_rsa.pub
>
> Is that even a good idea? These kinds of things might be more appropriate
for a user to map to their own home (so the container doesn't store them,
and in fact if you are in home you would map the calling user's home
directory over it anyway) or to produce (again mapped to the user's host)
at runtime. I don't think it's generally good practice to store
credentials, certificates, etc. in the (static / not used) image.


> If the user checks out my repo and now executes, in his / her home:
> singularity bootstrap someimage.img ~/my_git_repo_checkout/
> recipes/SL6/Singularity
> the container will be built successfully, but the result would contain the
> ssh-keys of the building user(!) taken from the home directory instead of
> those which reside in
> ~/my_git_repo_checkout/recipes/SL6/.ssh/
>

yeah DON'T do that. That borders on malicious to have a user build a
container and knowingly copy their secrets (whatever they might be) into
it.


> No error would be thrown. If the user now pushes this build to a public
> registry, he / she has a huge problem and is not even aware of it
> (and likely not even aware of it if he / she read the recipe beforehand!).
>

This is also an issue of education about security. This is just the same as
saying I could add credentials to a Github repo and push it. But I think I
get what you are saying - the user would be doing this unknowingly. All I
can say is that they should look at the recipe file first, OR use a
pre-built container that can't take their files and distribute them.


> In my eyes, that's at least a portability / reproducibility issue, if not
> a security issue, since the executable working directory matters for the
> build result -
> while for docker this is not the case as far as I know, it uses a fixed
> base (the one of the Dockerfile).
>
> I still don't follow. Singularity is exactly the same as Docker in this
regard, the commands ADD/COPY correspond to our %files section, and the
paths are relative to the build folder.


> > Another idea is to have a wrapper around singularity that keeps a record
> of build bases (directories) associated with recipe or uri names, and then
> when you call to bootstrap /build with the uri, it changes directories
> appropriately, etc.
> I already have such a wrapper (which for example can build .tar.gz
> containers using the intermediate tmpfs-ramdisk - really fast!), so I can
> implement that easily ;-).
>
> great!



> > If you could better define what exactly isn't reasonable about relative
> paths from some base, I can offer suggestions.
> I actually think relative paths are fine - but I'm not happy with the base
> ;-).
> I would prefer the base to be similar to how it is handled in Docker (by
> default at least),
> and / or to be able to specify it from outside e.g. via a command line
> parameter, which would allow for example:
> singularity bootstrap --buildroot /my_cloned_repo/resource_set_1/
> SL6_with_resource_set_1.img /my_cloned_repo/recipes/SL6.def
> singularity bootstrap --buildroot /my_cloned_repo/resource_set_2/
> SL6_with_resource_set_2.img /my_cloned_repo/recipes/SL6.def
> This can be pretty useful if I have to build a series of containers which
> are all the same, but just have a different set of resources.
>
> So you are saying you want to completely close off directories *outside *of
the PWD / build directory? So I could add files relative, but not do
something like ../../parent/directories ? That seems reasonable to do, we
could add some kind of variable for a "build_dir" and spit out an error if
the user tries to copy / go outside of it.


> As it is now, everybody building a singularity container seems to have to
> change manually (or via wrapper) to the directory of the build recipe
> before bootstrapping to ensure things work out.
> This is something I dislike, and it's not even documented (I think) that
> the build context is the working directory.
>
> /shrug here, I guess I am naturally inclined to want to keep different
projects / containers in their own folders, to match with my github repos.


> > If you are looking for a local image manager to make it easy to push
> your own containers (and find them later) check out Singularity Registry
> https://singularityhub.github.io/sregistry/
> I actually looked at this project shortly before deciding for the
> shell-script-solution.
> What we are doing here is to build containers for our HPC cluster, and we
> directly deploy them to CVMFS, to have them readily available on all worker
> nodes, and take advantage of the
> superior caching mechanics of CVMFS (we put extracted images there, not
> image files).
> So there is no push / pull infrastructure required, and our users have
> access to our local CVMFS repository (to "read" containers).
> Of course, a registry has quite some more nice features, but for us the
> overhead (Webserver, database, worker etc.) was too large for the
> requirements at hand.
>
> It might be very useful if also users should be able to modify container
> recipes, but right now only we admins are taking care to prepare that ;-).
>
> This would be the rationale for Github. If you have a recipe in a Github
repo, a user can easily contribute via PR. Then you discuss, change, and it
goes through tests. When the merge is done, then you have it deploy with a
push to your registry. That way you have user contribution to (admin)
served images, and it happens automatically with the PR merge/push.

>
> So all in all, my suggestion would be to re-think the build context
> concept to follow the more safe and reproducible concept from Docker,
> and at least document what the build context is (as Docker does).
> As a bonus, the "--buildroot" parameter (or whatever name is preferred)
> would be a nice-to-have.
>

This is an idea that would be useful to explore. Could you please add an
issue to the board?

https://github.com/singularityware/singularity/issues


>
> For now, however, I think I will solve my issue at hand by just extending
> the wrapper to explicitly enter the directory in which the build recipe is
> contained,
> and (sym)link all common resources that should be used for all containers
> that should use them, so they will be found right next / in a directory
> below the build recipe.
>
> haha, awesome. Thanks to you too! :)

>
> Many thanks for the elaborate reply (and for making singularity the
> successful project it already is!) :-),
>         Oliver
>
> Am 06.10.2017 um 18:09 schrieb vanessa s:
> > Hey Oliver,
> >
> > I think you have a few options.
> >
> >> I have just now found the need to add files to containers, and it seems
> there are two options (%setup anf %files).
> >> However, what is unclear to me is how I can make the build-recipe
> reasonably portable, i.e. "how to specify the paths".
> >
> > %setup shouldn't be needed for much, as files are (as of recent
> versions) added to the container prior to post. If you need to make
> directories for the files that don't exist, you would want to add them in
> %setup:
> >
> >
> >     mkdir -p ${SINGULARITY_ROOTFS}/data
> >
> >     and then copy via files
> >
> >     %files
> >     script.sh /data/script.sh
> >
> >
> >> Right now, I have a git-tree organized as follows:
> >
> >> recipes/SL6/default.def
> >> recipes/Ubuntu1604/default.def
> >> resources/profile/setupATLAS.sh
> >> resources/profile/setupBelle.sh
> >
> > The good news (if you want a service) is that Singularity Hub (2.0) that
> will be released after Singularity 2.4 is going to support this structure.
> The standard is to find (recursively) any file called "Singularity" and
> build if it's been updated. The extension of the file is the tag. So for
> your above files, you would have a repo connected to Singularity Hub with
> this organization:
> >
> >
> >     recipes/SL6/Singularity.SL6
> >     recipes/Ubuntu1604/Singularity.Ubuntu16.04
> >
> >
> > For files, at least for Singularity Hub, the builder is always going to
> set the base as the repo base, so you would still add files like:
> >
> >     %files
> >     resources/profile/setupBelle.sh
> >     resources/profile/setupATLAS.sh
> >
> >
> > and in the above those would go to the root of the image, same name
> >
> >> Now I would like to:
> >> - Be able to call "singularity bootstrap" from anywhere, i.e. not
> caring about the actual working directory of the "singularity"
> bootstrapping process.
> >
> > I'm not sure I totally follow here - Singularity needs minimally a
> definition file (Singularity) and path to an image - the build context is
> important. Docker is the same - when you build it looks for the Dockerfile
> and local context. What would make sense is to have some standard
> organization of the build directory, and then have a common bootstrap file
> (adding files from the same folder, finding the definition) sort of
> automatically. Another idea is to have a wrapper around singularity that
> keeps a record of build bases (directories) associated with recipe or uri
> names, and then when you call to bootstrap /build with the uri, it changes
> directories appropriately, etc.
> >
> >> - Copy the resource-files into my containers.
> >> - Achieve that without hardcoding any absolute paths in the build
> recipe.
> >
> > You shouldn't need to - given that you have a "resources" folder in the
> root of the build directory, if you are running it from there you can use
> relative paths.
> >
> >> This burns down to the question: How do I specify the path correctly in
> the build-recipe?
> >> Is it expected to be:
> > *> - relative to the working directory of the "singularity bootstrap"
> process? That would be very much against portability.
> > *> - relative to the location of the build recipe? Then I could probably
> use "../../resources/profile/setupATLAS.sh /etc/profile.d/setupATLAS.sh"
> in my "%files" section.
> >
> > It's relative to where you are calling it. I don't think this breaks
> portability, if you think about the ways that people share containers and
> recipes. For containers, the work is done and the recipes are inside - this
> is what we care most about. For portability of the predecessor to the
> container (recipe, files) we use version control (eg Github) and we don't
> care about absolute paths. It's portable because someone else can download
> my repo, and build my container.
> >
> >>
> >> Maybe it's even possible to pass it in, i.e. use something like
> >> %files
> >> ${resourcedir:-../../resources}/profile/setupATLAS.sh
> >> inside the recipe, and use "${resourcedir}" from the bootstraping
> host's environment if it is set?
> >
> > I think it would be unlikely for most to have one researcher's special
> environment variable, but I could be wrong.
> >
> >
> >> This is not really clear to me from the documentation, but maybe I just
> missed it ;-).
> >
> > If you could better define what exactly isn't reasonable about relative
> paths from some base, I can offer suggestions. If you are looking for a
> local image manager to make it easy to push your own containers (and find
> them later) check out Singularity Registry https://
> singularityhub.github.io/sregistry/
> >
> >> All the best and many thanks for your help!
> >>         Oliver
> >>
> >> --
> >> You received this message because you are subscribed to the Google
> Groups "singularity" group.
> >> To unsubscribe from this group and stop receiving emails from it, send
> an email to singu...@lbl.gov <mailto:singularity%
> 2Bunsu...@lbl.gov>.
> >
> > --
> > Vanessa Villamia Sochat
> > Stanford University
> >
> > --
> > You received this message because you are subscribed to the Google
> Groups "singularity" group.
> > To unsubscribe from this group and stop receiving emails from it, send
> an email to singu...@lbl.gov <mailto:singularity+
> unsub...@lbl.gov>.
>
>


-- 
Vanessa Villamia Sochat
Stanford University '16
(603) 321-0676

--001a11c15ceeaf3478055ae420ab
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div class=3D"gmail_extra"><div class=3D"gmail_quote"><blo=
ckquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left=
:1px solid rgb(204,204,204);padding-left:1ex">For docker (please correct me=
 if I am wrong), the build context is enforced to be the place where the Do=
ckerfile is placed, so again it does not matter where I call the actual &qu=
ot;docker build&quot; binary.<br>
If singularity really uses the working directory where the binary is starte=
d as build context, I consider this a portability and reproducibility issue=
,<br>
</blockquote><div><br></div><div>Oh sorry I mispoke then - Singularity is a=
n executable added to your path that you can call from anywhere. It works j=
ust as Docker does with regards to the build recipe, but is more flexible b=
ecause it doesn&#39;t automatically add everything in sight (eg, why we hav=
e .dockerignore)</div><div>=C2=A0</div><blockquote class=3D"gmail_quote" st=
yle=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padd=
ing-left:1ex">since a user always has to enter the directory where the sing=
ularity recipe is placed in to achieve reproducible behaviour on his / her =
machine.<br></blockquote><div><br></div><div>Another clarification - this i=
s <i>only</i>=C2=A0the case when you build. Before you build the image and =
have different files, of course it&#39;s not a reproducible container. Once=
 you build the container, then you can be assured reproducibility as everyt=
hing is packaged inside.</div><div>=C2=A0</div><blockquote class=3D"gmail_q=
uote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,2=
04);padding-left:1ex">
Otherwise, it could happen that he/she accidentally includes files or direc=
tories from a totally different place.<br>
<br></blockquote><div>If you have a simple practice (like Docker) of keepin=
g recipes and relevant build files in the same place, this seems logical to=
 me.</div><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margi=
n:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex=
">
Let&#39;s visualize with a security-relevant, but not unrealistic example. =
Let&#39;s assume my recipe contains:<br>
<br>
%files<br>
.ssh/id_rsa /home/user/.ssh/id_rsa<br>
.ssh/id_rsa.pub /home/user/.ssh/id_rsa.pub<br>
<br></blockquote><div>Is that even a good idea? These kinds of things might=
 be more appropriate for a user to map to their own home (so the container =
doesn&#39;t store them, and in fact if you are in home you would map the ca=
lling user&#39;s home directory over it anyway) or to produce (again mapped=
 to the user&#39;s host) at runtime. I don&#39;t think it&#39;s generally g=
ood practice to store credentials, certificates, etc. in the (static / not =
used) image.</div><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=
=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding=
-left:1ex">
If the user checks out my repo and now executes, in his / her home:<br>
singularity bootstrap someimage.img ~/my_git_repo_checkout/<wbr>recipes/SL6=
/Singularity<br>
the container will be built successfully, but the result would contain the =
ssh-keys of the building user(!) taken from the home directory instead of t=
hose which reside in<br>
~/my_git_repo_checkout/<wbr>recipes/SL6/.ssh/<br></blockquote><div><br></di=
v><div>yeah DON&#39;T do that. That borders on malicious to have a user bui=
ld a container and knowingly copy their secrets (whatever they might be) in=
to it.=C2=A0</div><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=
=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding=
-left:1ex">
No error would be thrown. If the user now pushes this build to a public reg=
istry, he / she has a huge problem and is not even aware of it<br>
(and likely not even aware of it if he / she read the recipe beforehand!).<=
br></blockquote><div><br></div><div>This is also an issue of education abou=
t security. This is just the same as saying I could add credentials to a Gi=
thub repo and push it. But I think I get what you are saying - the user wou=
ld be doing this unknowingly. All I can say is that they should look at the=
 recipe file first, OR use a pre-built container that can&#39;t take their =
files and distribute them.=C2=A0</div><div>=C2=A0</div><blockquote class=3D=
"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(2=
04,204,204);padding-left:1ex">
In my eyes, that&#39;s at least a portability / reproducibility issue, if n=
ot a security issue, since the executable working directory matters for the=
 build result -<br>
while for docker this is not the case as far as I know, it uses a fixed bas=
e (the one of the Dockerfile).<br>
<span class=3D"gmail-"><br></span></blockquote><div>I still don&#39;t follo=
w. Singularity is exactly the same as Docker in this regard, the commands A=
DD/COPY correspond to our %files section, and the paths are relative to the=
 build folder.</div><div>=C2=A0</div><blockquote class=3D"gmail_quote" styl=
e=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);paddin=
g-left:1ex"><span class=3D"gmail-">
&gt; Another idea is to have a wrapper around singularity that keeps a reco=
rd of build bases (directories) associated with recipe or uri names, and th=
en when you call to bootstrap /build with the uri, it changes directories a=
ppropriately, etc.<br>
</span>I already have such a wrapper (which for example can build .tar.gz c=
ontainers using the intermediate tmpfs-ramdisk - really fast!), so I can im=
plement that easily ;-).<br>
<span class=3D"gmail-"><br></span></blockquote><div>great!</div><div><br></=
div><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0px =
0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"><spa=
n class=3D"gmail-">
&gt; If you could better define what exactly isn&#39;t reasonable about rel=
ative paths from some base, I can offer suggestions.<br>
</span>I actually think relative paths are fine - but I&#39;m not happy wit=
h the base ;-).<br>
I would prefer the base to be similar to how it is handled in Docker (by de=
fault at least),<br>
and / or to be able to specify it from outside e.g. via a command line para=
meter, which would allow for example:<br>
singularity bootstrap --buildroot /my_cloned_repo/resource_set_<wbr>1/ SL6_=
with_resource_set_1.img /my_cloned_repo/recipes/SL6.<wbr>def<br>
singularity bootstrap --buildroot /my_cloned_repo/resource_set_<wbr>2/ SL6_=
with_resource_set_2.img /my_cloned_repo/recipes/SL6.<wbr>def<br>
This can be pretty useful if I have to build a series of containers which a=
re all the same, but just have a different set of resources.<br>
<br></blockquote><div>So you are saying you want to completely close off di=
rectories <i>outside </i>of the PWD / build directory? So I could add files=
 relative, but not do something like ../../parent/directories ? That seems =
reasonable to do, we could add some kind of variable for a &quot;build_dir&=
quot; and spit out an error if the user tries to copy / go outside of it.</=
div><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0px =
0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">
As it is now, everybody building a singularity container seems to have to c=
hange manually (or via wrapper) to the directory of the build recipe before=
 bootstrapping to ensure things work out.<br>
This is something I dislike, and it&#39;s not even documented (I think) tha=
t the build context is the working directory.<br>
<span class=3D"gmail-"><br></span></blockquote><div>/shrug here, I guess I =
am naturally inclined to want to keep different projects / containers in th=
eir own folders, to match with my github repos.</div><div>=C2=A0</div><bloc=
kquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:=
1px solid rgb(204,204,204);padding-left:1ex"><span class=3D"gmail-">
&gt; If you are looking for a local image manager to make it easy to push y=
our own containers (and find them later) check out Singularity Registry <a =
href=3D"https://singularityhub.github.io/sregistry/" rel=3D"noreferrer" tar=
get=3D"_blank">https://singularityhub.github.<wbr>io/sregistry/</a><br>
</span>I actually looked at this project shortly before deciding for the sh=
ell-script-solution.<br>
What we are doing here is to build containers for our HPC cluster, and we d=
irectly deploy them to CVMFS, to have them readily available on all worker =
nodes, and take advantage of the<br>
superior caching mechanics of CVMFS (we put extracted images there, not ima=
ge files).<br>
So there is no push / pull infrastructure required, and our users have acce=
ss to our local CVMFS repository (to &quot;read&quot; containers).<br>
Of course, a registry has quite some more nice features, but for us the ove=
rhead (Webserver, database, worker etc.) was too large for the requirements=
 at hand.<br>
<br>
It might be very useful if also users should be able to modify container re=
cipes, but right now only we admins are taking care to prepare that ;-).<br=
>
<br></blockquote><div>This would be the rationale for Github. If you have a=
 recipe in a Github repo, a user can easily contribute via PR. Then you dis=
cuss, change, and it goes through tests. When the merge is done, then you h=
ave it deploy with a push to your registry. That way you have user contribu=
tion to (admin) served images, and it happens automatically with the PR mer=
ge/push.=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0px 0=
px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">
<br>
So all in all, my suggestion would be to re-think the build context concept=
 to follow the more safe and reproducible concept from Docker,<br>
and at least document what the build context is (as Docker does).<br>
As a bonus, the &quot;--buildroot&quot; parameter (or whatever name is pref=
erred) would be a nice-to-have.<br></blockquote><div><br></div><div>This is=
 an idea that would be useful to explore. Could you please add an issue to =
the board?</div><div><br></div><div><a href=3D"https://github.com/singulari=
tyware/singularity/issues">https://github.com/singularityware/singularity/i=
ssues</a></div><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"=
margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-lef=
t:1ex">
<br>
For now, however, I think I will solve my issue at hand by just extending t=
he wrapper to explicitly enter the directory in which the build recipe is c=
ontained,<br>
and (sym)link all common resources that should be used for all containers t=
hat should use them, so they will be found right next / in a directory belo=
w the build recipe.<br>
<br></blockquote><div>haha, awesome. Thanks to you too! :)=C2=A0</div><bloc=
kquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:=
1px solid rgb(204,204,204);padding-left:1ex">
<br>
Many thanks for the elaborate reply (and for making singularity the success=
ful project it already is!) :-),<br>
=C2=A0 =C2=A0 =C2=A0 =C2=A0 Oliver<br>
<div><div class=3D"gmail-h5"><br>
Am 06.10.2017 um 18:09 schrieb vanessa s:<br>
&gt; Hey Oliver,<br>
&gt;<br>
&gt; I think you have a few options.<br>
&gt;<br>
&gt;&gt; I have just now found the need to add files to containers, and it =
seems there are two options (%setup anf %files).<br>
&gt;&gt; However, what is unclear to me is how I can make the build-recipe =
reasonably portable, i.e. &quot;how to specify the paths&quot;.<br>
&gt;<br>
&gt; %setup shouldn&#39;t be needed for much, as files are (as of recent ve=
rsions) added to the container prior to post. If you need to make directori=
es for the files that don&#39;t exist, you would want to add them in %setup=
:<br>
&gt;<br>
&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0mkdir -p ${SINGULARITY_ROOTFS}/data<br>
&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0and then copy via files<br>
&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0%files<br>
&gt;=C2=A0 =C2=A0 =C2=A0script.sh /data/script.sh<br>
&gt;<br>
&gt;<br>
&gt;&gt; Right now, I have a git-tree organized as follows:<br>
&gt;<br>
&gt;&gt; recipes/SL6/default.def<br>
&gt;&gt; recipes/Ubuntu1604/default.def<br>
&gt;&gt; resources/profile/setupATLAS.<wbr>sh<br>
&gt;&gt; resources/profile/setupBelle.<wbr>sh<br>
&gt;<br>
&gt; The good news (if you want a service) is that Singularity Hub (2.0) th=
at will be released after Singularity 2.4 is going to support this structur=
e. The standard is to find (recursively) any file called &quot;Singularity&=
quot; and build if it&#39;s been updated. The extension of the file is the =
tag. So for your above files, you would have a repo connected to Singularit=
y Hub with this organization:<br>
&gt;<br>
&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0recipes/SL6/Singularity.SL6<br>
&gt;=C2=A0 =C2=A0 =C2=A0recipes/Ubuntu1604/<wbr>Singularity.Ubuntu16.04<br>
&gt;<br>
&gt;<br>
&gt; For files, at least for Singularity Hub, the builder is always going t=
o set the base as the repo base, so you would still add files like:<br>
&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0%files<br>
&gt;=C2=A0 =C2=A0 =C2=A0resources/profile/setupBelle.<wbr>sh<br>
&gt;=C2=A0 =C2=A0 =C2=A0resources/profile/setupATLAS.<wbr>sh<br>
&gt;<br>
&gt;<br>
&gt; and in the above those would go to the root of the image, same name<br=
>
&gt;<br>
&gt;&gt; Now I would like to:<br>
&gt;&gt; - Be able to call &quot;singularity bootstrap&quot; from anywhere,=
 i.e. not caring about the actual working directory of the &quot;singularit=
y&quot; bootstrapping process.<br>
&gt;<br>
&gt; I&#39;m not sure I totally follow here - Singularity needs minimally a=
 definition file (Singularity) and path to an image - the build context is =
important. Docker is the same - when you build it looks for the Dockerfile =
and local context. What would make sense is to have some standard organizat=
ion of the build directory, and then have a common bootstrap file (adding f=
iles from the same folder, finding the definition) sort of automatically. A=
nother idea is to have a wrapper around singularity that keeps a record of =
build bases (directories) associated with recipe or uri names, and then whe=
n you call to bootstrap /build with the uri, it changes directories appropr=
iately, etc.<br>
&gt;<br>
&gt;&gt; - Copy the resource-files into my containers.<br>
&gt;&gt; - Achieve that without hardcoding any absolute paths in the build =
recipe.<br>
&gt;<br>
&gt; You shouldn&#39;t need to - given that you have a &quot;resources&quot=
; folder in the root of the build directory, if you are running it from the=
re you can use relative paths.<br>
&gt;<br>
&gt;&gt; This burns down to the question: How do I specify the path correct=
ly in the build-recipe?<br>
&gt;&gt; Is it expected to be:<br>
</div></div>&gt; *&gt; - relative to the working directory of the &quot;sin=
gularity bootstrap&quot; process? That would be very much against portabili=
ty.<br>
&gt; *&gt; - relative to the location of the build recipe? Then I could pro=
bably use &quot;../../resources/profile/<wbr>setupATLAS.sh /etc/profile.d/s=
etupATLAS.sh&quot; in my &quot;%files&quot; section.<br>
<span class=3D"gmail-">&gt;<br>
&gt; It&#39;s relative to where you are calling it. I don&#39;t think this =
breaks portability, if you think about the ways that people share container=
s and recipes. For containers, the work is done and the recipes are inside =
- this is what we care most about. For portability of the predecessor to th=
e container (recipe, files) we use version control (eg Github) and we don&#=
39;t care about absolute paths. It&#39;s portable because someone else can =
download my repo, and build my container.<br>
&gt;<br>
&gt;&gt;<br>
&gt;&gt; Maybe it&#39;s even possible to pass it in, i.e. use something lik=
e<br>
&gt;&gt; %files<br>
&gt;&gt; ${resourcedir:-../../<wbr>resources}/profile/setupATLAS.<wbr>sh<br=
>
&gt;&gt; inside the recipe, and use &quot;${resourcedir}&quot; from the boo=
tstraping host&#39;s environment if it is set?<br>
&gt;<br>
&gt; I think it would be unlikely for most to have one researcher&#39;s spe=
cial environment variable, but I could be wrong.<br>
&gt;<br>
&gt;<br>
&gt;&gt; This is not really clear to me from the documentation, but maybe I=
 just missed it ;-).<br>
&gt;<br>
&gt; If you could better define what exactly isn&#39;t reasonable about rel=
ative paths from some base, I can offer suggestions. If you are looking for=
 a local image manager to make it easy to push your own containers (and fin=
d them later) check out Singularity Registry=C2=A0<a href=3D"https://singul=
arityhub.github.io/sregistry/" rel=3D"noreferrer" target=3D"_blank">https:/=
/<wbr>singularityhub.github.io/<wbr>sregistry/</a><br>
&gt;<br>
&gt;&gt; All the best and many thanks for your help!<br>
&gt;&gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 Oliver<br>
&gt;&gt;<br>
&gt;&gt; --<br>
&gt;&gt; You received this message because you are subscribed to the Google=
 Groups &quot;singularity&quot; group.<br>
</span>&gt;&gt; To unsubscribe from this group and stop receiving emails fr=
om it, send an email to <a href=3D"mailto:singularity%...@lbl.gov">singular=
ity+unsubscribe@lbl.<wbr>gov</a> &lt;mailto:<a href=3D"mailto:singularity%2=
...@lbl.gov">singularity%<wbr>2Bunsu...@lbl.gov</a>&gt;.<br>
<span class=3D"gmail-">&gt;<br>
&gt; --<br>
&gt; Vanessa Villamia Sochat<br>
&gt; Stanford University<br>
&gt;<br>
&gt; --<br>
&gt; You received this message because you are subscribed to the Google Gro=
ups &quot;singularity&quot; group.<br>
</span>&gt; To unsubscribe from this group and stop receiving emails from i=
t, send an email to <a href=3D"mailto:singularity%...@lbl.gov">singularity+=
unsubscribe@lbl.<wbr>gov</a> &lt;mailto:<a href=3D"mailto:singularity%...@l=
bl.gov">singularity+<wbr>unsub...@lbl.gov</a>&gt;.<br>
<br>
</blockquote></div><br><br clear=3D"all"><div><br></div>-- <br><div class=
=3D"gmail_signature" data-smartmail=3D"gmail_signature">Vanessa Villamia So=
chat<br>Stanford University &#39;16<br><div><div><div>(603) 321-0676</div><=
/div></div></div>
</div></div>

--001a11c15ceeaf3478055ae420ab--
