X-Received: by 10.99.1.81 with SMTP id 78mr266180pgb.168.1507309574766;
        Fri, 06 Oct 2017 10:06:14 -0700 (PDT)
X-BeenThere: singularity@lbl.gov
Received: by 10.84.236.65 with SMTP id h1ls7561529pln.13.gmail; Fri, 06 Oct
 2017 10:06:13 -0700 (PDT)
X-Received: by 10.99.163.97 with SMTP id v33mr2536817pgn.206.1507309573646;
        Fri, 06 Oct 2017 10:06:13 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1507309573; cv=none;
        d=google.com; s=arc-20160816;
        b=nDikxSkiZSU9yopNI+5mjH+NKOD5+RtN5VKUWEgukBeeybeV42m0xjpjflU/4w/Rni
         ZjJzewUFGx8IecADApidXXxWn4fUTgQMUBTz85MtqoTq9Ak4eCKffGd2jj6aFdmKqDT/
         UrIS8L1Me09EAqKZy9Wx7ofQWKOtq0vsqY1PG1N2c9lQHN/msSW9Q39Ijxpss5zFsHub
         jZ7KEX04WrTszpTBVOR2Tzx1mx1oFBDYK/YvpMeBdjTFHJ0HsvhYzd1AAxHTcGT5jeXi
         Y37NenRlXF2+vPeaW9a8ppJzP9+xHlsxMUV+FpRqK01kl91dPo5vjaGTdI5hfKrfjCs4
         hAUQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=content-transfer-encoding:content-language:in-reply-to:mime-version
         :user-agent:date:message-id:from:references:to:subject
         :dkim-signature:arc-authentication-results;
        bh=t254Gp9rQ3mDmzzCtPpTwQKXeQNB3sNZg49d0QwsYBo=;
        b=JCrS8VMIkM5sEbo7Vut2x2KmpaKuTfg7cxBh4IILU23BprmV30UwMu0Dt+z9H0oCnT
         fktYjNMcuCmil9/rlVbjkLamF4YV6hnVqrHQrhsvVx5kkmlC9SHlUn674RBjtAA2M3+/
         cJlmiUbL5cy4IOpkA8V8NirypmVe2vdw3xQ0JCzavc+Od0YeoItSXpgXgyqUizJ/xG58
         i6+6lzqGH9zFYEEEHyHOGTE/MuV3bnmReQn++EHV/0e68UWFJTiojOScBXdNSeIRz6AB
         Pus+RVxSmhtcM/kBiAVi/k69wixZ3cJJTdjk3VD9nyGNe8KCjeK06qoDrsHCfoPMWuHa
         f6Cw==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass head...@googlemail.com header.s=20161025 header.b=WscwQHtS;
       spf=pass (google.com: domain of o.fre...@googlemail.com designates 209.85.128.181 as permitted sender) smtp.mailfrom=o.fre...@googlemail.com
Return-Path: <o.fre...@googlemail.com>
Received: from fe3.lbl.gov (fe3.lbl.gov. [128.3.41.68])
        by mx.google.com with ESMTP id v6si1451676pgt.38.2017.10.06.10.06.13
        for <singu...@lbl.gov>;
        Fri, 06 Oct 2017 10:06:13 -0700 (PDT)
Received-SPF: pass (google.com: domain of o.fre...@googlemail.com designates 209.85.128.181 as permitted sender) client-ip=209.85.128.181;
Authentication-Results: mx.google.com;
       dkim=pass head...@googlemail.com header.s=20161025 header.b=WscwQHtS;
       spf=pass (google.com: domain of o.fre...@googlemail.com designates 209.85.128.181 as permitted sender) smtp.mailfrom=o.fre...@googlemail.com
X-Ironport-SBRS: 2.7
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A2EZBAACt9dZf7WAVdFbHRgHhDWBFYNyC?=
 =?us-ascii?q?JoHgXaWPYIEChgLgQtTgzoChCBDFAEBAQEBAQEBAQEBAhABAQkLCwgmMYIzIhB?=
 =?us-ascii?q?GLAEBAQEBAQEBASIBAQEBAQEBAQEBAQEBAQEBAQEBARYCDR4EPAECAgEjDwENA?=
 =?us-ascii?q?Q0sAwELBgMCGgIREgMCAjEDAQUBCxEGAQcFAgQBAQEBFgECBIl2AQMNCAULhj6?=
 =?us-ascii?q?RG0CKWBGBI4IngwoFg18KQA2DZQEBAQcBAQEBHAIGCQEIfIIfggKBUYIVgXCBD?=
 =?us-ascii?q?oQ/EgESAV6CVIJBIAWRQI9zh16PG1uFFINJDAUkhwmRcgGDOQIEAgQFAgYUJIE?=
 =?us-ascii?q?VNnENJwszRXiHBXQIhwGCNAEBAQ?=
X-IronPort-AV: E=Sophos;i="5.42,484,1500966000"; 
   d="scan'208";a="91912882"
Received: from mail-wr0-f181.google.com ([209.85.128.181])
  by fe3.lbl.gov with ESMTP; 06 Oct 2017 10:06:11 -0700
Received: by mail-wr0-f181.google.com with SMTP id o44so11668455wrf.11
        for <singu...@lbl.gov>; Fri, 06 Oct 2017 10:06:11 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlemail.com; s=20161025;
        h=subject:to:references:from:message-id:date:user-agent:mime-version
         :in-reply-to:content-language:content-transfer-encoding;
        bh=t254Gp9rQ3mDmzzCtPpTwQKXeQNB3sNZg49d0QwsYBo=;
        b=WscwQHtSTkO0gmRmIiTNr7141K8QLJhl5v+TVf6n8Vx4KSL3MpmiHN/HhATq9Jgcrg
         lbd2/ozs0cyKb01hAvCkiv8BRa64yuNrQ6GKeEbJ7wNv1sTSKxVEZHyoSCl4Nn7LdTvv
         LUygf8oVXqgwiaS3wazL2oKUx6LksfFvYP+YmPu0RrMEngDL87AKq4k7YIlhJ3vIRKfR
         utR8y4hKWWHtqlGsEe+FazvoSPs9teqrQxY7475sscCaZo7+EMOH5nEq6WXFtzoUzEst
         70dkipoG9EdsK6iKi6qW5oNDEgxciCceKp+ODgBjtl9GjmZl5iRP9pMA/dMo1YRzwnvM
         zUVg==
X-Gm-Message-State: AMCzsaV851qq58ffrKgGCPMsei4ZG3RyPMGOt5eG9FPtKOSdK0Hb0Xz/
	wnyEgs7ldEUzXBxc9mX88Ds=
X-Received: by 10.223.182.80 with SMTP id i16mr668904wre.110.1507309570484;
        Fri, 06 Oct 2017 10:06:10 -0700 (PDT)
Return-Path: <o.fre...@googlemail.com>
Received: from [131.220.163.37] (ltfreyermuth.physik.uni-bonn.de. [131.220.163.37])
        by smtp.googlemail.com with ESMTPSA id d18sm900258wra.89.2017.10.06.10.06.09
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Fri, 06 Oct 2017 10:06:09 -0700 (PDT)
Subject: Re: [Singularity] Adding files in a build recipe
To: singu...@lbl.gov, vanessa s <vso...@gmail.com>
References: <c7ac581e-de03-1e02-207c-55c3b5677eba@googlemail.com>
 <CAM=pu+Ja9J+mb1MsswRU3X-vy-BJT64TcwKu3=B2hjo4anEMQQ@mail.gmail.com>
From: Oliver Freyermuth <o.fre...@googlemail.com>
Message-ID: <aa96e91d-7dd8-83e7-f25b-1d75ecec94d7@googlemail.com>
Date: Fri, 6 Oct 2017 19:06:08 +0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101
 Thunderbird/52.3.0
MIME-Version: 1.0
In-Reply-To: <CAM=pu+Ja9J+mb1MsswRU3X-vy-BJT64TcwKu3=B2hjo4anEMQQ@mail.gmail.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-GB
Content-Transfer-Encoding: 8bit

Hey Vanessa, 

first of - many thanks for your quick, detailed and elaborate reply! 
Singularity is the first software project I encounter with such a quick response time ;-). 

> %setup shouldn't be needed for much, as files are (as of recent versions) added to the container prior to post. If you need to make directories for the files that don't exist, you would want to add them in %setup:
Thanks for the explanation and example! 

> The good news (if you want a service) is that Singularity Hub (2.0) that will be released after Singularity 2.4 is going to support this structure. The standard is to find (recursively) any file called "Singularity" and build if it's been updated.
This indeed is good news. However, for now, we will start off with an internal git repository and some build scaffolding in form of shell scripts.
There are several reasons at the moment (e.g. pre-2.0 shub still requests non-acceptable permissions for the github account), but that for sure is an option for the future! 

>> Now I would like to:
>> - Be able to call "singularity bootstrap" from anywhere, i.e. not caring about the actual working directory of the "singularity" bootstrapping process.
> 
> I'm not sure I totally follow here - Singularity needs minimally a definition file (Singularity) and path to an image - 
> the build context is important. Docker is the same - when you build it looks for the Dockerfile and local context. 
> What would make sense is to have some standard organization of the build directory, and then have a common bootstrap file (adding files from the same folder, finding the definition) sort of automatically. 
> Another idea is to have a wrapper around singularity that keeps a record of build bases (directories) associated with recipe or uri names, and then when you call to bootstrap /build with the uri, it changes directories appropriately, etc.
Up to now, the context is not (yet) important for me, since I can do e.g.:
export TMPDIR=$(mktemp -d)
mount -t tmpfs -o size=80% none ${TMPDIR}
export SINGULARTIY_REPO_CHECKOUT=/singularity/singularity_build
singularity bootstrap ${TMPDIR} ${SINGULARTIY_REPO_CHECKOUT}/recipes/SL6/default.def
And there is no need at all to take care of what the current working directory is. The issue arises as soon as I want to include files from the host. 

For docker (please correct me if I am wrong), the build context is enforced to be the place where the Dockerfile is placed, so again it does not matter where I call the actual "docker build" binary. 
If singularity really uses the working directory where the binary is started as build context, I consider this a portability and reproducibility issue, 
since a user always has to enter the directory where the singularity recipe is placed in to achieve reproducible behaviour on his / her machine. 
Otherwise, it could happen that he/she accidentally includes files or directories from a totally different place. 

Let's visualize with a security-relevant, but not unrealistic example. Let's assume my recipe contains:

%files
.ssh/id_rsa /home/user/.ssh/id_rsa
.ssh/id_rsa.pub /home/user/.ssh/id_rsa.pub

If the user checks out my repo and now executes, in his / her home:
singularity bootstrap someimage.img ~/my_git_repo_checkout/recipes/SL6/Singularity
the container will be built successfully, but the result would contain the ssh-keys of the building user(!) taken from the home directory instead of those which reside in
~/my_git_repo_checkout/recipes/SL6/.ssh/
No error would be thrown. If the user now pushes this build to a public registry, he / she has a huge problem and is not even aware of it
(and likely not even aware of it if he / she read the recipe beforehand!). 

In my eyes, that's at least a portability / reproducibility issue, if not a security issue, since the executable working directory matters for the build result -
while for docker this is not the case as far as I know, it uses a fixed base (the one of the Dockerfile). 

> Another idea is to have a wrapper around singularity that keeps a record of build bases (directories) associated with recipe or uri names, and then when you call to bootstrap /build with the uri, it changes directories appropriately, etc.
I already have such a wrapper (which for example can build .tar.gz containers using the intermediate tmpfs-ramdisk - really fast!), so I can implement that easily ;-). 

> If you could better define what exactly isn't reasonable about relative paths from some base, I can offer suggestions. 
I actually think relative paths are fine - but I'm not happy with the base ;-). 
I would prefer the base to be similar to how it is handled in Docker (by default at least),
and / or to be able to specify it from outside e.g. via a command line parameter, which would allow for example:
singularity bootstrap --buildroot /my_cloned_repo/resource_set_1/ SL6_with_resource_set_1.img /my_cloned_repo/recipes/SL6.def
singularity bootstrap --buildroot /my_cloned_repo/resource_set_2/ SL6_with_resource_set_2.img /my_cloned_repo/recipes/SL6.def
This can be pretty useful if I have to build a series of containers which are all the same, but just have a different set of resources. 

As it is now, everybody building a singularity container seems to have to change manually (or via wrapper) to the directory of the build recipe before bootstrapping to ensure things work out. 
This is something I dislike, and it's not even documented (I think) that the build context is the working directory. 

> If you are looking for a local image manager to make it easy to push your own containers (and find them later) check out Singularity Registry https://singularityhub.github.io/sregistry/
I actually looked at this project shortly before deciding for the shell-script-solution. 
What we are doing here is to build containers for our HPC cluster, and we directly deploy them to CVMFS, to have them readily available on all worker nodes, and take advantage of the
superior caching mechanics of CVMFS (we put extracted images there, not image files). 
So there is no push / pull infrastructure required, and our users have access to our local CVMFS repository (to "read" containers). 
Of course, a registry has quite some more nice features, but for us the overhead (Webserver, database, worker etc.) was too large for the requirements at hand. 

It might be very useful if also users should be able to modify container recipes, but right now only we admins are taking care to prepare that ;-). 


So all in all, my suggestion would be to re-think the build context concept to follow the more safe and reproducible concept from Docker,
and at least document what the build context is (as Docker does). 
As a bonus, the "--buildroot" parameter (or whatever name is preferred) would be a nice-to-have. 

For now, however, I think I will solve my issue at hand by just extending the wrapper to explicitly enter the directory in which the build recipe is contained,
and (sym)link all common resources that should be used for all containers that should use them, so they will be found right next / in a directory below the build recipe. 


Many thanks for the elaborate reply (and for making singularity the successful project it already is!) :-), 
	Oliver

Am 06.10.2017 um 18:09 schrieb vanessa s:
> Hey Oliver,
> 
> I think you have a few options.
> 
>> I have just now found the need to add files to containers, and it seems there are two options (%setup anf %files).
>> However, what is unclear to me is how I can make the build-recipe reasonably portable, i.e. "how to specify the paths".
> 
> %setup shouldn't be needed for much, as files are (as of recent versions) added to the container prior to post. If you need to make directories for the files that don't exist, you would want to add them in %setup:
> 
> 
>     mkdir -p ${SINGULARITY_ROOTFS}/data
> 
>     and then copy via files
> 
>     %files
>     script.sh /data/script.sh
> 
> 
>> Right now, I have a git-tree organized as follows:
> 
>> recipes/SL6/default.def
>> recipes/Ubuntu1604/default.def
>> resources/profile/setupATLAS.sh
>> resources/profile/setupBelle.sh
> 
> The good news (if you want a service) is that Singularity Hub (2.0) that will be released after Singularity 2.4 is going to support this structure. The standard is to find (recursively) any file called "Singularity" and build if it's been updated. The extension of the file is the tag. So for your above files, you would have a repo connected to Singularity Hub with this organization:
> 
> 
>     recipes/SL6/Singularity.SL6
>     recipes/Ubuntu1604/Singularity.Ubuntu16.04
> 
> 
> For files, at least for Singularity Hub, the builder is always going to set the base as the repo base, so you would still add files like:
> 
>     %files
>     resources/profile/setupBelle.sh
>     resources/profile/setupATLAS.sh
> 
> 
> and in the above those would go to the root of the image, same name
> 
>> Now I would like to:
>> - Be able to call "singularity bootstrap" from anywhere, i.e. not caring about the actual working directory of the "singularity" bootstrapping process.
> 
> I'm not sure I totally follow here - Singularity needs minimally a definition file (Singularity) and path to an image - the build context is important. Docker is the same - when you build it looks for the Dockerfile and local context. What would make sense is to have some standard organization of the build directory, and then have a common bootstrap file (adding files from the same folder, finding the definition) sort of automatically. Another idea is to have a wrapper around singularity that keeps a record of build bases (directories) associated with recipe or uri names, and then when you call to bootstrap /build with the uri, it changes directories appropriately, etc.
> 
>> - Copy the resource-files into my containers.
>> - Achieve that without hardcoding any absolute paths in the build recipe.
> 
> You shouldn't need to - given that you have a "resources" folder in the root of the build directory, if you are running it from there you can use relative paths.
> 
>> This burns down to the question: How do I specify the path correctly in the build-recipe?
>> Is it expected to be:
> *> - relative to the working directory of the "singularity bootstrap" process? That would be very much against portability.
> *> - relative to the location of the build recipe? Then I could probably use "../../resources/profile/setupATLAS.sh /etc/profile.d/setupATLAS.sh" in my "%files" section.
> 
> It's relative to where you are calling it. I don't think this breaks portability, if you think about the ways that people share containers and recipes. For containers, the work is done and the recipes are inside - this is what we care most about. For portability of the predecessor to the container (recipe, files) we use version control (eg Github) and we don't care about absolute paths. It's portable because someone else can download my repo, and build my container.
> 
>>
>> Maybe it's even possible to pass it in, i.e. use something like
>> %files
>> ${resourcedir:-../../resources}/profile/setupATLAS.sh
>> inside the recipe, and use "${resourcedir}" from the bootstraping host's environment if it is set?
> 
> I think it would be unlikely for most to have one researcher's special environment variable, but I could be wrong.
> 
> 
>> This is not really clear to me from the documentation, but maybe I just missed it ;-).
> 
> If you could better define what exactly isn't reasonable about relative paths from some base, I can offer suggestions. If you are looking for a local image manager to make it easy to push your own containers (and find them later) check out Singularity Registry https://singularityhub.github.io/sregistry/
> 
>> All the best and many thanks for your help!
>>         Oliver
>>
>> --
>> You received this message because you are subscribed to the Google Groups "singularity" group.
>> To unsubscribe from this group and stop receiving emails from it, send an email to singu...@lbl.gov <mailto:singularity%...@lbl.gov>.
> 
> -- 
> Vanessa Villamia Sochat
> Stanford University
> 
> -- 
> You received this message because you are subscribed to the Google Groups "singularity" group.
> To unsubscribe from this group and stop receiving emails from it, send an email to singu...@lbl.gov <mailto:singu...@lbl.gov>.

