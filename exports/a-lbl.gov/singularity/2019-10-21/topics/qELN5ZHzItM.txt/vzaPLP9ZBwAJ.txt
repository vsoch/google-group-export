X-Received: by 10.129.105.4 with SMTP id e4mr2862426ywc.53.1467940675069;
        Thu, 07 Jul 2016 18:17:55 -0700 (PDT)
X-BeenThere: singularity@lbl.gov
Received: by 10.36.58.208 with SMTP id m199ls87838itm.0.gmail; Thu, 07 Jul
 2016 18:17:54 -0700 (PDT)
X-Received: by 10.98.91.196 with SMTP id p187mr5272060pfb.135.1467940674624;
        Thu, 07 Jul 2016 18:17:54 -0700 (PDT)
Return-Path: <gmku...@lbl.gov>
Received: from fe4.lbl.gov (fe4.lbl.gov. [128.3.41.71])
        by mx.google.com with ESMTPS id a8si1348132pfj.35.2016.07.07.18.17.54
        for <singu...@lbl.gov>
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 07 Jul 2016 18:17:54 -0700 (PDT)
Received-SPF: pass (google.com: domain of gmku...@lbl.gov designates 74.125.82.70 as permitted sender) client-ip=74.125.82.70;
Authentication-Results: mx.google.com;
       spf=pass (google.com: domain of gmku...@lbl.gov designates 74.125.82.70 as permitted sender) smtp.mailfrom=gmku...@lbl.gov
X-Ironport-SBRS: 1.6
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A2DqAQD+/n5XdEZSfUpZA4QUfAaDNqlGhxCGfyKCP4M3AoEmBzwQAQEBAQEBARIBCgsMCB8xhE0BBAESESswCwsLNwICIQEPAwEFARwGCAcEARoCBAGHdAMPCAUJn2mBMT4xizuLDw2EJgEBCAEBAQEBAQEbBRCJYYEDgkOBUBEBPSaCOoJaBY54hGGFBjQBhgqCeoM1ghCBao1ChliBQIY1Eh6BDzWEMBwyAQaHWoE1AQEB
X-IronPort-AV: E=Sophos;i="5.28,326,1464678000"; 
   d="scan'208,217";a="29031799"
Received: from mail-wm0-f70.google.com ([74.125.82.70])
  by fe4.lbl.gov with ESMTP; 07 Jul 2016 18:17:38 -0700
Received: by mail-wm0-f70.google.com with SMTP id f126so1461271wma.3
        for <singu...@lbl.gov>; Thu, 07 Jul 2016 18:17:38 -0700 (PDT)
X-Gm-Message-State: ALyK8tKOHQZEN91KXx8zAAw6MmuCybgaJxSe8KsNMZDa/FbFWUZqMDRkEg9bSY2h598xU/DHJs4esSn00+GiQL6ySNKIRUB1sWyAOBeAL2k/H0VId3MA/+cwO7nrf0i9cwcKjJtrZ12h/8IAK15xzT97wvU=
X-Received: by 10.25.19.74 with SMTP id j71mr662234lfi.44.1467940657511;
        Thu, 07 Jul 2016 18:17:37 -0700 (PDT)
X-Received: by 10.25.19.74 with SMTP id j71mr662232lfi.44.1467940657312; Thu,
 07 Jul 2016 18:17:37 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.25.214.158 with HTTP; Thu, 7 Jul 2016 18:17:36 -0700 (PDT)
In-Reply-To: <CAM=pu+KGeNBaBGKbGGcrwLfa6BxsC6jM8tiaLK-e7FuyYMc00Q@mail.gmail.com>
References: <CAM=pu+KGeNBaBGKbGGcrwLfa6BxsC6jM8tiaLK-e7FuyYMc00Q@mail.gmail.com>
From: "Gregory M. Kurtzer" <gmku...@lbl.gov>
Date: Thu, 7 Jul 2016 18:17:36 -0700
Message-ID: <CAN7etTzmU+6wEgnXK7rhJ+bbehb5t4-F-RQP1CSUW5jjVBB6YQ@mail.gmail.com>
Subject: Re: [Singularity] Singularity Container Info for Workflows - in the header?
To: singularity <singu...@lbl.gov>
Content-Type: multipart/alternative; boundary=001a11406b366e4eb80537159111

--001a11406b366e4eb80537159111
Content-Type: text/plain; charset=UTF-8

Hi Vanessa!

Great write up, thank you for explaining!

I would like to suggest an option #3, not because I am necessarily
recommending it (yet), but because it solves some of the problems you
identified:

Make the intput/output formats be part of the "singularity hub" specific
metadata. So for example, when someone uploads a container image, they can
specify options, formats, and other bits for that particular image. While
automated will be nice, I am concerned it will lack reliability and
consistency. So for example, if the output of CONTAINER1 is HDF5 and the
input of CONTAINER2 is HDF5, then you have compatibility and can string the
two together.

Something I just thought of if you want to do it via an automated method
(option #4), you could in theory have a collector script that runs on "user
A's" computer that is responsible for packaging up the container to retain
the sparse'ness and do the appropriate runscript inspections, package it
all up together, and then have that script/tool be responsible for doing
the physical upload (or package it up for the user to upload via browser).

Thanks!

Greg

On Thu, Jul 7, 2016 at 5:53 PM, vanessa s <vso...@gmail.com> wrote:

> Hi Everyone,
>
> I want to get conversation started again about representing useful
> "runscript" type information (eg, inputs and outputs) in the header of
> singularity images. This is important to do for applications that will work
> with these containers, and ideally we can know this information without
> needing to mount the image. Let me first walk through an (ideal) example
> use case:
>
> 1. user A generates singularity container(s), including python runscript(s)
> 2. user A uploads container(s) to some singularity hub
> 3. user A makes a workflow
> 4. command line tool gets information about workflow, workflow is
> retrieved by user B, downloading images and running on some different
> cluster
>
> In order for this to be possible, for now, we really just need one primary
> thing:
>
> *A.* acceptable inputs/outputs are extracted from the runscript and
> available for step 3.
>
> The first questions, then for the group, are the following:
>
> - When should this information be extracted?
> - Where should it be stored?
>
> *Assumption #1: We can extract input parameters from the runscript*
> For the time being, let's assume that we have something simple in place
> that, if one exists, we can extract input arguments (both number and type)
> from the runscript itself. For example, simple bash/python templates could
> be provided to users that use standards (for example argparse with inspect
> <https://docs.python.org/3/library/inspect.html#module-inspect>) that
> will make it possible to infer possible options.
>
>
> Here are some starting ideas that I think are reasonable.
>
> *Option #1: *Extract the information during generation of the container
> (eg, when the runscript is added) and store it in the header in whatever
> format is best. This would be ideal for any later applications that use the
> container, because you can learn anything and everything without needing to
> mount the image. It would also mean that any change to the runscript would
> need to update the header.
>
>
> *Option #2: *Extract the information separately, and store it elsewhere
> (with the image). For example, we might have a separate "package"
> functionality that packages the container, runscript, and anything else
> that might be needed (eg, an extracted list of software installed) into a
> compressed file, and this compressed file can be uploaded to the
> "singularity hub." This is an ideal solution to be able to do more
> computationally intensive things (like extracting lists of things) and
> would also provide the entire runscript external to the container, so when
> it's uploaded to "singularity hub," the processing to figure out
> inputs/outputs and other relevant stuffs is done using those raw files.
> What we can't do right now is install singularity inside of a docker image,
> which means that the application I'm building (can't yet) do something like
> mount an image to do these operations on it.
>
> I see pros and cons to both. The first requires more heavy lifting on the
> singularity software side, but is more reliable in terms of keeping the
> container updated with its runscript, etc. The second offers more
> flexibility in providing different kinds of information and files to
> applications that use the containers, but we run the risk of having a
> mismatch between that data and what is in the container.
>
> *Future Use Case /Goal*
> There are two reasons for having some kind of more advanced "package"
> function. *1)* some of this more computationally intensive stuff
> (eg,extracting a list of all software in the container) is likely going to
> be desired, and it doesn't quite map well into a simple "export" use case
> that a user would want to be speedy. And *2)* to develop applications
> that do a lot better to organize, compare, and map the space of containers,
> we need to provide information about the guts of the container, much more
> than could be fit into a header, to be available to python, javascript, any
> other kind of application. In the same way that providing an API to a
> resource empowers others to build tools around/for it, providing data
> structures in some kind of package about the image guts inside (without
> needing to run singularity) will better empower others to do stuff with the
> containers.
>
> Looking forward to hearing everyone's thoughts! I'm still a little bit
> away from needing this information, but wanted to get it up for discussion
> so we have something to try soon :)
>
> Best,
>
> Vanessa
>
>
>
> --
> Vanessa Villamia Sochat
> Stanford University '16
> (603) 321-0676
>
> --
> You received this message because you are subscribed to the Google Groups
> "singularity" group.
> To unsubscribe from this group and stop receiving emails from it, send an
> email to singu...@lbl.gov.
>



-- 
Gregory M. Kurtzer
High Performance Computing Services (HPCS)
University of California
Lawrence Berkeley National Laboratory
One Cyclotron Road, Berkeley, CA 94720

--001a11406b366e4eb80537159111
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Hi Vanessa!<div><br></div><div>Great write up, thank you f=
or explaining!</div><div><br></div><div>I would like to suggest an option #=
3, not because I am necessarily recommending it (yet), but because it solve=
s some of the problems you identified:</div><div><br></div><div>Make the in=
tput/output formats be part of the &quot;singularity hub&quot; specific met=
adata. So for example, when someone uploads a container image, they can spe=
cify options, formats, and other bits for that particular image. While auto=
mated will be nice, I am concerned it will lack reliability and consistency=
. So for example, if the output of CONTAINER1 is HDF5 and the input of CONT=
AINER2 is HDF5, then you have compatibility and can string the two together=
.</div><div><br></div><div>Something I just thought of if you want to do it=
 via an automated method (option #4), you could in theory have a collector =
script that runs on &quot;user A&#39;s&quot; computer that is responsible f=
or packaging up the container to retain the sparse&#39;ness and do the appr=
opriate runscript inspections, package it all up together, and then have th=
at script/tool be responsible for doing the physical upload (or package it =
up for the user to upload via browser).</div><div><br></div><div>Thanks!</d=
iv><div><br></div><div>Greg</div></div><div class=3D"gmail_extra"><br><div =
class=3D"gmail_quote">On Thu, Jul 7, 2016 at 5:53 PM, vanessa s <span dir=
=3D"ltr">&lt;<a href=3D"mailto:vso...@gmail.com" target=3D"_blank">vso...@g=
mail.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=
=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir=
=3D"ltr">Hi Everyone,<div><br></div><div>I want to get conversation started=
 again about representing useful &quot;runscript&quot; type information (eg=
, inputs and outputs) in the header of singularity images. This is importan=
t to do for applications that will work with these containers, and ideally =
we can know this information without needing to mount the image. Let me fir=
st walk through=C2=A0an (ideal) example use case:</div><div><br></div><div>=
1. user A generates singularity container(s), including python runscript(s)=
</div><div>2. user A uploads container(s) to some singularity hub</div><div=
>3. user A makes a workflow</div><div>4. command line tool gets information=
 about workflow, workflow is retrieved by user B, downloading images and ru=
nning on some different cluster</div><div><br></div><div>In order for this =
to be possible, for now, we really just need one primary thing:</div><div><=
br></div><div><b>A.</b> acceptable inputs/outputs are extracted from the ru=
nscript and available for step 3.</div><div><b><br></b></div><div>The first=
 questions, then for the group, are the following:<b>=C2=A0</b></div><div><=
br></div><div>- When should this information be extracted?</div><div>- Wher=
e should it be stored?</div><div><br></div><div><b>Assumption #1: We can ex=
tract input parameters from the runscript</b><br></div><div>For the time be=
ing, let&#39;s assume that we have something simple in place that, if one e=
xists, we can extract input arguments (both number and type) from the runsc=
ript itself. For example, simple bash/python templates could be provided to=
 users that use standards (for example argparse with <a href=3D"https://doc=
s.python.org/3/library/inspect.html#module-inspect" target=3D"_blank">inspe=
ct</a>) that will make it possible to infer possible options.<br clear=3D"a=
ll"><div><br></div><div><div><br></div><div>Here are some starting ideas th=
at I think are reasonable.</div></div><div><br></div><div><b><span style=3D=
"background-color:rgb(255,255,0)">Option #1</span>: </b>Extract the informa=
tion during generation of the container (eg, when the runscript is added) a=
nd store it in the header in whatever format is best. This would be ideal f=
or any later applications that use the container, because you can learn any=
thing and everything without needing to mount the image. It would also mean=
 that any change to the runscript would need to update the header.</div><di=
v><br></div><div><br></div><div><div><b><span style=3D"background-color:rgb=
(255,255,0)">Option #2</span>: </b>Extract the information separately, and =
store it elsewhere (with the image). For example, we might have a separate =
&quot;package&quot; functionality that packages the container, runscript, a=
nd anything else that might be needed (eg, an extracted list of software in=
stalled) into a compressed file, and this compressed file can be uploaded t=
o the &quot;singularity hub.&quot; This is an ideal solution to be able to =
do more computationally intensive things (like extracting lists of things) =
and would also provide the entire runscript external to the container, so w=
hen it&#39;s uploaded to &quot;singularity hub,&quot; the processing to fig=
ure out inputs/outputs and other relevant stuffs is done using those raw fi=
les. What we can&#39;t do right now is install singularity inside of a dock=
er image, which means that the application I&#39;m building (can&#39;t yet)=
 do something like mount an image to do these operations on it.<br></div></=
div><div><br></div><div>I see pros and cons to both. The first requires mor=
e heavy lifting on the singularity software side, but is more reliable in t=
erms of keeping the container updated with its runscript, etc. The second o=
ffers more flexibility in providing different kinds of information and file=
s to applications that use the containers, but we run the risk of having a =
mismatch between that data and what is in the container.</div><div><br></di=
v><div><div><b>Future Use Case /Goal</b></div><div>There are two reasons fo=
r having some kind of more advanced &quot;package&quot; function. <b>1)</b>=
 some of this more computationally intensive stuff (eg,extracting a list of=
 all software in the container) is likely going to be desired, and it doesn=
&#39;t quite map well into a simple &quot;export&quot; use case that a user=
 would want to be speedy. And <b>2)</b> to develop applications that do a l=
ot better to organize, compare, and map the space of containers, we need to=
 provide information about the guts of the container, much more than could =
be fit into a header, to be available to python, javascript, any other kind=
 of application. In the same way that providing an API to a resource empowe=
rs others to build tools around/for it, providing data structures in some k=
ind of package about the image guts inside (without needing to run singular=
ity) will better empower others to do stuff with the containers.</div></div=
><div><br></div><div>Looking forward to hearing everyone&#39;s thoughts! I&=
#39;m still a little bit away from needing this information, but wanted to =
get it up for discussion so we have something to try soon :)</div><div><br>=
</div><div>Best,</div><div><br></div><div>Vanessa</div><span class=3D"HOEnZ=
b"><font color=3D"#888888"><div><br></div><br clear=3D"all"><div><br></div>=
-- <br><div data-smartmail=3D"gmail_signature">Vanessa Villamia Sochat<br>S=
tanford University &#39;16<br><div><div><div><a href=3D"tel:%28603%29%20321=
-0676" value=3D"+16033210676" target=3D"_blank">(603) 321-0676</a></div></d=
iv></div></div>
</font></span></div></div><span class=3D"HOEnZb"><font color=3D"#888888">

<p></p>

-- <br>
You received this message because you are subscribed to the Google Groups &=
quot;singularity&quot; group.<br>
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to <a href=3D"mailto:singu...@lbl.gov" target=3D"_blank">singu...@lbl.=
gov</a>.<br>
</font></span></blockquote></div><br><br clear=3D"all"><div><br></div>-- <b=
r><div class=3D"gmail_signature" data-smartmail=3D"gmail_signature"><div di=
r=3D"ltr"><div>Gregory M. Kurtzer<br>High Performance Computing Services (H=
PCS)<br>University of California<br>Lawrence Berkeley National Laboratory<b=
r>One Cyclotron Road, Berkeley, CA 94720</div></div></div>
</div>

--001a11406b366e4eb80537159111--
