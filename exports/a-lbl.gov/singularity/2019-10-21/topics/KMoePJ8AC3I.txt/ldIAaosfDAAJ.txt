X-Received: by 10.176.90.138 with SMTP id w10mr13283uae.42.1501790836835;
        Thu, 03 Aug 2017 13:07:16 -0700 (PDT)
X-BeenThere: singularity@lbl.gov
Received: by 10.36.34.199 with SMTP id o190ls333058ito.21.gmail; Thu, 03 Aug
 2017 13:07:16 -0700 (PDT)
X-Received: by 10.98.8.86 with SMTP id c83mr2802421pfd.255.1501790835871;
        Thu, 03 Aug 2017 13:07:15 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1501790835; cv=none;
        d=google.com; s=arc-20160816;
        b=ahQylrR0WWwm6sdaTkkofn1OasASYhwSSxuOmeMzWiOY5jsjnG6G6UM3oWAcGnPpBy
         W+Cg1TSSf+u/C53ENC2pTKaqd4sDmkHgzHxGu0glZYtI+sfTydq71VUmsrFTxXRl9d3b
         4pkbynjkntrOFuUSlnx/FMyF3QlsFzYz1IgWsITJUOD77C6qfw8cnGs63v5tggTnO0AB
         0JR3Aw9UmTde4IQp6OL9J+MMDjvIJzY0c/7JOcVvLECaoDvwmW7sPdmQPh/8wUDI2dLZ
         XmxYmGy7kNanVCBeW+ASskrdBypjSppPQ9eDW1hDeWR0iKlB8vayOAh3AHmKxHK/0oNb
         xGzA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=to:subject:message-id:date:from:references:in-reply-to:mime-version
         :dkim-signature:arc-authentication-results;
        bh=U4AjcUZgXXcl/oI+UFF/O0RZBLtJRvz2Q7XZlXG/jXE=;
        b=smTb7moQByPZLhrUUoh8DcHhM3KP4+/iC4obXzUreUmTLrTWbVD4o1HJ9DglUXdo3P
         QAWq8yRt1IavEMgSZ1buwa8KGieDQXITl435gV7prgPiMpEOfCKAWGX1D8sP1JiyGFO1
         78rmTjzuS0xyxkmiDsz0YDPcCfDyg6W3JtTxo+ARBwgmucx6GncmIIAgIt5Lc2XBMcfI
         Espv1n9CtVm1DpNnnXW3R0MehPVLPgzsoe0PYy5gIHiBNeS56es3zaNWhRIMusdOpKoe
         yPOiVnnkqTbSNSt9S3jdF2HRQ8Es2VJBAs/krM+RwsM0InlInUU1mVNJzpC4ujx712nG
         v2sg==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass head...@gmail.com header.b=DVeT5kJg;
       spf=pass (google.com: domain of gmku...@gmail.com designates 209.85.214.44 as permitted sender) smtp.mailfrom=gmku...@gmail.com
Return-Path: <gmku...@gmail.com>
Received: from fe4.lbl.gov (fe4.lbl.gov. [128.3.41.71])
        by mx.google.com with ESMTP id c14si14899124pfl.436.2017.08.03.13.07.15
        for <singu...@lbl.gov>;
        Thu, 03 Aug 2017 13:07:15 -0700 (PDT)
Received-SPF: pass (google.com: domain of gmku...@gmail.com designates 209.85.214.44 as permitted sender) client-ip=209.85.214.44;
Authentication-Results: mx.google.com;
       dkim=pass head...@gmail.com header.b=DVeT5kJg;
       spf=pass (google.com: domain of gmku...@gmail.com designates 209.85.214.44 as permitted sender) smtp.mailfrom=gmku...@gmail.com
X-Ironport-SBRS: 3.4
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A2GbCAAUgoNZhizWVdFdgx9AUAGBKycHh?=
 =?us-ascii?q?SWYa4FukGKFMw6BQUOCL4MYAoQ3B0EWAQEBAQEBAQEBAQECEAEBAQgLCwgoL4I?=
 =?us-ascii?q?zIhBGKS8BAQEBAQEBAQEBHwIrJQEaAQICASMdARseAwELBgULNwICIQEBEQEFA?=
 =?us-ascii?q?RwZCIhVgTkBAw0IBaEMP4wKggQFARyDCQWDXgoZJw1WgysBCgEBARwCBhKDFoI?=
 =?us-ascii?q?CUoR4WDSCV4FpARIBgzKCYQWRfY1EPAKLHYQdhHGCD4VYg3iGaYwoiBEUH4EVJ?=
 =?us-ascii?q?giBKQt3eIUNghMgNocVgjIBAQE?=
X-IronPort-AV: E=Sophos;i="5.41,317,1498546800"; 
   d="scan'208,217";a="83701740"
Received: from mail-it0-f44.google.com ([209.85.214.44])
  by fe4.lbl.gov with ESMTP; 03 Aug 2017 12:55:33 -0700
Received: by mail-it0-f44.google.com with SMTP id h199so2656346ith.0
        for <singu...@lbl.gov>; Thu, 03 Aug 2017 12:55:33 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to;
        bh=U4AjcUZgXXcl/oI+UFF/O0RZBLtJRvz2Q7XZlXG/jXE=;
        b=DVeT5kJgbIFrfTs8cViFUnGq9zovu/NP3yjBydAH0MEpRy7lYyRbKvkC6PJQiEKAJ7
         rzegKDMJK+lFCbR+xbt69gdA+j4jsGOqJFit7f3H8afs98IHgo8U6jHIua68W89DRdgU
         QZDXkBEq0lQDSaiMMsb+4XXA/gI1JffdwHfUr7GmIwH/SdMqN+Lmaag87A9AeutpPea8
         xzc4r9XgFGtkBdpBezOV7jf+7NHSvqdHTR8PUKSj42IC86WAno+iEgds9wn2RQdC5b+3
         ObY9lWh36roD24auqbnMWx3L2PrIFJb5Wh2qSYPVNtRvYvSIFuCApav5Y/Ugm2bP0Zp2
         KgKw==
X-Gm-Message-State: AIVw112LU2TTg7fd8nJKd7hUi297snr9JzCWu/Kq8oWPwuVMzteCq8GP
	JDIWwRBz3aBkRo/P9QbRwx31I0aavQ==
X-Received: by 10.36.68.193 with SMTP id o184mr489618ita.59.1501790132422;
 Thu, 03 Aug 2017 12:55:32 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.107.23.132 with HTTP; Thu, 3 Aug 2017 12:55:31 -0700 (PDT)
In-Reply-To: <CAApQTTjU+=ASab7pEv8Vn=TOLY2h9j9av1+zAtK-x6qsZXZhxA@mail.gmail.com>
References: <CAApQTTjU+=ASab7pEv8Vn=TOLY2h9j9av1+zAtK-x6qsZXZhxA@mail.gmail.com>
From: "Gregory M. Kurtzer" <gmku...@gmail.com>
Date: Thu, 3 Aug 2017 12:55:31 -0700
Message-ID: <CAApQTTg=GSxboZtYtf0472Hwxo4YG1_p5gvnSaJH13pL48dDAQ@mail.gmail.com>
Subject: Re: Container format change idea
To: singularity@lbl.gov
Content-Type: multipart/alternative; boundary="001a11c1848a5ed09f0555dec3a1"

--001a11c1848a5ed09f0555dec3a1
Content-Type: text/plain; charset="UTF-8"

Heya,

So far there is desire to maintain support for writable images. It seems as
though directory based containers (what I am calling 'sandboxes') will work
for what most people's stated as their need (please correct me if I'm wrong
and we can discuss) with one exception that was brought up in Slack...

Some service based containers may need to be writable in order to satisfy
persistence of data (think SQL tables). Are there any ideas or theories on
how to handle persistent data for a container runtime without modifying the
image itself? What do you like in how Docker handles this, and how can it
be done better?

I like the idea of DataContainers for this (a read/writable container that
can be mounted into a running container instance like a bind point), but it
maybe cumbersome having a second image file to associate..?

Thoughts?

On Thu, Aug 3, 2017 at 10:17 AM, Gregory M. Kurtzer <gmku...@gmail.com>
wrote:

> Hello everyone,
>
> This is a much longer email then I intended to write, but I felt that
> background is important. I have been spending a lot of time considering the
> Singularity container format. There are several pretty major considerations
> that are far from ideal that has warranted this:
>
> 1. Images are always bloated and they have to be "right sized" which is
> difficult to guess at before a container has been built.
> 2. Images must be packaged and/or compressed for distribution
> 3. Containers are modifiable, and while many people use this functionality
> for development or part of their workflow, it is not a great idea as it
> leads to container "black boxes".
> 4. When we `mkfs.ext3` the container payload, mkfs automatically adds some
> sparseness which creates inconsistencies due to how programs, file systems,
> and users copy and move images.
> 5. Modifiable images will have to be resigned (working on that feature
> now) and may break encryption models that are being investigated.
>
> These points have caused me to think about different formats, and I've
> considered several alternatives:
>
> 1. Custom Singularity file system: This gives us massive flexibility, but
> we do not want to require Singularity support on the host kernel. Also a
> long time to develop and Q/A.
>
> 2. Fuse singularity file system: This also gives us lots of flexibility,
> but also comes with the baggage of Fuse and will take a long time to
> develop and Q/A.
>
> 3. SquashFS: This is an existing file system which is supported by all (I
> believe) currently supported distributions of Linux. Using SquashFS based
> containers is already supported, but we don't have any mechanism for
> creating containers of this form. Development of that interface would be
> pretty easy, and quite possibly even more intuitive then it currently
> stands.
>
> Out of the 3 above options, #3 is the most appealing for me for the short
> term. But there are some pros and a con associated with it:
>
> Pros:
> - Container images never need a size, bootstrap, import, etc.. will always
> be "right sized"
> - Containers will always be compressed, and never need to be uncompressed
> - No sparseness, so containers are very easy to move
> - Containers are guaranteed immutable
> - We can better support signing and possible encryption of containers
> - Labels/keys/metadata will always be in sync with containers
> - SquashFS is a known standard for doing this sort of thing
>
> Cons:
> - The --writable option and all associated features will no longer be
> supported as containers will be immutable.
>
> Personally, I see the negative as not even completely negative. It means
> we will force the container management paradigm to something more akin to
> compiling. Metaphorically, the definition file is the source code, and the
> resulting container is the compiled result. When dealing with source code,
> we don't edit the binary when there is a problem, we edit the source code
> and then recompile. This will have to be the model going forth if we choose
> immutable containers, and I actually consider this a good thing. It means
> containers are derived from a recipe.
>
> There is an additional bit of support I can add to mitigate any
> development issues that this might cause, for example, container
> "sandboxes". Singularity already supports bootstrapping and running from a
> container directory. So development and testing can still easily occur. And
> when you are ready to create an image from that "sandbox", you could do it
> directly from the sandbox (icky, but we can in theory support it), or build
> from the definition file.
>
> After speaking with some people about this, here is the interface I am
> considering for this to replace the "create", "import" (as they will no
> longer be necessary) and the "bootstrap" commands:
>
> # singularity build container.simg recipe.def
> # singularity build container.simg docker://container
> # singularity build container.simg /path/to/container.tar.gz
>
> Or using a sandbox:
>
> # singularity build --sandbox /path/to/sandbox [any of the above targets]
> # singularity shell /path/to/sandbox
>
> And then after making the necessary changes to the sandbox, building an
> image directly from the sandbox:
>
> # singularity build container.simg /path/to/sandbox
>
>
> So my questions are,...
>
> Aside from the knee-jerk reactions of "OMG, nooo, change scares me!", are
> there any known workflows that this will break that can be described?
>
> Are there any additional workarounds that need consideration?
>
> What about positive feedback, does this sound like a good idea?
>
>
> --
> Gregory M. Kurtzer
> CEO, SingularityWare, LLC.
> Senior Architect, RStor
> Computational Science Advisor, Lawrence Berkeley National Laboratory
>



-- 
Gregory M. Kurtzer
CEO, SingularityWare, LLC.
Senior Architect, RStor
Computational Science Advisor, Lawrence Berkeley National Laboratory

--001a11c1848a5ed09f0555dec3a1
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>Heya,</div><div><br></div><div>So far there is desire=
 to maintain support for writable images. It seems as though directory base=
d containers (what I am calling &#39;sandboxes&#39;) will work for what mos=
t people&#39;s stated as their need (please correct me if I&#39;m wrong and=
 we can discuss) with one exception that was brought up in Slack...</div><d=
iv><br></div><div>Some service based containers may need to be writable in =
order to satisfy persistence of data (think SQL tables). Are there any idea=
s or theories on how to handle persistent data for a container runtime with=
out modifying the image itself? What do you like in how Docker handles this=
, and how can it be done better?</div><div><br></div><div>I like the idea o=
f DataContainers for this (a read/writable container that can be mounted in=
to a running container instance like a bind point), but it maybe cumbersome=
 having a second image file to associate..?</div><div><br></div><div>Though=
ts?</div></div><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">On=
 Thu, Aug 3, 2017 at 10:17 AM, Gregory M. Kurtzer <span dir=3D"ltr">&lt;<a =
href=3D"mailto:gmku...@gmail.com" target=3D"_blank">gmku...@gmail.com</a>&g=
t;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0=
 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr">Hello e=
veryone,=C2=A0<br clear=3D"all"><div><br></div><div>This is a much longer e=
mail then I intended to write, but I felt that background is important. I h=
ave been spending a lot of time considering the Singularity container forma=
t. There are several pretty major considerations that are far from ideal th=
at has warranted this:</div><div><br></div><div>1. Images are always bloate=
d and they have to be &quot;right sized&quot; which is difficult to guess a=
t before a container has been built.</div><div>2. Images must be packaged a=
nd/or compressed for distribution</div><div>3. Containers are modifiable, a=
nd while many people use this functionality for development or part of thei=
r workflow, it is not a great idea as it leads to container &quot;black box=
es&quot;.</div><div>4. When we `mkfs.ext3` the container payload, mkfs auto=
matically adds some sparseness which creates inconsistencies due to how pro=
grams, file systems, and users copy and move images.</div><div>5. Modifiabl=
e images will have to be resigned (working on that feature now) and may bre=
ak encryption models that are being investigated.</div><div><br></div><div>=
These points have caused me to think about different formats, and I&#39;ve =
considered several alternatives:</div><div><br></div><div>1. Custom Singula=
rity file system: This gives us massive flexibility, but we do not want to =
require Singularity support on the host kernel. Also a long time to develop=
 and Q/A.</div><div><br></div><div>2. Fuse singularity file system: This al=
so gives us lots of flexibility, but also comes with the baggage of Fuse an=
d will take a long time to develop and Q/A.</div><div><br></div><div>3. Squ=
ashFS: This is an existing file system which is supported by all (I believe=
) currently supported distributions of Linux. Using SquashFS based containe=
rs is already supported, but we don&#39;t have any mechanism for creating c=
ontainers of this form. Development of that interface would be pretty easy,=
 and quite possibly even more intuitive then it currently stands.</div><div=
><br></div><div>Out of the 3 above options, #3 is the most appealing for me=
 for the short term. But there are some pros and a con associated with it:<=
/div><div><br></div><div>Pros:</div><div>- Container images never need a si=
ze, bootstrap, import, etc.. will always be &quot;right sized&quot;</div><d=
iv>- Containers will always be compressed, and never need to be uncompresse=
d</div><div>- No sparseness, so containers are very easy to move</div><div>=
- Containers are guaranteed immutable</div><div>- We can better support sig=
ning and possible encryption of containers</div><div>- Labels/keys/metadata=
 will always be in sync with containers</div><div>- SquashFS is a known sta=
ndard for doing this sort of thing</div><div><br></div><div>Cons:</div><div=
>- The --writable option and all associated features will no longer be supp=
orted as containers will be immutable.</div><div><br></div><div>Personally,=
 I see the negative as not even completely negative. It means we will force=
 the container management paradigm to something more akin to compiling. Met=
aphorically, the definition file is the source code, and the resulting cont=
ainer is the compiled result. When dealing with source code, we don&#39;t e=
dit the binary when there is a problem, we edit the source code and then re=
compile. This will have to be the model going forth if we choose immutable =
containers, and I actually consider this a good thing. It means containers =
are derived from a recipe.</div><div><br></div><div>There is an additional =
bit of support I can add to mitigate any development issues that this might=
 cause, for example, container &quot;sandboxes&quot;. Singularity already s=
upports bootstrapping and running from a container directory. So developmen=
t and testing can still easily occur. And when you are ready to create an i=
mage from that &quot;sandbox&quot;, you could do it directly from the sandb=
ox (icky, but we can in theory support it), or build from the definition fi=
le.</div><div><br></div><div>After speaking with some people about this, he=
re is the interface I am considering for this to replace the &quot;create&q=
uot;, &quot;import&quot; (as they will no longer be necessary) and the &quo=
t;bootstrap&quot; commands:</div><div><br></div><div># singularity build co=
ntainer.simg recipe.def</div><div># singularity build container.simg docker=
://container</div><div># singularity build container.simg /path/to/containe=
r.tar.gz</div><div><br></div><div>Or using a sandbox:</div><div><br></div><=
div># singularity build --sandbox /path/to/sandbox [any of the above target=
s]</div><div># singularity shell /path/to/sandbox</div><div><br></div><div>=
And then after making the necessary changes to the sandbox, building an ima=
ge directly from the sandbox:</div><div><br></div><div># singularity build =
container.simg /path/to/sandbox</div><div><br></div><div><br></div><div>So =
my questions are,...</div><div><br></div><div>Aside from the knee-jerk reac=
tions of &quot;OMG, nooo, change scares me!&quot;, are there any known work=
flows that this will break that can be described?</div><div><br></div><div>=
Are there any additional workarounds that need consideration?</div><div><br=
></div><div>What about positive feedback, does this sound like a good idea?=
</div><span class=3D"HOEnZb"><font color=3D"#888888"><div><br></div><div><b=
r></div>-- <br><div class=3D"m_-8867396896883305357gmail_signature" data-sm=
artmail=3D"gmail_signature"><div dir=3D"ltr"><div><div dir=3D"ltr"><div><di=
v dir=3D"ltr"><div>Gregory M. Kurtzer</div><div>CEO, SingularityWare, LLC.<=
/div><div>Senior Architect, RStor</div><div><span style=3D"font-size:12.8px=
">Computational Science Advisor, Lawrence Berkeley National Laboratory</spa=
n><br></div></div></div></div></div></div></div>
</font></span></div>
</blockquote></div><br><br clear=3D"all"><div><br></div>-- <br><div class=
=3D"gmail_signature" data-smartmail=3D"gmail_signature"><div dir=3D"ltr"><d=
iv><div dir=3D"ltr"><div><div dir=3D"ltr"><div>Gregory M. Kurtzer</div><div=
>CEO, SingularityWare, LLC.</div><div>Senior Architect, RStor</div><div><sp=
an style=3D"font-size:12.8px">Computational Science Advisor, Lawrence Berke=
ley National Laboratory</span><br></div></div></div></div></div></div></div=
>
</div>

--001a11c1848a5ed09f0555dec3a1--
