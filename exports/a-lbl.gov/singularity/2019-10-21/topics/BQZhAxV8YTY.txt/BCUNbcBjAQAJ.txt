X-Received: by 2002:a17:902:6b49:: with SMTP id g9mr6131292plt.132.1551714053958;
        Mon, 04 Mar 2019 07:40:53 -0800 (PST)
X-BeenThere: singularity@lbl.gov
Received: by 2002:a63:5751:: with SMTP id h17ls6366599pgm.4.gmail; Mon, 04 Mar
 2019 07:40:53 -0800 (PST)
X-Received: by 2002:a63:2147:: with SMTP id s7mr18196777pgm.361.1551714052974;
        Mon, 04 Mar 2019 07:40:52 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1551714052; cv=none;
        d=google.com; s=arc-20160816;
        b=iQwKIFbjs8siXk0jHb79POUDmq/S00tpglNnNo/PisqplkjFkuXvxBWuBuatovWUIk
         WjdbOIOq8JM/dbKSVreS4U/5BW+1YeZKn3wLzFPIA4D1UMOz6U5kxEkYef2nToHUeihD
         NWSlogQlmHOZ0U+VdI3IYLwtxjeoVSeMHMnU+f9EcGuJvzbjqnGeEaToDKDsquR+nHA4
         4D5YMI6H89PkSGuwBUdZcIJV/nFR2TqSsNxkIZMtbk3lVphk/PXRKqUEZ75+4pt3U4tS
         +ADidAgJuhYn/FTctg4yfmn+MM0kjLhiMwtTb5pd9yAXXx+0VdqQ3dDhBuEPlczviqsk
         Jvyg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=to:subject:message-id:date:from:in-reply-to:references:mime-version
         :dkim-signature;
        bh=OM8VB9RCfwXp6sumQ3DIlODZa84imcDMolnX5mZ1Af4=;
        b=wWVNKXI850wnF4fv7+9rPwheoo61210EEQQq6A6apYhh5npdjhyySJWGQXVZHDjVeT
         /AQzUN317aWyQGOf90ZD6dTK5WQvBqxcv+09tsWORoXD8vP+mhTDF2K8sROevQHdzOgr
         VWrokStHcli7F76BIpzEUFqCGJfxsBoccf00JSiJiLTb8CsrWNTFNt9aJtpoZ0sgUjwl
         nBTKd8oDQ1wzDA9nONM+FFq4pU81+YzrkgsOfaguIr650wnhVM3+cujSKt+yDPzoLPIi
         tkvQuMqO7oEKoNfkAv6bSUeqwqPREMyVtGx6ABBBQQ9IAqVR+T13Sa4mLGCHMgoJHwf6
         EvUw==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass head...@googlemail.com header.s=20161025 header.b="h/SfSy8Q";
       spf=pass (google.com: domain of hea...@googlemail.com designates 209.85.160.180 as permitted sender) smtp.mailfrom=hea...@googlemail.com
Return-Path: <hea...@googlemail.com>
Received: from fe4.lbl.gov (fe4.lbl.gov. [131.243.228.53])
        by mx.google.com with ESMTP id 20si5707523pfs.165.2019.03.04.07.40.52
        for <singu...@lbl.gov>;
        Mon, 04 Mar 2019 07:40:52 -0800 (PST)
Received-SPF: pass (google.com: domain of hea...@googlemail.com designates 209.85.160.180 as permitted sender) client-ip=209.85.160.180;
Authentication-Results: mx.google.com;
       dkim=pass head...@googlemail.com header.s=20161025 header.b="h/SfSy8Q";
       spf=pass (google.com: domain of hea...@googlemail.com designates 209.85.160.180 as permitted sender) smtp.mailfrom=hea...@googlemail.com
X-Ironport-SBRS: 2.7
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A2ExBgD2RX1cf7SgVdFlgyVYgRJQMyeEA?=
 =?us-ascii?q?QeBHYJej2mCDXyRMoYHgSs8JQEKC4FJgnUChCYiOBIBAQMBAQMBAwIBAQIQAQE?=
 =?us-ascii?q?JCwsIGwwlDII6BQIDHwcKBE07MAEBAQEBAQEBAQEBAQEBAQEBAQEBFQINIEMBA?=
 =?us-ascii?q?QEDASMEGQENGQ0GAwELBgULCi0CAiIPAwEFARwOBwQBGgIEgwImAYE1AQMNCAU?=
 =?us-ascii?q?KnSM8ix18Mx+CWgWEMgpADYIWAgEFEoEdiygXgX+BEYJdNYMeAoEpBQESAYMpg?=
 =?us-ascii?q?jUiAooJCoZRgWORPQmHQ4N4hzkZkyKQP4xgMIE9VzBxMwEZCBsVbII7gy0BCYJ?=
 =?us-ascii?q?BilNCMBCOOA8XBCyBcgUBAQ?=
X-IronPort-AV: E=Sophos;i="5.58,440,1544515200"; 
   d="scan'208,217";a="53549136"
Received: from mail-qt1-f180.google.com ([209.85.160.180])
  by fe4.lbl.gov with ESMTP; 04 Mar 2019 07:40:51 -0800
Received: by mail-qt1-f180.google.com with SMTP id y4so5561738qtc.10
        for <singu...@lbl.gov>; Mon, 04 Mar 2019 07:40:51 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlemail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to;
        bh=OM8VB9RCfwXp6sumQ3DIlODZa84imcDMolnX5mZ1Af4=;
        b=h/SfSy8QbItEIWj5kb3d+i0VEE6X2eb49jsjvz3ZAlUcHRyuyEfztV3oIcahhHQK3y
         f/heRs2/seVwhZs4271PQhwuC7kckqB4Y/0eI1mlP6197a1q5GqpycIef2NrXAsqmMTM
         AAEBNrV1MjzD4WAnVdEie7OWGXkb6Cv1iSZWraOsmTqnvF1IcG7akOGpm+hMrBUAQubG
         /y2Flus9yvHAnMVoIqwoGW9qgLTPVor1UbGjw97kUZgO0GJY0wL2jJb/p27TqNLMbdF1
         pf2eNQJUM9Wc6BriKCpgZc9e5TND16ig6PYImuwdK2NL2oIKYoMz4E7EmAFGk7Qb/aOm
         NybA==
X-Gm-Message-State: APjAAAXqM0S5I9o7pbnpL+MuCJJ4AZ/QOYEHiVDL6HXuQoqCRx7NlEDE
	Ar/l1w+IfJO9mAqaJIbUGkyzImU/59r/uzdF0GIkwsMJ
X-Received: by 2002:a0c:9b85:: with SMTP id o5mr14734569qve.62.1551714050241;
 Mon, 04 Mar 2019 07:40:50 -0800 (PST)
MIME-Version: 1.0
References: <7bb2ddd5-0de0-5bbd-0fa2-d60c36966e57@lal.in2p3.fr>
In-Reply-To: <7bb2ddd5-0de0-5bbd-0fa2-d60c36966e57@lal.in2p3.fr>
From: John Hearns <hea...@googlemail.com>
Date: Mon, 4 Mar 2019 15:40:23 +0000
Message-ID: <CAPqNE2WuXEy1sKUP1Akzes0Q+obxLBu0TkR7=5n+KhsUiMdR8w@mail.gmail.com>
Subject: Re: [Singularity] Thoughts from a Docker -> Singularity conversion attempt
To: singularity@lbl.gov
Content-Type: multipart/alternative; boundary="000000000000c1fca2058346945c"

--000000000000c1fca2058346945c
Content-Type: text/plain; charset="UTF-8"

"the laptop-hostile orthodoxy of RHEL / CentOS"    Love it. Lol.

A grown up from Singularity will be along in a moment - I believe multi
stage builds are on the cards.

ps. Containers? Laptops? Luxury.  In my day you used HBOOK and plotted
histograms used EBCDIC characters hammered out by a line printer.
And you thought yourself lucky if the computer centre delivered the output
before lunch.

On Mon, 4 Mar 2019 at 15:35, Hadrien Grasland <gras...@lal.in2p3.fr> wrote:

> Dear Singularity users,
>
> I've been packaging HEP software and development environments using a
> combination of Spack and Docker for a while.
>
>    - Spack gives me customizable and ergonomic software builds, with
>    automated dependency management and peaceful coexistence between different
>    build configurations.
>    - Docker gives me cross-OS binary + environment portability, and a way
>    to "freeze" a snapshot of my rolling Linux distribution of choice in order
>    to momentarily prevent Spack from rebuilding everything over and over again
>    the way it loves to.
>
> This is what the end result currently looks like:
> https://github.com/HadrienG2/spack-based-docker .
>
> A problem with using Docker for this purpose, though, is that it does too
> much container/host isolation for my use case. I don't really care for
> Docker masquerading as a VM by hiding the host filesystem and processes
> from the container, but I do care about the cumbersome side of remembering
> to bind mount everything, ending up with root-owned files in these bind
> mounts if I'm not very careful, and ptrace rights being taken away from me
> unless I take care to pass the magical "I don't care, I trust this
> container" flags to the docker run command line. From this perspective, I
> sometimes feel like I'm fighting Docker's cloud-oriented design a bit too
> much.
>
> Which is what led me to investigate Singularity, an experience which I now
> feel ready to report on.
> ------------------------------
>
> Having some previous bad experience from the Docker -> Singularity image
> conversion machinery, I decided for this attempt to try to stick with a
> pure Singularity workflow, without Docker getting in the way at any time.
> This was easier than expected: bootstrapping a zypper-based image actually
> proved very smooth.
>
> My feeling from translating my Docker recipes afterwards is that
> Singularity does deliver beautifully on the final image usability front
> (hurray for the simple CLI, ptrace privileges, proper file permissions, and
> /home mounting by default), but feels quite a bit more painful than Docker
> on the image builder's side. Here are some particular pain points that I
> encountered, maybe they have some well-known solutions / workarounds ?
>
>    - I miss Docker's build arguments a lot.
>    - A typical use case is building an image twice, once with debug
>       software builds (for debugging) and once with release builds (for end usage
>       and profiling)
>       - Another use case is controlling from remote which version of some
>       software gets built, and to synchronize that with the output image's file
>       name.
>       - A third use case is synchronizing the directory where image files
>       are written across multiple Singularity definition file, and making it
>       externally configurable.
>       - I appreciate Singuarity's attempt to cautiously separate build
>    environment from runtime environment, but find that it makes build
>    environment management difficult:
>       - I often have to write each environment-altering statement three
>       times, once in %post, once in %test, and once in ${SINGULARITY_ENVIRONMENT}
>       - Build environment not being carried over from one parent image to
>       a child image often makes me give up and just write my whole build setup in
>       ${SINGULARITY_ENVIRONMENT} so that I can source that at the beginning of
>       the next image.
>       - %environment is almost never usable for me because most of the
>       time I need some environment to be set both for runtime and for child
>       images.
>       - The idea of separating a build in clear-cut %build, %post, %test
>    phases is nice in theory, but limiting for complex recipes
>       - The folder to which I want to copy files may be created during
>       %post, in which case I need to move files to a temporary directory during
>       %copy and re-move them later.
>       - Some tests can only be run at some stages during the build
>       process, because they rely on a build folder which must be cleaned up at
>       the end of the recipe.
>       - SINGULARITY_ENVIRONMENT not being sourced before %test is painful
>       and uncalled for.
>       - A replacement to Docker layers for build snapshots would be much
>    appreciated.
>       - I certainly don't miss the build performance/size vs recipe
>       readability compromise of Docker saving a layer after every RUN statement...
>       - ...but I do miss being able to quickly investigate a failed build
>       and restart it without going through my whole %post section all over again.
>
> In short, I would be longing for....
>
>    - A way to use some externally configurable environment in a
>    singularity definition file (including, and I guess that's the difficult
>    part, in the "From:" statement)
>    - An alternative to SINGULARITY_ENVIRONMENT for configuring build
>    environment instead of runtime environment
>    - A less hacky way to pass environment to childe images' build recipes
>    (may or may not be merged with the above)
>    - A way to check if tests are enabled in %post as a more flexible
>    alternative to the %test section
>       - ...and runtime environment being sourced before the %test section
>       begins.
>    - Faster / easier ways to debug failed Singularity builds than
>    modifying the recipe and restarting it from the beginning.
>
> ...but some of that may be an XY problem coming from my Docker user habits
> :)
>
> Cheers,
> Hadrien
>
> --
> You received this message because you are subscribed to the Google Groups
> "singularity" group.
> To unsubscribe from this group and stop receiving emails from it, send an
> email to singu...@lbl.gov.
>

--000000000000c1fca2058346945c
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div dir=3D"ltr"><span style=3D"text-align:left;color:rgb(=
36,41,46);text-transform:none;text-indent:0px;letter-spacing:normal;font-fa=
mily:-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif,A=
pple Color Emoji,Segoe UI Emoji,Segoe UI Symbol;font-size:16px;font-style:n=
ormal;font-variant:normal;font-weight:400;text-decoration:none;word-spacing=
:0px;display:inline;white-space:normal;float:none;background-color:rgb(255,=
255,255)">&quot;the laptop-hostile
orthodoxy of RHEL / CentOS&quot; =C2=A0=C2=A0 Love it. Lol.=C2=A0</span></d=
iv><div dir=3D"ltr"><br></div><div>A grown up from Singularity will be alon=
g in a moment - I believe multi stage builds are on the cards.</div><div><b=
r></div><div>ps. Containers? Laptops? Luxury.=C2=A0 In my day you used HBOO=
K and plotted histograms used EBCDIC characters hammered out by a line prin=
ter.</div><div>And you thought yourself lucky if the computer centre delive=
red the output before lunch.<br></div></div><br><div class=3D"gmail_quote">=
<div class=3D"gmail_attr" dir=3D"ltr">On Mon, 4 Mar 2019 at 15:35, Hadrien =
Grasland &lt;<a href=3D"mailto:gras...@lal.in2p3.fr">gras...@lal.in2p3.fr</=
a>&gt; wrote:<br></div><blockquote class=3D"gmail_quote" style=3D"margin:0p=
x 0px 0px 0.8ex;padding-left:1ex;border-left-color:rgb(204,204,204);border-=
left-width:1px;border-left-style:solid">
 =20

   =20
 =20
  <div bgcolor=3D"#FFFFFF">
    <p>Dear Singularity users,</p>
    <p>I&#39;ve been packaging HEP software and development environments
      using a combination of Spack and Docker for a while.</p>
    <ul>
      <li>Spack gives me customizable and ergonomic software builds,
        with automated dependency management and peaceful coexistence
        between different build configurations.</li>
      <li>Docker gives me cross-OS binary + environment portability, and
        a way to &quot;freeze&quot; a snapshot of my rolling Linux distribu=
tion of
        choice in order to momentarily prevent Spack from rebuilding
        everything over and over again the way it loves to.</li>
    </ul>
    <p>This is what the end result currently looks like:
      <a class=3D"gmail-m_-752644209929854928moz-txt-link-freetext" href=3D=
"https://github.com/HadrienG2/spack-based-docker" target=3D"_blank">https:/=
/github.com/HadrienG2/spack-based-docker</a> .</p>
    <p>A problem with using Docker for this purpose, though, is that it
      does too much container/host isolation for my use case. I don&#39;t
      really care for Docker masquerading as a VM by hiding the host
      filesystem and processes from the container, but I do care about
      the cumbersome side of remembering to bind mount everything,
      ending up with root-owned files in these bind mounts if I&#39;m not
      very careful, and ptrace rights being taken away from me unless I
      take care to pass the magical &quot;I don&#39;t care, I trust this
      container&quot; flags to the docker run command line. From this
      perspective, I sometimes feel like I&#39;m fighting Docker&#39;s
      cloud-oriented design a bit too much.</p>
    <p>Which is what led me to investigate Singularity, an experience
      which I now feel ready to report on.</p>
    <hr width=3D"100%" size=3D"2">
    <p>Having some previous bad experience from the Docker -&gt;
      Singularity image conversion machinery, I decided for this attempt
      to try to stick with a pure Singularity workflow, without Docker
      getting in the way at any time. This was easier than expected:
      bootstrapping a zypper-based image actually proved very smooth.<br>
    </p>
    <p>My feeling from translating my Docker recipes afterwards is that
      Singularity does deliver beautifully on the final image usability
      front (hurray for the simple CLI, ptrace privileges, proper file
      permissions, and /home mounting by default), but feels quite a bit
      more painful than Docker on the image builder&#39;s side. Here are
      some particular pain points that I encountered, maybe they have
      some well-known solutions / workarounds ?</p>
    <ul>
      <li>I miss Docker&#39;s build arguments a lot.<br>
      </li>
      <ul>
        <li>A typical use case is building an image twice, once with
          debug software builds (for debugging) and once with release
          builds (for end usage and profiling)</li>
        <li>Another use case is controlling from remote which version of
          some software gets built, and to synchronize that with the
          output image&#39;s file name.</li>
        <li>A third use case is synchronizing the directory where image
          files are written across multiple Singularity definition file,
          and making it externally configurable.<br>
        </li>
      </ul>
      <li>I appreciate Singuarity&#39;s attempt to cautiously separate buil=
d
        environment from runtime environment, but find that it makes
        build environment management difficult:</li>
      <ul>
        <li>I often have to write each environment-altering statement
          three times, once in %post, once in %test, and once in
          ${SINGULARITY_ENVIRONMENT}</li>
        <li>Build environment not being carried over from one parent
          image to a child image often makes me give up and just write
          my whole build setup in ${SINGULARITY_ENVIRONMENT} so that I
          can source that at the beginning of the next image.</li>
        <li>%environment is almost never usable for me because most of
          the time I need some environment to be set both for runtime
          and for child images.<br>
        </li>
      </ul>
      <li>The idea of separating a build in clear-cut %build, %post,
        %test phases is nice in theory, but limiting for complex recipes</l=
i>
      <ul>
        <li>The folder to which I want to copy files may be created
          during %post, in which case I need to move files to a
          temporary directory during %copy and re-move them later.</li>
        <li>Some tests can only be run at some stages during the build
          process, because they rely on a build folder which must be
          cleaned up at the end of the recipe.</li>
        <li>SINGULARITY_ENVIRONMENT not being sourced before %test is
          painful and uncalled for.<br>
        </li>
      </ul>
      <li>A replacement to Docker layers for build snapshots would be
        much appreciated.</li>
      <ul>
        <li>I certainly don&#39;t miss the build performance/size vs recipe
          readability compromise of Docker saving a layer after every
          RUN statement...</li>
        <li>...but I do miss being able to quickly investigate a failed
          build and restart it without going through my whole %post
          section all over again.</li>
      </ul>
    </ul>
    <p>In short, I would be longing for....</p>
    <ul>
      <li>A way to use some externally configurable environment in a
        singularity definition file (including, and I guess that&#39;s the
        difficult part, in the &quot;From:&quot; statement)</li>
      <li>An alternative to SINGULARITY_ENVIRONMENT for configuring
        build environment instead of runtime environment</li>
      <li>A less hacky way to pass environment to childe images&#39; build
        recipes (may or may not be merged with the above)<br>
      </li>
      <li>A way to check if tests are enabled in %post as a more
        flexible alternative to the %test section</li>
      <ul>
        <li>...and runtime environment being sourced before the %test
          section begins.</li>
      </ul>
      <li>Faster / easier ways to debug failed Singularity builds than
        modifying the recipe and restarting it from the beginning.</li>
    </ul>
    <p>...but some of that may be an XY problem coming from my Docker
      user habits :)<br>
    </p>
    <p>Cheers,<br>
      Hadrien<br>
    </p>
  </div>


<p></p>

-- <br>
You received this message because you are subscribed to the Google Groups &=
quot;singularity&quot; group.<br>
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to <a href=3D"mailto:singu...@lbl.gov" target=3D"_blank">singu...@lbl.=
gov</a>.<br>
</blockquote></div>

--000000000000c1fca2058346945c--
