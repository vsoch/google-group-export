Date: Thu, 14 Feb 2019 10:09:26 -0800 (PST)
From: Hugo R Hernandez <hdez...@gmail.com>
To: singularity <singu...@lbl.gov>
Message-Id: <b87e124c-e6d0-454d-a46c-69a25a9051f2@lbl.gov>
In-Reply-To: <36fc16f1-faa6-4284-8ef8-5b5c8b69ea08@lbl.gov>
References: <36fc16f1-faa6-4284-8ef8-5b5c8b69ea08@lbl.gov>
Subject: Re: In reference to the recent runc vulnerability (CVE-2019-5736)
MIME-Version: 1.0
Content-Type: multipart/mixed; 
	boundary="----=_Part_488_59856061.1550167766508"

------=_Part_488_59856061.1550167766508
Content-Type: multipart/alternative; 
	boundary="----=_Part_489_331914762.1550167766509"

------=_Part_489_331914762.1550167766509
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Great to know this is more than a 'just in case check'.  Thank you for=20
addressing my concern!

On Wednesday, February 13, 2019 at 7:59:00 PM UTC-6, David Godlove wrote:
>
> Hiya everyone! =20
>
> The folks at Sylabs have been investigating CVE-2019-5736, figuring out=
=20
> the ramifications, and preparing a statement.  It=E2=80=99s long.  Sorry.=
  But it=20
> seems important.  Here goes.
>
> It=E2=80=99s been widely reported that a security vulnerability in runc a=
nd=20
> several other container runtimes allows a malicious container to =E2=80=
=9Cbreak=20
> out=E2=80=9D and execute code with root-level permissions on the host sys=
tem.  The=20
> container does this by tampering with the executable that is responsible=
=20
> for running the image.  Critically, for this vulnerability to be exploite=
d,=20
> a malicious container must be executed with elevated privileges (e.g. roo=
t).
>
> In a nutshell, Sylabs does not consider issues like CVE-2019-5736 to be=
=20
> privilege-escalation vulnerabilities in the Singularity container runtime=
. =20
> If a user runs untrusted containers as root, it is the same as running=20
> untrusted code as root.  Running untrusted containers as root is at odds=
=20
> with the normal accepted use of Singularity.  To be very clear, it is=20
> unrealistic to suggest that users must run all containers without elevate=
d=20
> privileges.  That is why Singularity provides a simple, built-in method t=
o=20
> verify that containers are created by trusted entities before running.  I=
f=20
> a user runs an untrusted container as root, and it contains an exploit li=
ke=20
> the one detailed in CVE-2019-5736, it will behave in much the same way wi=
th=20
> Singularity as the vulnerability detailed in runc.  Users should never ru=
n=20
> untrusted containers with root privileges.
>
> Sylabs will continue to write patches to mitigate issues like=20
> CVE-2019-5736 in order to help prevent accidental damage, but there are n=
o=20
> explicit or implied guarantees when running untrusted containers with=20
> elevated privileges.
>
> Singularity=E2=80=99s philosophy is that it is inherently unsafe to run u=
ntrusted=20
> containers with elevated permissions.  Users must either 1) run container=
s=20
> without any elevated privileges, or 2) verify and trust the entity that=
=20
> originally created the container before running with privileges.  The=20
> Singularity runtime and file format facilitate both of these requirements=
. =20
> By default, the Singularity runtime is executed without any elevated=20
> privileges.  And the Singularity Image Format (SIF) allows an entity to=
=20
> cryptographically sign a container, creating a signature block within the=
=20
> SIF file.  Users can then verify that the container they obtained is a=20
> bit-for-bit reproduction of the container that was originally signed.  As=
=20
> long as the user knows and trusts the entity that signed the container,=
=20
> they can run the container confidently with elevated privileges. =20
> Critically, the trust mechanism exists within the SIF file.  So even if t=
he=20
> container was compromised, and malicious parties tampered with the=20
> contents, the end user would see that the container they downloaded was n=
o=20
> longer properly signed.
>
> Security is not a checkbox that one can tick and forget.  It=E2=80=99s an=
 ongoing=20
> process that begins with software architecture, and continues all the way=
=20
> through to ongoing security practices.  In addition to ensuring that=20
> containers are run without elevated privileges where appropriate, and tha=
t=20
> containers are produced by trusted sources, users must monitor their=20
> containers for newly discovered vulnerabilities and update when necessary=
=20
> just as they would with any other software.  Sylabs is constantly probing=
=20
> to find and patch vulnerabilities within Singularity, and will continue t=
o=20
> do so.
>

------=_Part_489_331914762.1550167766509
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Great to know this is more than a &#39;just in case check&=
#39;.=C2=A0 Thank you for addressing my concern!<br><br>On Wednesday, Febru=
ary 13, 2019 at 7:59:00 PM UTC-6, David Godlove wrote:<blockquote class=3D"=
gmail_quote" style=3D"margin: 0;margin-left: 0.8ex;border-left: 1px #ccc so=
lid;padding-left: 1ex;"><div dir=3D"ltr"><div>Hiya everyone!=C2=A0=C2=A0</d=
iv><div><br></div><div>The folks at Sylabs have been investigating CVE-2019=
-5736, figuring out the ramifications, and preparing a statement.=C2=A0 It=
=E2=80=99s long.=C2=A0 Sorry.=C2=A0 But it seems important.=C2=A0 Here goes=
.</div><div><br></div><div>It=E2=80=99s been widely reported that a securit=
y vulnerability in runc and several other container runtimes allows a malic=
ious container to =E2=80=9Cbreak out=E2=80=9D and execute code with root-le=
vel permissions on the host system.=C2=A0 The container does this by tamper=
ing with the executable that is responsible for running the image.=C2=A0 Cr=
itically, for this vulnerability to be exploited, a malicious container mus=
t be executed with elevated privileges (e.g. root).</div><div><br></div><di=
v>In a nutshell, Sylabs does not consider issues like CVE-2019-5736 to be p=
rivilege-escalation vulnerabilities in the Singularity container runtime.=
=C2=A0 If a user runs untrusted containers as root, it is the same as runni=
ng untrusted code as root.=C2=A0 Running untrusted containers as root is at=
 odds with the normal accepted use of Singularity.=C2=A0 To be very clear, =
it is unrealistic to suggest that users must run all containers without ele=
vated privileges.=C2=A0 That is why Singularity provides a simple, built-in=
 method to verify that containers are created by trusted entities before ru=
nning.=C2=A0 If a user runs an untrusted container as root, and it contains=
 an exploit like the one detailed in CVE-2019-5736, it will behave in much =
the same way with Singularity as the vulnerability detailed in runc.=C2=A0 =
Users should never run untrusted containers with root privileges.</div><div=
><br></div><div>Sylabs will continue to write patches to mitigate issues li=
ke CVE-2019-5736 in order to help prevent accidental damage, but there are =
no explicit or implied guarantees when running untrusted containers with el=
evated privileges.</div><div><br></div><div>Singularity=E2=80=99s philosoph=
y is that it is inherently unsafe to run untrusted containers with elevated=
 permissions.=C2=A0 Users must either 1) run containers without any elevate=
d privileges, or 2) verify and trust the entity that originally created the=
 container before running with privileges.=C2=A0 The Singularity runtime an=
d file format facilitate both of these requirements.=C2=A0 By default, the =
Singularity runtime is executed without any elevated privileges.=C2=A0 And =
the Singularity Image Format (SIF) allows an entity to cryptographically si=
gn a container, creating a signature block within the SIF file.=C2=A0 Users=
 can then verify that the container they obtained is a bit-for-bit reproduc=
tion of the container that was originally signed.=C2=A0 As long as the user=
 knows and trusts the entity that signed the container, they can run the co=
ntainer confidently with elevated privileges.=C2=A0 Critically, the trust m=
echanism exists within the SIF file.=C2=A0 So even if the container was com=
promised, and malicious parties tampered with the contents, the end user wo=
uld see that the container they downloaded was no longer properly signed.</=
div><div><br></div><div>Security is not a checkbox that one can tick and fo=
rget.=C2=A0 It=E2=80=99s an ongoing process that begins with software archi=
tecture, and continues all the way through to ongoing security practices.=
=C2=A0 In addition to ensuring that containers are run without elevated pri=
vileges where appropriate, and that containers are produced by trusted sour=
ces, users must monitor their containers for newly discovered vulnerabiliti=
es and update when necessary just as they would with any other software.=C2=
=A0 Sylabs is constantly probing to find and patch vulnerabilities within S=
ingularity, and will continue to do so.</div></div></blockquote></div>
------=_Part_489_331914762.1550167766509--

------=_Part_488_59856061.1550167766508--
