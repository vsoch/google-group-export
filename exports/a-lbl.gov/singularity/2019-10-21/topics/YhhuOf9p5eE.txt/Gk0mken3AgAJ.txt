X-Received: by 10.99.66.4 with SMTP id p4mr5371745pga.148.1495226588233;
        Fri, 19 May 2017 13:43:08 -0700 (PDT)
X-BeenThere: singularity@lbl.gov
Received: by 10.107.35.203 with SMTP id j194ls3041133ioj.18.gmail; Fri, 19 May
 2017 13:43:07 -0700 (PDT)
X-Received: by 10.98.159.135 with SMTP id v7mr12354867pfk.57.1495226587417;
        Fri, 19 May 2017 13:43:07 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1495226587; cv=none;
        d=google.com; s=arc-20160816;
        b=kFOdd8yaReCqrBmMZityj5peLkWPqTg3BvG1rjF783pclZtxnTRw0VWbcZyhsgC/MY
         JWRHzaPu4499nGkIuxNQ5v31jIZ14RfMwZZEuO6cbCYYvfkz/XecoYIEY2vYBzVHVZou
         RZywcvGF5jmIUshD2fE+rY/Igp8CPLH8FUzTdpqOXogN415JEprziCGn3iEXT23RIW9G
         Ww/s0Ycss8W4siXW9xvUt43fJqu+Ys5ykpH2EQ04OLacH70N6aija0gmtFxzVD01SYN8
         OpPMBAyF6Ab4TGeKciYP7EgJB9Adux8xdXqROmvhOb3YMKOzzEELFxnCFSRjY2c+tPIC
         +nNA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=cc:to:subject:message-id:date:from:references:in-reply-to
         :mime-version:dkim-signature:arc-authentication-results;
        bh=OvQQjV+fdup50pzuiQguNMQ9BOnDP1zBkeN0SNddOa0=;
        b=C9a0mztjoRlyJ+/+7Ym2gEJlxXLUkIn0b1WJhCUam40IbZ41ULChexDHL8sOQetCPe
         r06I0VXaV1iOy6hQBN/OdUFLN4NMQjks0OGq97Vd9xM5ytXgHhDrKM8B/womzAM5UxxF
         amdEvJWtNf/BxPZFVWYFyCtoBxDoU+JNW7D/V5EKdILpVrEQDYyYyHaFofTITHFXxv+g
         OoFLRtv39WjHiAmL0yjKcCwUtzM8Y9I22KwGvVOaU/mN281gbC7r+Fyu9Li0JJ3y2Tu4
         yOIedGCOLL9yuXYJb9J2gALEjkR+Odg2Qapx0zLfr4MmoFcZbqxUQYrT/wVFvY1lIYNz
         oVbg==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass head...@gmail.com;
       spf=pass (google.com: domain of vso...@gmail.com designates 209.85.217.178 as permitted sender) smtp.mailfrom=vso...@gmail.com
Return-Path: <vso...@gmail.com>
Received: from fe4.lbl.gov (fe4.lbl.gov. [128.3.41.71])
        by mx.google.com with ESMTP id s26si9455236pge.221.2017.05.19.13.43.07
        for <singu...@lbl.gov>;
        Fri, 19 May 2017 13:43:07 -0700 (PDT)
Received-SPF: pass (google.com: domain of vso...@gmail.com designates 209.85.217.178 as permitted sender) client-ip=209.85.217.178;
Authentication-Results: mx.google.com;
       dkim=pass head...@gmail.com;
       spf=pass (google.com: domain of vso...@gmail.com designates 209.85.217.178 as permitted sender) smtp.mailfrom=vso...@gmail.com
X-Ironport-SBRS: 2.7
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A2FYAABnVx9Zf7LZVdFZAxoBAQEBAgEBA?=
 =?us-ascii?q?QEIAQEBARUBAQEBAgEBAQEIAQEBAYMBgQuBDAeDXwiBNohikXGQPoU4gUxDIQE?=
 =?us-ascii?q?KgW9TgzYChXYHPxgBAQEBAQEBAQEBAQIQAQEJCwsIJjGCMwUCAxoBBQQELBopA?=
 =?us-ascii?q?ysBAQEBAQEBAQEBAQEBAQEBGgINHgQ7AQEBAQIBIx0BDQ4dAQMBCwYFCwYDAQI?=
 =?us-ascii?q?BIwcCAiEBAQ4DAQUBCwkIDgcEARoCBIgzgTcBAw0IBQmkBT+MB4IEBQEcgwoFg?=
 =?us-ascii?q?1kKGScNVoMDAQEBAQEBBAEBAQEBAQEBARcCBhKKOoEMglSBYBIBPAEMGoJLgkE?=
 =?us-ascii?q?fBZ1aO4cdhyyEU5FuSIpnh08UH4EVDxCBBTMLcBVGGYQlKkSBZiQ2AQaGZ0eBZ?=
 =?us-ascii?q?wEBAQ?=
X-IronPort-AV: E=Sophos;i="5.38,365,1491289200"; 
   d="scan'208,217";a="75004154"
Received: from mail-ua0-f178.google.com ([209.85.217.178])
  by fe4.lbl.gov with ESMTP; 19 May 2017 13:43:05 -0700
Received: by mail-ua0-f178.google.com with SMTP id y4so26436694uay.2
        for <singu...@lbl.gov>; Fri, 19 May 2017 13:43:05 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc;
        bh=OvQQjV+fdup50pzuiQguNMQ9BOnDP1zBkeN0SNddOa0=;
        b=ODhzbcy2YtU5sIssLEKQuoLDV417ndB8T0RyWrdvEBTNi7iz+aBmNFFNVgxLFPhg16
         6peq0/brrfoELYp/Q9XRVhjGEXHDBJyYIY3qPnrykGVryNtHvu/ZBlh4oyED4pKc49t+
         a+uYUL8D7u0w4ks8fkqGmrRuW+/Oy1kUAqhT9uxkHS7Ih8VXm9Z9v4rIcBImL3wQMy3O
         WGEhcH0xLB/m7Nz/62E1mHxVUqxRSL8ZsmuKgqoSpYr3P8Qy+G3vfQqphBwO1D1YfQZ7
         sCxN6wYOkGTnTOYwgnUReqV7eG9SIjxJtvNKe+7wEYdB39dQQUZQijQrzrUXZS9On8Lt
         Hasg==
X-Gm-Message-State: AODbwcDpvWKQdY+pXSzWvwdYrG1JOT6NwMM/64lCK9hWTujxEagXsQp3
	ww6it2LY8srMrRvyZtbr+Ro84NEHhg==
X-Received: by 10.176.65.2 with SMTP id j2mr4634535uad.65.1495226585044; Fri,
 19 May 2017 13:43:05 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.103.48.143 with HTTP; Fri, 19 May 2017 13:42:44 -0700 (PDT)
In-Reply-To: <5941AB13-7F06-46B0-8E4C-E7896C700A84@llnl.gov>
References: <singularityware/singularity/issues/667@github.com>
 <singularityware/singularity/issues/667/302778205@github.com>
 <CAM=pu+JeoVW557QiLF--t=O8O-dWPzjNeMs2f0rUvz=UFFbFtg@mail.gmail.com> <5941AB13-7F06-46B0-8E4C-E7896C700A84@llnl.gov>
From: vanessa s <vso...@gmail.com>
Date: Fri, 19 May 2017 16:42:44 -0400
Message-ID: <CAM=pu+JgFEhe+DB6PJb3fsRL7mp3i11GPoazFUDH7F2uW38=3w@mail.gmail.com>
Subject: Re: [Singularity] Re: [singularityware/singularity] [Feautre_Request]
 Call shub from a def file (#667)
To: singularity@lbl.gov
Cc: "singularityware/singularity" <re...@reply.github.com>, 
	"singularityware/singularity" <singu...@noreply.github.com>, Comment <com...@noreply.github.com>
Content-Type: multipart/alternative; boundary="94eb2c12301675df6a054fe6918c"

--94eb2c12301675df6a054fe6918c
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

I think your easiest case (for now) would be to harness docker - make a
base that is a docker image, and then use that as a base for additional
apps. This is functionality that is currently supported, and it's pretty
trivial to write a Dockerfile and have it built on the hub Eg:

Boostrap: docker
> From zane/base-image
>


> %post
> git clone https:www.github.com/zane/another-module
> cd another-module
> ... etc
>

The original image would be cached as docker layers, and easily reused
without needing to build.

On Fri, May 19, 2017 at 4:37 PM, Goldstone, Robin J. <golds...@llnl.gov>
wrote:

> Vanessa =E2=80=93 I agree there are a number of interesting things to con=
sider
> along the lines of composability.  But that aside, I am wondering if ther=
e
> is a more straightforward solution for Zane.  If the issue is the time it
> takes to rebuild the base image, why not just write a def file that creat=
es
> an OS image and nothing else.  Then just make multiple copies of that ima=
ge
> then make corresponding def files that add in your app install in the %po=
st
> section.
>
> Example: create =E2=80=9Cbase.def=E2=80=9D file that defines a basic OS i=
nstall. Something
> like this:
> BootStrap: debootstrap
> OSVersion: trusty
> MirrorURL: http://us.archive.ubuntu.com/ubuntu/
>
> Create the container and boostrap it:
> sudo singularity create =E2=80=93s 1024 base.img
> sudo singularity bootstrap base.img base.def
>
> When it is done, just make a copy of it:
> cp base.img app1.img
>
> Now create app1.def with appropriate %post section to install app1 e.g.
> BootStrap: debootstrap
> OSVersion: trusty
> MirrorURL: http://us.archive.ubuntu.com/ubuntu/
>
> %post
>     cd /tmp
>     git clone https://github.com/open-mpi/ompi.git
>     etc=E2=80=A6
>
> Even though you still have the code in there to bootstrap the OS,
> Singularity will find the OS is already there so it will just execute the
> %post section.  You can make multiple copies of base.img and create
> corresponding def files to customize them differently in this way.
>
> Is that the kind of thing you were looking for?
>
> Regards,
> Robin G.
>
>
>
> From: vanessa s <vso...@gmail.com>
> Reply-To: "singu...@lbl.gov" <singu...@lbl.gov>
> Date: Friday, May 19, 2017 at 12:39 PM
> To: singularityware/singularity <reply+000c6cf252b5a099476d2b20f987c3
> 2e441469693a60e79b92cf00000...@reply.github.com>,
> "singu...@lbl.gov" <singu...@lbl.gov>
> Cc: singularityware/singularity <singu...@noreply.github.com>, Comment
> <com...@noreply.github.com>
> Subject: [Singularity] Re: [singularityware/singularity] [Feautre_Request=
]
> Call shub from a def file (#667)
>
> Hi Zane,
>
> This is a very important question, but also a complicated one.  I'm
> including this to the list so others can think about it too. When we star=
t
> to talk about importing other images, this asks the question "what
> encompasses an image?" The Docker approach is to have images composed of
> layers, which isn't an approach best fit for science because it means tha=
t
> you can potentially have containers with missing dependencies, and you
> cannot trust that you image A is exactly what the author designed it to b=
e.
> It's not the sparsest solution, but with a Singularity image being "an
> entire thing" we can ensure that, years down the road, if you find a
> container, you can do a checksum with some unique id provided by the auth=
or
> and verify it is exactly what it is supposed to be. This isn't a problem =
of
> "how do we implement this" - there are several options there, none of whi=
ch
> are technically hard. We could take an approach and move things around li=
ke
> tar balls (essentially what Docker does, and what we do to support it). B=
ut
> having containers depend on other containers starts to get messy very
> quickly, because it moves away from our current model toward something th=
at
> looks more like Docker.
>
> However, this is a really important question, not only because we would
> want to have some ability to put pieces together like legos in a larger
> orchestration, but also because the design schema that we come up with is
> going to drive how people build their scientific tools. If we provide
> support for a model that allows overlays and combining things, that
> encourages less ideal practice where things are more likely to break
> because of dependencies. The approach I believe we are going to test firs=
t
> (not with 2.3, of course, but maybe 2.4) is to think of how a lot of this
> functionality could be addressed with simple mounting. You could think of
> this like a data containers, meaning that you can define how two containe=
rs
> are mounted together, but each in isolation is complete to do what it was
> intended to do. This would support software that could be mounted and run
> with this sort of fashion, but again, the more fingers that the software
> needs to stick into the other container, the harder it would get.
>
> Again from the reproducibility standpoint, with the current landscape we
> are going to start to see a LOT of containers. Very soon, if not already.
> For example, when you browse around and find 150 containers called
> tensorflow, how do you know which one is best? How are they
> different/similar? my thinking is that our first task should be efforts t=
o
> organize and compare these containers. We can then have easy ways to
> reliably say "we know this group is similar in having tensorflow for
> versions x,y,z, and now we can run to compare how this variable (version)
> influences our result." and then we can make recommendations for differen=
t
> configurations of things and application goals, and (hopefully) narrow do=
wn
> the landscape to point out the better images of the bunch. This is
> different from a Docker/Github approach, where obviously the entities wou=
ld
> want to incentivize you to make as many containers/repos as possible.
>
> Anyway - trust that this question is very important. I don't think the
> right thing is to just dump containers into one another, but some other
> solution that supports and encourages reproducibility, while not breaking
> trust in provided containers.
>
> Best,
>
> Vanessa
>
> On Fri, May 19, 2017 at 2:31 PM, Zane Westover <notifi...@github.com>
> wrote:
> Is there a way to have a LOCAL base singularity image to use as the
> starting point of others? For instance:
> BootStrap: singularity
> image_path: xxx # Path and filename if Image_id on local host
> I have several containers that I want to build that all have a large file
> base in common. It takes HOURS to build the base image and would only be =
a
> few minutes to do the last piece for each specific application. Instead,
> currently my definition files are all 98% identical except for the fact
> that they are inevitably 0% identical.
> =E2=80=94
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub, or mute the thread.
>
>
>
>
> --
> Vanessa Villamia Sochat
> Stanford University '16
> (603) 321-0676
> --
> You received this message because you are subscribed to the Google Groups
> "singularity" group.
> To unsubscribe from this group and stop receiving emails from it, send an
> email to singu...@lbl.gov.
>
>
>
>
> --
> You received this message because you are subscribed to the Google Groups
> "singularity" group.
> To unsubscribe from this group and stop receiving emails from it, send an
> email to singu...@lbl.gov.
>



--=20
Vanessa Villamia Sochat
Stanford University '16
(603) 321-0676

--94eb2c12301675df6a054fe6918c
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">I think your easiest case (for now) would be to harness do=
cker - make a base that is a docker image, and then use that as a base for =
additional apps. This is functionality that is currently supported, and it&=
#39;s pretty trivial to write a Dockerfile and have it built on the hub Eg:=
<div><br></div><blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0p=
x 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">Boostrap: =
docker<br>From zane/base-image<br></blockquote><div>=C2=A0</div><blockquote=
 class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px so=
lid rgb(204,204,204);padding-left:1ex">%post<br>git clone https:<a href=3D"=
http://www.github.com/zane/another-module">www.github.com/zane/another-modu=
le</a><br>cd another-module<br>... etc<br></blockquote><div><br></div><div>=
The original image would be cached as docker layers, and easily reused with=
out needing to build.</div></div><div class=3D"gmail_extra"><br><div class=
=3D"gmail_quote">On Fri, May 19, 2017 at 4:37 PM, Goldstone, Robin J. <span=
 dir=3D"ltr">&lt;<a href=3D"mailto:golds...@llnl.gov" target=3D"_blank">gol=
ds...@llnl.gov</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" s=
tyle=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">Vane=
ssa =E2=80=93 I agree there are a number of interesting things to consider =
along the lines of composability.=C2=A0 But that aside, I am wondering if t=
here is a more straightforward solution for Zane.=C2=A0 If the issue is the=
 time it takes to rebuild the base image, why not just write a def file tha=
t creates an OS image and nothing else.=C2=A0 Then just make multiple copie=
s of that image then make corresponding def files that add in your app inst=
all in the %post section.<br>
<br>
Example: create =E2=80=9Cbase.def=E2=80=9D file that defines a basic OS ins=
tall. Something like this:<br>
BootStrap: debootstrap<br>
OSVersion: trusty<br>
MirrorURL: <a href=3D"http://us.archive.ubuntu.com/ubuntu/" rel=3D"noreferr=
er" target=3D"_blank">http://us.archive.ubuntu.com/<wbr>ubuntu/</a><br>
<br>
Create the container and boostrap it:<br>
sudo singularity create =E2=80=93s 1024 base.img<br>
sudo singularity bootstrap base.img base.def<br>
<br>
When it is done, just make a copy of it:<br>
cp base.img app1.img<br>
<br>
Now create app1.def with appropriate %post section to install app1 e.g.<br>
BootStrap: debootstrap<br>
OSVersion: trusty<br>
MirrorURL: <a href=3D"http://us.archive.ubuntu.com/ubuntu/" rel=3D"noreferr=
er" target=3D"_blank">http://us.archive.ubuntu.com/<wbr>ubuntu/</a><br>
<br>
%post<br>
=C2=A0 =C2=A0 cd /tmp<br>
=C2=A0 =C2=A0 git clone <a href=3D"https://github.com/open-mpi/ompi.git" re=
l=3D"noreferrer" target=3D"_blank">https://github.com/open-mpi/<wbr>ompi.gi=
t</a><br>
=C2=A0 =C2=A0 etc=E2=80=A6<br>
<br>
Even though you still have the code in there to bootstrap the OS, Singulari=
ty will find the OS is already there so it will just execute the %post sect=
ion.=C2=A0 You can make multiple copies of base.img and create correspondin=
g def files to customize them differently in this way.<br>
<br>
Is that the kind of thing you were looking for?<br>
<br>
Regards,<br>
Robin G.<br>
<br>
<br>
<br>
From: vanessa s &lt;<a href=3D"mailto:vso...@gmail.com">vso...@gmail.com</a=
>&gt;<br>
Reply-To: &quot;<a href=3D"mailto:singu...@lbl.gov">singu...@lbl.gov</a>&qu=
ot; &lt;<a href=3D"mailto:singu...@lbl.gov">singu...@lbl.gov</a>&gt;<br>
Date: Friday, May 19, 2017 at 12:39 PM<br>
To: singularityware/singularity &lt;<a href=3D"mailto:reply%2B000c6cf252b5a=
099476d2b20f987c32e441469...@reply.github.com">reply+<wbr>000c6cf252b5a0994=
76d2b20f987c3<wbr>2e441469693a60e79b92cf00000001<wbr>1536fbfb92a169ce0d98c1=
36@<wbr>reply.github.com</a>&gt;, &quot;<a href=3D"mailto:singu...@lbl.gov"=
>singu...@lbl.gov</a>&quot; &lt;<a href=3D"mailto:singu...@lbl.gov">singu..=
.@lbl.gov</a>&gt;<br>
Cc: singularityware/singularity &lt;<a href=3D"mailto:singu...@noreply.gith=
ub.com">singularity@noreply.github.<wbr>com</a>&gt;, Comment &lt;<a href=3D=
"mailto:com...@noreply.github.com">com...@noreply.github.com</a>&gt;<br>
Subject: [Singularity] Re: [singularityware/singularity] [Feautre_Request] =
Call shub from a def file (#667)<br>
<span class=3D"im HOEnZb"><br>
Hi Zane,=C2=A0<br>
<br>
This is a very important question, but also a complicated one.=C2=A0 I&#39;=
m including this to the list so others can think about it too. When we star=
t to talk about importing other images, this asks the question &quot;what e=
ncompasses an image?&quot; The Docker approach is to have images composed o=
f layers, which isn&#39;t an approach best fit for science because it means=
 that you can potentially have containers with missing dependencies, and yo=
u cannot trust that you image A is exactly what the author designed it to b=
e. It&#39;s not the sparsest solution, but with a Singularity image being &=
quot;an entire thing&quot; we can ensure that, years down the road, if you =
find a container, you can do a checksum with some unique id provided by the=
 author and verify it is exactly what it is supposed to be. This isn&#39;t =
a problem of &quot;how do we implement this&quot; - there are several optio=
ns there, none of which are technically hard. We could take an approach and=
 move things around like tar balls (essentially what Docker does, and what =
we do to support it). But having containers depend on other containers star=
ts to get messy very quickly, because it moves away from our current model =
toward something that looks more like Docker.<br>
<br>
However, this is a really important question, not only because we would wan=
t to have some ability to put pieces together like legos in a larger orches=
tration, but also because the design schema that we come up with is going t=
o drive how people build their scientific tools. If we provide support for =
a model that allows overlays and combining things, that encourages less ide=
al practice where things are more likely to break because of dependencies. =
The approach I believe we are going to test first (not with 2.3, of course,=
 but maybe 2.4) is to think of how a lot of this functionality could be add=
ressed with simple mounting. You could think of this like a data containers=
, meaning that you can define how two containers are mounted together, but =
each in isolation is complete to do what it was intended to do. This would =
support software that could be mounted and run with this sort of fashion, b=
ut again, the more fingers that the software needs to stick into the other =
container, the harder it would get.<br>
<br>
Again from the reproducibility standpoint, with the current landscape we ar=
e going to start to see a LOT of containers. Very soon, if not already. For=
 example, when you browse around and find 150 containers called tensorflow,=
 how do you know which one is best? How are they different/similar? my thin=
king is that our first task should be efforts to organize and compare these=
 containers. We can then have easy ways to reliably say &quot;we know this =
group is similar in having tensorflow for versions x,y,z, and now we can ru=
n to compare how this variable (version) influences our result.&quot; and t=
hen we can make recommendations for different configurations of things and =
application goals, and (hopefully) narrow down the landscape to point out t=
he better images of the bunch. This is different from a Docker/Github appro=
ach, where obviously the entities would want to incentivize you to make as =
many containers/repos as possible.<br>
=C2=A0<br>
Anyway - trust that this question is very important. I don&#39;t think the =
right thing is to just dump containers into one another, but some other sol=
ution that supports and encourages reproducibility, while not breaking trus=
t in provided containers.<br>
<br>
Best,<br>
<br>
Vanessa<br>
<br>
On Fri, May 19, 2017 at 2:31 PM, Zane Westover &lt;<a href=3D"mailto:notifi=
...@github.com">notifi...@github.com</a>&gt; wrote:<br>
Is there a way to have a LOCAL base singularity image to use as the startin=
g point of others? For instance:<br>
BootStrap: singularity<br>
image_path: xxx # Path and filename if Image_id on local host<br>
I have several containers that I want to build that all have a large file b=
ase in common. It takes HOURS to build the base image and would only be a f=
ew minutes to do the last piece for each specific application. Instead, cur=
rently my definition files are all 98% identical except for the fact that t=
hey are inevitably 0% identical.<br>
=E2=80=94<br>
You are receiving this because you commented.<br>
Reply to this email directly, view it on GitHub, or mute the thread.<br>
<br>
<br>
<br>
<br>
</span><div class=3D"HOEnZb"><div class=3D"h5">--<br>
Vanessa Villamia Sochat<br>
Stanford University &#39;16<br>
<a href=3D"tel:%28603%29%20321-0676" value=3D"+16033210676">(603) 321-0676<=
/a><br>
</div></div><span class=3D"HOEnZb"><font color=3D"#888888">--<br>
You received this message because you are subscribed to the Google Groups &=
quot;singularity&quot; group.<br>
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to <a href=3D"mailto:singularity%...@lbl.gov">singularity+unsubscribe@=
lbl.<wbr>gov</a>.<br>
<br>
<br>
<br>
<br>
--<br>
You received this message because you are subscribed to the Google Groups &=
quot;singularity&quot; group.<br>
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to <a href=3D"mailto:singularity%...@lbl.gov">singularity+unsubscribe@=
lbl.<wbr>gov</a>.<br>
</font></span></blockquote></div><br><br clear=3D"all"><div><br></div>-- <b=
r><div class=3D"gmail_signature" data-smartmail=3D"gmail_signature">Vanessa=
 Villamia Sochat<br>Stanford University &#39;16<br><div><div><div>(603) 321=
-0676</div></div></div></div>
</div>

--94eb2c12301675df6a054fe6918c--
