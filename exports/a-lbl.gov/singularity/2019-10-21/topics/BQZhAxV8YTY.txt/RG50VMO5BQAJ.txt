X-Received: by 2002:a17:902:6bcc:: with SMTP id m12mr2341058plt.37.1551887377099;
        Wed, 06 Mar 2019 07:49:37 -0800 (PST)
X-BeenThere: singularity@lbl.gov
Received: by 2002:a63:8f45:: with SMTP id r5ls800232pgn.8.gmail; Wed, 06 Mar
 2019 07:49:35 -0800 (PST)
X-Received: by 2002:aa7:9211:: with SMTP id 17mr7792417pfo.220.1551887375719;
        Wed, 06 Mar 2019 07:49:35 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1551887375; cv=none;
        d=google.com; s=arc-20160816;
        b=PL7ptQYbaPQssqYCzyy5MgcuLFy66JBAQ9TWxYdHviGBhZeAJaTgILjWtxr98n/XFj
         Q31/sJa39LDmWJHW68cUlWPhfpXxwZA9+ArhJOdCkO+hFJKIJK24mZuM9/44Ubt16sOA
         jYRAS2tZrI1tXetK+LBb+ibBt1a08Iu6KE8EtLzlzb73jv3QFMJB0pcDUSVrd+W/O6vC
         zVubZLVs2kQSxX9XAJ5OpjK5W+BOKLktCY+K0NLU24RWcV+r/h0eUxQhamrYS1028l4C
         d0V1JB/1Q4C0fSNXTP61MqbsAiGGtqnm4SP/LtQOC/kLtHR6l3LfmoKcC+hNcK8UyUFH
         GIPA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=to:subject:message-id:date:from:in-reply-to:references:mime-version
         :dkim-signature;
        bh=fgbwwSLl92JCMV1MZFj89eD/i4MI9dG9w47C84DWIYs=;
        b=DdIQprkt0FcifPpGFCTDCl9/CglCNgFSa5oPqNTGTVR55vgkv38L+3xONdPgd5QcPf
         n5vqUa8LQ42ysaAoLRQBE6srZfOIcbJlgpBU/zSud2oi5ATLHcRAbkRY+8dPQHC/xq1O
         E8GtUv4vhqxn2BvBzktI4VFhUCCQsJ7D0vQOCR3bzPXW6Qd+qVlXBwiv/exeMNOheql+
         DN2TXQCsLZ3uzZ9ZNJTcQx0ScA1qje9PgttG2Tw7b+vbSx5ytG7pfjKTXplWnu//Rk66
         frR8XsJ5pN7AMF91/inDu2LzZgH8E8kw6y1LHAVA0K12Dg0uYoM/COEErYtimqW2kVCu
         dHFA==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass head...@sylabs.io header.s=google header.b="S2YHm/uy";
       spf=pass (google.com: domain of i...@sylabs.io designates 209.85.128.48 as permitted sender) smtp.mailfrom=i...@sylabs.io
Return-Path: <i...@sylabs.io>
Received: from fe3.lbl.gov (fe3.lbl.gov. [131.243.228.52])
        by mx.google.com with ESMTP id p3si1763795plb.103.2019.03.06.07.49.35
        for <singu...@lbl.gov>;
        Wed, 06 Mar 2019 07:49:35 -0800 (PST)
Received-SPF: pass (google.com: domain of i...@sylabs.io designates 209.85.128.48 as permitted sender) client-ip=209.85.128.48;
Authentication-Results: mx.google.com;
       dkim=pass head...@sylabs.io header.s=google header.b="S2YHm/uy";
       spf=pass (google.com: domain of i...@sylabs.io designates 209.85.128.48 as permitted sender) smtp.mailfrom=i...@sylabs.io
X-Ironport-SBRS: 3.5
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A2EfCQAI639chzCAVdFkHQEBBQEHBQGBZ?=
 =?us-ascii?q?YEOWIESgQMnhAEHcC2CLZAbgg2JLo8JgRADGDgEJQEKC4ECR4IvRgKEMiI4EgE?=
 =?us-ascii?q?BAwEBAwEDAgEBAhABAQEIDQkIKSMMgj8CAwIBBAEBBQMDAQEMAQMKBE07LwEBA?=
 =?us-ascii?q?QEBAQEBAQEBAQEBAQEaAg0mGCUBAQEDARoJBBkBAQcFGQ0GBAsLCwoDIAoCAiE?=
 =?us-ascii?q?BDwMBBQEcDgcEARoCBIMBASYBgTYDDQgFCp88PIoscXwzH4JZAQEFdDwBE0GCe?=
 =?us-ascii?q?w2CFggSgR0BhFmGTxeBf4NuNYJXRwKBKQQBARIBTIJdgjUihzuCUwoJhkqBB1y?=
 =?us-ascii?q?REDMJgkGEQkaDOz+DPUKDPhmTL48+gRCBMIdiAYNXMIE9VzBxTSwMbAaCNQmCA?=
 =?us-ascii?q?RqBCQEJgkGCZIgNJDABAQEBDIs3DxcELIF3AQE?=
X-IronPort-AV: E=Sophos;i="5.58,448,1544515200"; 
   d="scan'208,217";a="146067402"
Received: from mail-wm1-f48.google.com ([209.85.128.48])
  by fe3.lbl.gov with ESMTP; 06 Mar 2019 07:49:32 -0800
Received: by mail-wm1-f48.google.com with SMTP id f3so6427856wmj.4
        for <singu...@lbl.gov>; Wed, 06 Mar 2019 07:49:32 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=sylabs.io; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to;
        bh=fgbwwSLl92JCMV1MZFj89eD/i4MI9dG9w47C84DWIYs=;
        b=S2YHm/uyMIIfWa6Jg72px+FzP2a9a1CPiGt09LdEWpoVyyiIGVwP3ez1WJWr8/kuY4
         61KErjMZrgUmmxmvjjUIsZIiAgsP3cMNd7yH173CSg4E+/wIFfOR4Jbu5V8MYU87ae4n
         nhdzT6Snz72zbz1xX+1rWL3QAXcs7DQH0PhnR+NBBtVpzXXoTJPse0R5G2/4mmnAvZQi
         mixGpy03Y/TxBReEVGjPmRnsQw8HrrA9r2dYvzALA96iSbX7JqaDadBCeQJCxqumnN3Z
         JLYzxxfKv2TqqJDBFUoWsyvBiYNwtKZDVQjO2R4R4O5UtIiyTlKqdR8/i4BOsCvIFzVo
         mUhw==
X-Gm-Message-State: APjAAAX87agOIEUdMW4xVN/FjjgWRHXNZafZuUti64S2bdQFnYGlXzeU
	3/AmO/fV6RwOkTZg/6OeEpfECsh7M+q9uFnW9tnhc/9i9QY=
X-Received: by 2002:a1c:a007:: with SMTP id j7mr2706760wme.25.1551887370704;
 Wed, 06 Mar 2019 07:49:30 -0800 (PST)
MIME-Version: 1.0
References: <7bb2ddd5-0de0-5bbd-0fa2-d60c36966e57@lal.in2p3.fr>
 <252104d3-a407-45cd-a305-927355fb7492@lbl.gov> <edb27021-149e-00a0-f062-c2b8f2d64ede@lal.in2p3.fr>
 <CAN9aCedDzOTKHjBGNZppa0vm2hUj3xrFKTbab1pjThr+UdkhMA@mail.gmail.com>
In-Reply-To: <CAN9aCedDzOTKHjBGNZppa0vm2hUj3xrFKTbab1pjThr+UdkhMA@mail.gmail.com>
From: Ian Kaneshiro <i...@sylabs.io>
Date: Wed, 6 Mar 2019 10:48:54 -0500
Message-ID: <CAHNsURu1VFTAcUn0Tz1qXfP+Ajku4NZpAv0XoEPck10cgnWVrg@mail.gmail.com>
Subject: Re: [Singularity] Re: Thoughts from a Docker -> Singularity
 conversion attempt
To: singularity@lbl.gov
Content-Type: multipart/alternative; boundary="000000000000767f0805836eef70"

--000000000000767f0805836eef70
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

Morning Hadrien,

The definition you proposed would be valid, but it wouldn't have the
behavior you're looking for. Multiple %setup/%post/%test sections are
concatenated together and ran at the same time. The biggest advantage of
multistage builds is in the strive for smaller container images, which I
think is what you want to accomplish by installing and removing software in
multiple steps. A potential definition would look like this:

Bootstrap: docker
From: centos:7
Stage: devel


%setup
mkdir -p $SINGULARITY_ROOTFS/root/go/src/hello


%files
hello.go /root/go/src/hello/hello.go


%post
yum install wget -y

wget https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz
tar -C /usr/local -xzf go1.10.3.linux-amd64.tar.gz
export PATH=3D$PATH:/usr/local/go/bin

cd /root/go/src/hello
go build
./hello



Bootstrap: docker
From: centos:7


%files from devel
/root/go/src/hello/hello /bin/hello

%runscript
hello

This will allow someone to install and build software in one or more
development containers and move it to a final production container where
those build tools aren't installed. Using this method, roughly follows the
idea behind your proposed definition but without the need to manually
remove such tools.

Originally I was thinking of something like `%post --base-env` or something
to that extent. After giving this more thought, I think this will be too
confusing because there is already precedent for using flags with post to
specify bash options, see https://github.com/sylabs/singularity/issues/2656=
.
Another option would be insert an environment variable in post like
`SINGULARITY_ENVIRONMENT` called something like
`SINGULARITY_BASE_ENVIRONMENT` that a user can easily source in %post with
`source $SINGULARITY_BASE_ENVIRONMENT` in order to get the base containers
environment.

I think we can do something similar to preserve the environment between
%post and %test at build time, though it's important to note that the test
section can be run directly from the CLI once the container is built, so
having behavior be dictated by the post environment could cause problems
when test is run after the build if the script is dependent on those
variables.

With respect to build flags, can you elaborate more on the last two
bullets? I'm not exactly sure what behavior you're interested in having. I
think multistage builds will allow the first to be addressed.

   - A typical use case is building an image twice, once with debug
>       software builds (for debugging) and once with release builds (for e=
nd usage
>       and profiling)
>    - Another use case is controlling from remote which version of some
>       software gets built, and to synchronize that with the output image'=
s file
>       name.
>    - A third use case is synchronizing the directory where image files
>       are written across multiple Singularity definition file, and making=
 it
>       externally configurable.
>

Best,
Ian

On Tue, Mar 5, 2019 at 12:26 PM David Godlove <davidg...@gmail.com>
wrote:

> This is a really groovy thread.  It reminds me why I love working on an
> open source project.
>
> On Tue, Mar 5, 2019 at 9:33 AM Hadrien Grasland <gras...@lal.in2p3.fr>
> wrote:
>
>> Dear Lars,
>>
>> Thanks for your suggestion! Speaking personally, I am a bit of an
>> infrastructure minimalist, so altough I like Singularity's model, it wou=
ld
>> not be attractive enough to motivate me of migrating from a two-layer
>> infrastructure (spack + docker) to a five-layer infrastructure (spack +
>> docker + hpc-container-maker + docker2singularity + singularity). Howeve=
r,
>> I will keep these links around for the benefit of colleagues of mine who=
 do
>> not share my opinions on these matters :)
>>
>> Hadrien
>>
>>
>> Le 05/03/2019 =C3=A0 09:39, Lars Bilke a =C3=A9crit :
>>
>> Dear Hadrien,
>>
>> I just want to draw your attention to the project hpc-container-maker
>> <https://github.com/NVIDIA/hpc-container-maker> which allows to script
>> container definitions with Python. It supports both Singularity and Dock=
er
>> output but I found creating Docker images with a subsequent conversion s=
tep
>> to Singularity (e.g. via docker2singularity
>> <https://github.com/singularityware/docker2singularity>) most useful for
>> development (by leveraging Dockers layer caching). I think a lot of your
>> issues can be solved by simple scripting the whole image definition proc=
ess.
>>
>> Best,
>> Lars
>>
>> Am Montag, 4. M=C3=A4rz 2019 16:34:56 UTC+1 schrieb Hadrien Grasland:
>>>
>>> Dear Singularity users,
>>>
>>> I've been packaging HEP software and development environments using a
>>> combination of Spack and Docker for a while.
>>>
>>>    - Spack gives me customizable and ergonomic software builds, with
>>>    automated dependency management and peaceful coexistence between dif=
ferent
>>>    build configurations.
>>>    - Docker gives me cross-OS binary + environment portability, and a
>>>    way to "freeze" a snapshot of my rolling Linux distribution of choic=
e in
>>>    order to momentarily prevent Spack from rebuilding everything over a=
nd over
>>>    again the way it loves to.
>>>
>>> This is what the end result currently looks like:
>>> https://github.com/HadrienG2/spack-based-docker .
>>>
>>> A problem with using Docker for this purpose, though, is that it does
>>> too much container/host isolation for my use case. I don't really care =
for
>>> Docker masquerading as a VM by hiding the host filesystem and processes
>>> from the container, but I do care about the cumbersome side of remember=
ing
>>> to bind mount everything, ending up with root-owned files in these bind
>>> mounts if I'm not very careful, and ptrace rights being taken away from=
 me
>>> unless I take care to pass the magical "I don't care, I trust this
>>> container" flags to the docker run command line. From this perspective,=
 I
>>> sometimes feel like I'm fighting Docker's cloud-oriented design a bit t=
oo
>>> much.
>>>
>>> Which is what led me to investigate Singularity, an experience which I
>>> now feel ready to report on.
>>> ------------------------------
>>>
>>> Having some previous bad experience from the Docker -> Singularity imag=
e
>>> conversion machinery, I decided for this attempt to try to stick with a
>>> pure Singularity workflow, without Docker getting in the way at any tim=
e.
>>> This was easier than expected: bootstrapping a zypper-based image actua=
lly
>>> proved very smooth.
>>>
>>> My feeling from translating my Docker recipes afterwards is that
>>> Singularity does deliver beautifully on the final image usability front
>>> (hurray for the simple CLI, ptrace privileges, proper file permissions,=
 and
>>> /home mounting by default), but feels quite a bit more painful than Doc=
ker
>>> on the image builder's side. Here are some particular pain points that =
I
>>> encountered, maybe they have some well-known solutions / workarounds ?
>>>
>>>    - I miss Docker's build arguments a lot.
>>>    - A typical use case is building an image twice, once with debug
>>>       software builds (for debugging) and once with release builds (for=
 end usage
>>>       and profiling)
>>>       - Another use case is controlling from remote which version of
>>>       some software gets built, and to synchronize that with the output=
 image's
>>>       file name.
>>>       - A third use case is synchronizing the directory where image
>>>       files are written across multiple Singularity definition file, an=
d making
>>>       it externally configurable.
>>>       - I appreciate Singuarity's attempt to cautiously separate build
>>>    environment from runtime environment, but find that it makes build
>>>    environment management difficult:
>>>       - I often have to write each environment-altering statement three
>>>       times, once in %post, once in %test, and once in ${SINGULARITY_EN=
VIRONMENT}
>>>       - Build environment not being carried over from one parent image
>>>       to a child image often makes me give up and just write my whole b=
uild setup
>>>       in ${SINGULARITY_ENVIRONMENT} so that I can source that at the be=
ginning of
>>>       the next image.
>>>       - %environment is almost never usable for me because most of the
>>>       time I need some environment to be set both for runtime and for c=
hild
>>>       images.
>>>       - The idea of separating a build in clear-cut %build, %post,
>>>    %test phases is nice in theory, but limiting for complex recipes
>>>       - The folder to which I want to copy files may be created during
>>>       %post, in which case I need to move files to a temporary director=
y during
>>>       %copy and re-move them later.
>>>       - Some tests can only be run at some stages during the build
>>>       process, because they rely on a build folder which must be cleane=
d up at
>>>       the end of the recipe.
>>>       - SINGULARITY_ENVIRONMENT not being sourced before %test is
>>>       painful and uncalled for.
>>>       - A replacement to Docker layers for build snapshots would be
>>>    much appreciated.
>>>       - I certainly don't miss the build performance/size vs recipe
>>>       readability compromise of Docker saving a layer after every RUN s=
tatement...
>>>       - ...but I do miss being able to quickly investigate a failed
>>>       build and restart it without going through my whole %post section=
 all over
>>>       again.
>>>
>>> In short, I would be longing for....
>>>
>>>    - A way to use some externally configurable environment in a
>>>    singularity definition file (including, and I guess that's the diffi=
cult
>>>    part, in the "From:" statement)
>>>    - An alternative to SINGULARITY_ENVIRONMENT for configuring build
>>>    environment instead of runtime environment
>>>    - A less hacky way to pass environment to childe images' build
>>>    recipes (may or may not be merged with the above)
>>>    - A way to check if tests are enabled in %post as a more flexible
>>>    alternative to the %test section
>>>       - ...and runtime environment being sourced before the %test
>>>       section begins.
>>>    - Faster / easier ways to debug failed Singularity builds than
>>>    modifying the recipe and restarting it from the beginning.
>>>
>>> ...but some of that may be an XY problem coming from my Docker user
>>> habits :)
>>>
>>> Cheers,
>>> Hadrien
>>>
>> --
>> You received this message because you are subscribed to the Google Group=
s
>> "singularity" group.
>> To unsubscribe from this group and stop receiving emails from it, send a=
n
>> email to singu...@lbl.gov.
>>
>> --
>> You received this message because you are subscribed to the Google Group=
s
>> "singularity" group.
>> To unsubscribe from this group and stop receiving emails from it, send a=
n
>> email to singu...@lbl.gov.
>>
> --
> You received this message because you are subscribed to the Google Groups
> "singularity" group.
> To unsubscribe from this group and stop receiving emails from it, send an
> email to singu...@lbl.gov.
>


--=20
Ian Kaneshiro
Software Engineer, Sylabs, Inc.
www.sylabs.io

--000000000000767f0805836eef70
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div dir=3D"ltr"><div>Morning Hadrien,</div><div><br></div=
><div>The definition you proposed would be valid, but it wouldn&#39;t have =
the behavior you&#39;re looking for. Multiple %setup/%post/%test sections a=
re concatenated together and ran at the same time. The biggest advantage of=
 multistage builds is in the strive for smaller container images, which I t=
hink is what you want to accomplish by installing and removing software in =
multiple steps. A potential definition would look like this:</div><div><br>=
</div><div>Bootstrap: docker</div><div>From: centos:7</div><div>Stage: deve=
l</div><div><br></div><div><br></div><div>%setup</div><div><span style=3D"w=
hite-space:pre">=09</span>mkdir -p $SINGULARITY_ROOTFS/root/go/src/hello</d=
iv><div><br></div><div><br></div><div>%files</div><div><span style=3D"white=
-space:pre">=09</span>hello.go /root/go/src/hello/hello.go</div><div><br></=
div><div><br></div><div>%post</div><div><span style=3D"white-space:pre">=09=
</span>yum install wget -y</div><div><br></div><div><span style=3D"white-sp=
ace:pre">=09</span>wget <a href=3D"https://dl.google.com/go/go1.10.3.linux-=
amd64.tar.gz">https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz</a></div=
><div><span style=3D"white-space:pre">=09</span>tar -C /usr/local -xzf go1.=
10.3.linux-amd64.tar.gz</div><div><span style=3D"white-space:pre">=09</span=
>export PATH=3D$PATH:/usr/local/go/bin</div><div><br></div><div><span style=
=3D"white-space:pre">=09</span>cd /root/go/src/hello</div><div><span style=
=3D"white-space:pre">=09</span>go build</div><div><span style=3D"white-spac=
e:pre">=09</span></div><div><span style=3D"white-space:pre">=09</span>./hel=
lo</div><div><br></div><div><br></div><div><br></div><div>Bootstrap: docker=
</div><div>From: centos:7</div><div><br></div><div><br></div><div>%files fr=
om devel</div><div><span style=3D"white-space:pre">=09</span>/root/go/src/h=
ello/hello /bin/hello</div><div><br></div><div>%runscript</div><div><span s=
tyle=3D"white-space:pre">=09</span>hello</div><div><br></div><div>This will=
 allow someone to install and build software in one or more development con=
tainers and move it to a final production container where those build tools=
 aren&#39;t installed. Using this method, roughly follows the idea behind y=
our proposed definition but without the need to manually remove such tools.=
</div><div><br></div><div>Originally I was thinking of something like `%pos=
t --base-env` or something to that extent. After giving this more thought, =
I think this will be too confusing because there is already precedent for u=
sing flags with post to specify bash options, see <a href=3D"https://github=
.com/sylabs/singularity/issues/2656">https://github.com/sylabs/singularity/=
issues/2656</a>. Another option would be insert an environment variable in =
post like `SINGULARITY_ENVIRONMENT` called something like `SINGULARITY_BASE=
_ENVIRONMENT` that a user can easily source in %post with `source $SINGULAR=
ITY_BASE_ENVIRONMENT` in order to get the base containers environment.</div=
><div><br></div><div>I think we can do something similar to preserve the en=
vironment between %post and %test at build time, though it&#39;s important =
to note that the test section can be run directly from the CLI once the con=
tainer is built, so having behavior be dictated by the post environment cou=
ld cause problems when test is run after the build if the script is depende=
nt on those variables.</div><div><br></div><div>With respect to build flags=
, can you elaborate more on the last two bullets? I&#39;m not exactly sure =
what behavior you&#39;re interested in having. I think multistage builds wi=
ll allow the first to be addressed.</div><div><ul><blockquote class=3D"gmai=
l_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,20=
4,204);padding-left:1ex"><ul><li style=3D"margin-left:15px">A typical use c=
ase is building an image twice, once with debug software builds (for debugg=
ing) and once with release builds (for end usage and profiling)</li></ul><u=
l><li style=3D"margin-left:15px">Another use case is controlling from remot=
e which version of some software gets built, and to synchronize that with t=
he output image&#39;s file name.</li></ul><ul><li style=3D"margin-left:15px=
">A third use case is synchronizing the directory where image files are wri=
tten across multiple Singularity definition file, and making it externally =
configurable.</li></ul></blockquote></ul></div><div>Best,</div><div>Ian</di=
v></div></div><br><div class=3D"gmail_quote"><div dir=3D"ltr" class=3D"gmai=
l_attr">On Tue, Mar 5, 2019 at 12:26 PM David Godlove &lt;<a href=3D"mailto=
:davidg...@gmail.com">davidg...@gmail.com</a>&gt; wrote:<br></div><blockquo=
te class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px =
solid rgb(204,204,204);padding-left:1ex"><div dir=3D"ltr">This is a really =
groovy thread.=C2=A0 It reminds me why I love working on an open source pro=
ject.=C2=A0=C2=A0</div><br><div class=3D"gmail_quote"><div dir=3D"ltr" clas=
s=3D"gmail_attr">On Tue, Mar 5, 2019 at 9:33 AM Hadrien Grasland &lt;<a hre=
f=3D"mailto:gras...@lal.in2p3.fr" target=3D"_blank">gras...@lal.in2p3.fr</a=
>&gt; wrote:<br></div><blockquote class=3D"gmail_quote" style=3D"margin:0px=
 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">
 =20
   =20
 =20
  <div bgcolor=3D"#FFFFFF">
    <p>Dear Lars,</p>
    <p>Thanks for your suggestion! Speaking personally, I am a bit of an
      infrastructure minimalist, so altough I like Singularity&#39;s model,
      it would not be attractive enough to motivate me of migrating from
      a two-layer infrastructure (spack + docker) to a five-layer
      infrastructure (spack + docker + hpc-container-maker +
      docker2singularity + singularity). However, I will keep these
      links around for the benefit of colleagues of mine who do not
      share my opinions on these matters :)</p>
    <p>Hadrien</p>
    <p><br>
    </p>
    <div class=3D"gmail-m_-3152860234471032459gmail-m_7596858960167937554mo=
z-cite-prefix">Le 05/03/2019 =C3=A0 09:39, Lars Bilke a
      =C3=A9crit=C2=A0:<br>
    </div>
    <blockquote type=3D"cite">
     =20
      <div dir=3D"ltr">Dear Hadrien,
        <div><br>
        </div>
        <div>I just want to draw your attention to the project <a href=3D"h=
ttps://github.com/NVIDIA/hpc-container-maker" target=3D"_blank">hpc-contain=
er-maker</a>=C2=A0which allows
          to script container definitions with Python. It supports both
          Singularity and Docker output but I found creating Docker
          images with a subsequent conversion step to Singularity (e.g.
          via <a href=3D"https://github.com/singularityware/docker2singular=
ity" target=3D"_blank">docker2singularity</a>) most useful
          for development (by leveraging Dockers layer caching). I think
          a lot of your issues can be solved by simple scripting the
          whole image definition process.</div>
        <div><br>
        </div>
        <div>Best,</div>
        <div>Lars<br>
          <br>
          Am Montag, 4. M=C3=A4rz 2019 16:34:56 UTC+1 schrieb Hadrien
          Grasland:
          <blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8=
ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">
            <div bgcolor=3D"#FFFFFF">
              <p>Dear Singularity users,</p>
              <p>I&#39;ve been packaging HEP software and development
                environments using a combination of Spack and Docker for
                a while.</p>
              <ul>
                <li>Spack gives me customizable and ergonomic software
                  builds, with automated dependency management and
                  peaceful coexistence between different build
                  configurations.</li>
                <li>Docker gives me cross-OS binary + environment
                  portability, and a way to &quot;freeze&quot; a snapshot o=
f my
                  rolling Linux distribution of choice in order to
                  momentarily prevent Spack from rebuilding everything
                  over and over again the way it loves to.</li>
              </ul>
              <p>This is what the end result currently looks like: <a href=
=3D"https://github.com/HadrienG2/spack-based-docker" rel=3D"nofollow" targe=
t=3D"_blank">https://github.com/HadrienG2/spack-based-docker</a>
                .</p>
              <p>A problem with using Docker for this purpose, though,
                is that it does too much container/host isolation for my
                use case. I don&#39;t really care for Docker masquerading a=
s
                a VM by hiding the host filesystem and processes from
                the container, but I do care about the cumbersome side
                of remembering to bind mount everything, ending up with
                root-owned files in these bind mounts if I&#39;m not very
                careful, and ptrace rights being taken away from me
                unless I take care to pass the magical &quot;I don&#39;t ca=
re, I
                trust this container&quot; flags to the docker run command
                line. From this perspective, I sometimes feel like I&#39;m
                fighting Docker&#39;s cloud-oriented design a bit too much.=
</p>
              <p>Which is what led me to investigate Singularity, an
                experience which I now feel ready to report on.</p>
              <hr width=3D"100%" size=3D"2">
              <p>Having some previous bad experience from the Docker
                -&gt; Singularity image conversion machinery, I decided
                for this attempt to try to stick with a pure Singularity
                workflow, without Docker getting in the way at any time.
                This was easier than expected: bootstrapping a
                zypper-based image actually proved very smooth.<br>
              </p>
              <p>My feeling from translating my Docker recipes
                afterwards is that Singularity does deliver beautifully
                on the final image usability front (hurray for the
                simple CLI, ptrace privileges, proper file permissions,
                and /home mounting by default), but feels quite a bit
                more painful than Docker on the image builder&#39;s side.
                Here are some particular pain points that I encountered,
                maybe they have some well-known solutions / workarounds
                ?</p>
              <ul>
                <li>I miss Docker&#39;s build arguments a lot.<br>
                </li>
                <ul>
                  <li>A typical use case is building an image twice,
                    once with debug software builds (for debugging) and
                    once with release builds (for end usage and
                    profiling)</li>
                  <li>Another use case is controlling from remote which
                    version of some software gets built, and to
                    synchronize that with the output image&#39;s file name.=
</li>
                  <li>A third use case is synchronizing the directory
                    where image files are written across multiple
                    Singularity definition file, and making it
                    externally configurable.<br>
                  </li>
                </ul>
                <li>I appreciate Singuarity&#39;s attempt to cautiously
                  separate build environment from runtime environment,
                  but find that it makes build environment management
                  difficult:</li>
                <ul>
                  <li>I often have to write each environment-altering
                    statement three times, once in %post, once in %test,
                    and once in ${SINGULARITY_ENVIRONMENT}</li>
                  <li>Build environment not being carried over from one
                    parent image to a child image often makes me give up
                    and just write my whole build setup in
                    ${SINGULARITY_ENVIRONMENT} so that I can source that
                    at the beginning of the next image.</li>
                  <li>%environment is almost never usable for me because
                    most of the time I need some environment to be set
                    both for runtime and for child images.<br>
                  </li>
                </ul>
                <li>The idea of separating a build in clear-cut %build,
                  %post, %test phases is nice in theory, but limiting
                  for complex recipes</li>
                <ul>
                  <li>The folder to which I want to copy files may be
                    created during %post, in which case I need to move
                    files to a temporary directory during %copy and
                    re-move them later.</li>
                  <li>Some tests can only be run at some stages during
                    the build process, because they rely on a build
                    folder which must be cleaned up at the end of the
                    recipe.</li>
                  <li>SINGULARITY_ENVIRONMENT not being sourced before
                    %test is painful and uncalled for.<br>
                  </li>
                </ul>
                <li>A replacement to Docker layers for build snapshots
                  would be much appreciated.</li>
                <ul>
                  <li>I certainly don&#39;t miss the build performance/size
                    vs recipe readability compromise of Docker saving a
                    layer after every RUN statement...</li>
                  <li>...but I do miss being able to quickly investigate
                    a failed build and restart it without going through
                    my whole %post section all over again.</li>
                </ul>
              </ul>
              <p>In short, I would be longing for....</p>
              <ul>
                <li>A way to use some externally configurable
                  environment in a singularity definition file
                  (including, and I guess that&#39;s the difficult part, in
                  the &quot;From:&quot; statement)</li>
                <li>An alternative to SINGULARITY_ENVIRONMENT for
                  configuring build environment instead of runtime
                  environment</li>
                <li>A less hacky way to pass environment to childe
                  images&#39; build recipes (may or may not be merged with
                  the above)<br>
                </li>
                <li>A way to check if tests are enabled in %post as a
                  more flexible alternative to the %test section</li>
                <ul>
                  <li>...and runtime environment being sourced before
                    the %test section begins.</li>
                </ul>
                <li>Faster / easier ways to debug failed Singularity
                  builds than modifying the recipe and restarting it
                  from the beginning.</li>
              </ul>
              <p>...but some of that may be an XY problem coming from my
                Docker user habits :)<br>
              </p>
              <p>Cheers,<br>
                Hadrien<br>
              </p>
            </div>
          </blockquote>
        </div>
      </div>
      -- <br>
      You received this message because you are subscribed to the Google
      Groups &quot;singularity&quot; group.<br>
      To unsubscribe from this group and stop receiving emails from it,
      send an email to <a href=3D"mailto:singu...@lbl.gov" target=3D"_blank=
">singu...@lbl.gov</a>.<br>
    </blockquote>
  </div>


<p></p>

-- <br>
You received this message because you are subscribed to the Google Groups &=
quot;singularity&quot; group.<br>
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to <a href=3D"mailto:singu...@lbl.gov" target=3D"_blank">singu...@lbl.=
gov</a>.<br>
</blockquote></div>

<p></p>

-- <br>
You received this message because you are subscribed to the Google Groups &=
quot;singularity&quot; group.<br>
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to <a href=3D"mailto:singu...@lbl.gov" target=3D"_blank">singu...@lbl.=
gov</a>.<br>
</blockquote></div><br clear=3D"all"><div><br></div>-- <br><div dir=3D"ltr"=
 class=3D"gmail_signature"><div dir=3D"ltr"><div><div dir=3D"ltr"><div styl=
e=3D"color:rgb(80,0,80);font-size:12.8px"><div><div dir=3D"ltr"><div dir=3D=
"ltr"><div dir=3D"ltr"><div style=3D"color:rgb(34,34,34);font-size:12.8px">=
Ian Kaneshiro</div><div style=3D"color:rgb(34,34,34);font-size:12.8px">Soft=
ware Engineer, Sylabs, Inc.</div><div style=3D"color:rgb(34,34,34);font-siz=
e:12.8px"><a href=3D"http://www.sylabs.io/" style=3D"color:rgb(17,85,204)" =
target=3D"_blank">www.sylabs.io</a></div></div></div></div></div></div></di=
v></div></div></div>

--000000000000767f0805836eef70--
