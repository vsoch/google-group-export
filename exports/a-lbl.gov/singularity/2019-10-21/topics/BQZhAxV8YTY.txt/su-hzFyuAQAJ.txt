X-Received: by 2002:a17:902:e28f:: with SMTP id cf15mr488690plb.36.1551796089461;
        Tue, 05 Mar 2019 06:28:09 -0800 (PST)
X-BeenThere: singularity@lbl.gov
Received: by 2002:a17:902:6948:: with SMTP id k8ls10116573plt.7.gmail; Tue, 05
 Mar 2019 06:28:07 -0800 (PST)
X-Received: by 2002:a17:902:bb90:: with SMTP id m16mr1520392pls.49.1551796087735;
        Tue, 05 Mar 2019 06:28:07 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1551796087; cv=none;
        d=google.com; s=arc-20160816;
        b=metMbPelAqPbqpDenJDhJORvT9gkuJS9QZm/SFRPJnmsT/bL9UPRrsqANUlM4kZ+Hk
         d3aAPN8lORZTOySZRgtxuE8lwmrQsyRKv3FwRmegq+Bv25BouWJI3/SsyICFHIAklgdJ
         1BjTJZat0C9q92xjXC4xoXwo9+k7e4OvzsQvDUQiKL/znIMEYpt60Ksq8hwothbFEzjl
         kiXRsgiz7ZSEdtyfLG/1u46jBjT8uTkoZ9JOj88JaBQqxEuwz4KCGqj87XGd9aZJv+Ml
         cNMaBV9MzdLkhS6FS9GfTkFDVTWvYtvuqHWocYCFdA4a6jkk7AV1QBmeZl6R/t2/X1MY
         AeDw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=content-language:in-reply-to:mime-version:user-agent:date
         :message-id:from:references:to:subject;
        bh=fT0b/5RxpOq4PBuchgLLXGBpX5+LwDuvLnt7QOzsSEk=;
        b=zB+6TRqk1BSEcHi71XfM3qTPr84BkD0Rpsc/CXXRDW2wG0wWyAA0B9n2vfi7HF4q3T
         wXLWtEDhZFvTSnXIiB2GLojgcY9LJ/hlenTXB5JZBfz3+CQIcIzUtzspQwG7jGH/zGXo
         0IXg6cPgkM8A8ct224O/qHCZvs7sFIj1tsW5dFEzPJa9bfb3dgF5XiXXs7pedZfYCicf
         KzBatl8FBMoEuLy80tVxw9LazJ9lUTN4nF0JAtU9XuwHcmFBv/SuggGZiAoUrVneAaLr
         RYFhVDBib7SNsaG297Wp2jnohWlPfPKe9ho+IGg+9ltmx5hCtbGiK503ip4UaRevTO/M
         TrvA==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of gras...@lal.in2p3.fr designates 134.158.66.141 as permitted sender) smtp.mailfrom=gras...@lal.in2p3.fr
Return-Path: <gras...@lal.in2p3.fr>
Received: from fe4.lbl.gov (fe4.lbl.gov. [131.243.228.53])
        by mx.google.com with ESMTP id n11si7490217pgv.491.2019.03.05.06.28.07
        for <singu...@lbl.gov>;
        Tue, 05 Mar 2019 06:28:07 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of gras...@lal.in2p3.fr designates 134.158.66.141 as permitted sender) client-ip=134.158.66.141;
Authentication-Results: mx.google.com;
       spf=pass (google.com: best guess record for domain of gras...@lal.in2p3.fr designates 134.158.66.141 as permitted sender) smtp.mailfrom=gras...@lal.in2p3.fr
X-Ironport-SBRS: 3.5
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0EYAwA1hn5ch41CnoZkHgEGBwaBZYEOW?=
 =?us-ascii?q?IESgQMnhAEHg0qQGYIND22XOYErMAwLAQEYAQoLgQJHgi9GAoQsIjgSAQEDAQE?=
 =?us-ascii?q?BAgEDAgEBAhABAQEKCwkIKSMMgjoFAgMfBwoETTsvAQEBAQEBAQEBAQEBAQEBA?=
 =?us-ascii?q?RoCDSY9AQEBAQIBIwQiBRkFCAoLCxUDIAcDAgIxFREOBQIEAQEBARcCBIMBASY?=
 =?us-ascii?q?BgUYIBQqoNRqBJnwzH4NUgVGEZ4EvhFqGTheBf4ERJ4FtSTWDHgKBKQUBEgGDK?=
 =?us-ascii?q?YI1IgKKCgqGUoFjkT4JgRyGJ4N4hzMfgXSFZIMiiC2QOAmJCgGDPwIREwGBXlc?=
 =?us-ascii?q?wcU0nEYMnCYINDgmBAAEIAYJBgmSHcD4zEI44DxcELIFyBQEB?=
X-IPAS-Result: =?us-ascii?q?A0EYAwA1hn5ch41CnoZkHgEGBwaBZYEOWIESgQMnhAEHg0q?=
 =?us-ascii?q?QGYIND22XOYErMAwLAQEYAQoLgQJHgi9GAoQsIjgSAQEDAQEBAgEDAgEBAhABA?=
 =?us-ascii?q?QEKCwkIKSMMgjoFAgMfBwoETTsvAQEBAQEBAQEBAQEBAQEBARoCDSY9AQEBAQI?=
 =?us-ascii?q?BIwQiBRkFCAoLCxUDIAcDAgIxFREOBQIEAQEBARcCBIMBASYBgUYIBQqoNRqBJ?=
 =?us-ascii?q?nwzH4NUgVGEZ4EvhFqGTheBf4ERJ4FtSTWDHgKBKQUBEgGDKYI1IgKKCgqGUoF?=
 =?us-ascii?q?jkT4JgRyGJ4N4hzMfgXSFZIMiiC2QOAmJCgGDPwIREwGBXlcwcU0nEYMnCYIND?=
 =?us-ascii?q?gmBAAEIAYJBgmSHcD4zEI44DxcELIFyBQEB?=
X-IronPort-AV: E=Sophos;i="5.58,444,1544515200"; 
   d="scan'208,217";a="53694480"
Received: from cczrelay01.in2p3.fr ([134.158.66.141])
  by fe4.lbl.gov with ESMTP; 05 Mar 2019 06:28:05 -0800
Received: from [134.158.76.29] (pc-grasland.lal.in2p3.fr [134.158.76.29])
	(authenticated bits=0)
	by cczrelay01.in2p3.fr (8.14.4/8.14.4) with ESMTP id x25ES0ml001567
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <singu...@lbl.gov>; Tue, 5 Mar 2019 15:28:00 +0100
X-Virus-Status: Clean
X-Virus-Scanned: clamav-milter 0.100.2 at cczrelay01
Subject: Re: [Singularity] Thoughts from a Docker -> Singularity conversion
 attempt
To: singularity@lbl.gov
References: <7bb2ddd5-0de0-5bbd-0fa2-d60c36966e57@lal.in2p3.fr>
 <CAPqNE2WuXEy1sKUP1Akzes0Q+obxLBu0TkR7=5n+KhsUiMdR8w@mail.gmail.com>
 <CAHNsURv_d7mLQf35JE0TuRZH-JMHodF_aU5D2hQCRMEb5=2j5Q@mail.gmail.com>
From: Hadrien Grasland <gras...@lal.in2p3.fr>
Message-ID: <410e6dbe-76cb-3bc6-f73c-7d5eb7a39ba6@lal.in2p3.fr>
Date: Tue, 5 Mar 2019 15:29:19 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.5.1
MIME-Version: 1.0
In-Reply-To: <CAHNsURv_d7mLQf35JE0TuRZH-JMHodF_aU5D2hQCRMEb5=2j5Q@mail.gmail.com>
Content-Type: multipart/alternative;
 boundary="------------0AD57123CE57C6CAB6A6886E"
Content-Language: en-US

--------------0AD57123CE57C6CAB6A6886E
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 8bit

Hello Ian,

Thanks for your reply and your ongoing work to improve these parts!

I have just a couple more questions/comments which I think are best 
asked via e-mail, and will add further comments on github as appropriate.


> Multistage builds are on the horizon for 3.2, which is targeted for 
> early/mid April. I don't think this will directly address your 
> concerns, but it will lay down the framework to do so. With multistage 
> builds comes the possibility of caching stages so that you won't have 
> to rebuild everything each build. This should help make debugging 
> builds less painful in some scenarios, but will not make builds 
> recoverable on a per command of the %post section granularity.

So, what are these multistage builds that have been discussed multiple 
times so far? Does it mean that one could do something like the following?

====
Bootstrap: ...
From: ...

%post
     ... download stuff, create directories ...

%copy
     ... move local files to the newly created directories ...

%post
     ... configure and build some software ...

%test
     ... run unit tests if testing is enabled ...

%post
     ... clean up the build to shrink image size ...

%test
     ... check if the runtime environment still works after dropping the build directory ...
====

If so, this sounds like a great idea, which will resolve the 
inflexibility of the current staged %setup / %copy / %post / %test 
model. And I also think that letting the user select the build snapshot 
granularity by tuning %post section size is preferrable to the Docker 
one-layer-per-RUN model.

However, note that such a feature would also put extra stress on build 
environment issues, and that you probably want to have a cleaner way of 
carrying environment from one build section to the next before 
encouraging people to use such a multistage design.


> Version 3.2 will also introduce changes to the definition parser to 
> support args for sections, (e.g. %section arg0 arg1 ...). This will 
> make it easier to configure behavior for how builds are executed on a 
> per section basis and potentially open doors to alleviate other 
> problems you mentioned.

I must admit that I am a bit more confused about how this would work on 
the user side. Can you give me a quick example of what the CLI interface 
for setting these arguments would look like?


> Though build flags offer a lot of nice functionality, one of the goals 
> of Singularity definitions is to allow reproducible builds. So having 
> build behavior configured from the CLI or external to the definition 
> file will hinder that in my opinion.

I think that the losses outweigh the gains if build flags are cached in 
the output image as a config file or via the JSON metadata mechanism.

Cheers,
Hadrien


> If I've failed to address anything please let me know here or feel 
> free to open an issue here: 
> https://github.com/sylabs/singularity/issues so that we can make sure 
> everything is addressed.
>
> Best,
> Ian
>
> On Mon, Mar 4, 2019 at 10:41 AM 'John Hearns' via singularity 
> <singu...@lbl.gov <mailto:singu...@lbl.gov>> wrote:
>
>     "the laptop-hostile orthodoxy of RHEL / CentOS"    Love it. Lol.
>
>     A grown up from Singularity will be along in a moment - I believe
>     multi stage builds are on the cards.
>
>     ps. Containers? Laptops? Luxury.  In my day you used HBOOK and
>     plotted histograms used EBCDIC characters hammered out by a line
>     printer.
>     And you thought yourself lucky if the computer centre delivered
>     the output before lunch.
>
>     On Mon, 4 Mar 2019 at 15:35, Hadrien Grasland
>     <gras...@lal.in2p3.fr <mailto:gras...@lal.in2p3.fr>> wrote:
>
>         Dear Singularity users,
>
>         I've been packaging HEP software and development environments
>         using a combination of Spack and Docker for a while.
>
>           * Spack gives me customizable and ergonomic software builds,
>             with automated dependency management and peaceful
>             coexistence between different build configurations.
>           * Docker gives me cross-OS binary + environment portability,
>             and a way to "freeze" a snapshot of my rolling Linux
>             distribution of choice in order to momentarily prevent
>             Spack from rebuilding everything over and over again the
>             way it loves to.
>
>         This is what the end result currently looks like:
>         https://github.com/HadrienG2/spack-based-docker .
>
>         A problem with using Docker for this purpose, though, is that
>         it does too much container/host isolation for my use case. I
>         don't really care for Docker masquerading as a VM by hiding
>         the host filesystem and processes from the container, but I do
>         care about the cumbersome side of remembering to bind mount
>         everything, ending up with root-owned files in these bind
>         mounts if I'm not very careful, and ptrace rights being taken
>         away from me unless I take care to pass the magical "I don't
>         care, I trust this container" flags to the docker run command
>         line. From this perspective, I sometimes feel like I'm
>         fighting Docker's cloud-oriented design a bit too much.
>
>         Which is what led me to investigate Singularity, an experience
>         which I now feel ready to report on.
>
>         ------------------------------------------------------------------------
>
>         Having some previous bad experience from the Docker ->
>         Singularity image conversion machinery, I decided for this
>         attempt to try to stick with a pure Singularity workflow,
>         without Docker getting in the way at any time. This was easier
>         than expected: bootstrapping a zypper-based image actually
>         proved very smooth.
>
>         My feeling from translating my Docker recipes afterwards is
>         that Singularity does deliver beautifully on the final image
>         usability front (hurray for the simple CLI, ptrace privileges,
>         proper file permissions, and /home mounting by default), but
>         feels quite a bit more painful than Docker on the image
>         builder's side. Here are some particular pain points that I
>         encountered, maybe they have some well-known solutions /
>         workarounds ?
>
>           * I miss Docker's build arguments a lot.
>               o A typical use case is building an image twice, once
>                 with debug software builds (for debugging) and once
>                 with release builds (for end usage and profiling)
>               o Another use case is controlling from remote which
>                 version of some software gets built, and to
>                 synchronize that with the output image's file name.
>               o A third use case is synchronizing the directory where
>                 image files are written across multiple Singularity
>                 definition file, and making it externally configurable.
>           * I appreciate Singuarity's attempt to cautiously separate
>             build environment from runtime environment, but find that
>             it makes build environment management difficult:
>               o I often have to write each environment-altering
>                 statement three times, once in %post, once in %test,
>                 and once in ${SINGULARITY_ENVIRONMENT}
>               o Build environment not being carried over from one
>                 parent image to a child image often makes me give up
>                 and just write my whole build setup in
>                 ${SINGULARITY_ENVIRONMENT} so that I can source that
>                 at the beginning of the next image.
>               o %environment is almost never usable for me because
>                 most of the time I need some environment to be set
>                 both for runtime and for child images.
>           * The idea of separating a build in clear-cut %build, %post,
>             %test phases is nice in theory, but limiting for complex
>             recipes
>               o The folder to which I want to copy files may be
>                 created during %post, in which case I need to move
>                 files to a temporary directory during %copy and
>                 re-move them later.
>               o Some tests can only be run at some stages during the
>                 build process, because they rely on a build folder
>                 which must be cleaned up at the end of the recipe.
>               o SINGULARITY_ENVIRONMENT not being sourced before %test
>                 is painful and uncalled for.
>           * A replacement to Docker layers for build snapshots would
>             be much appreciated.
>               o I certainly don't miss the build performance/size vs
>                 recipe readability compromise of Docker saving a layer
>                 after every RUN statement...
>               o ...but I do miss being able to quickly investigate a
>                 failed build and restart it without going through my
>                 whole %post section all over again.
>
>         In short, I would be longing for....
>
>           * A way to use some externally configurable environment in a
>             singularity definition file (including, and I guess that's
>             the difficult part, in the "From:" statement)
>           * An alternative to SINGULARITY_ENVIRONMENT for configuring
>             build environment instead of runtime environment
>           * A less hacky way to pass environment to childe images'
>             build recipes (may or may not be merged with the above)
>           * A way to check if tests are enabled in %post as a more
>             flexible alternative to the %test section
>               o ...and runtime environment being sourced before the
>                 %test section begins.
>           * Faster / easier ways to debug failed Singularity builds
>             than modifying the recipe and restarting it from the
>             beginning.
>
>         ...but some of that may be an XY problem coming from my Docker
>         user habits :)
>
>         Cheers,
>         Hadrien
>
>         -- 
>         You received this message because you are subscribed to the
>         Google Groups "singularity" group.
>         To unsubscribe from this group and stop receiving emails from
>         it, send an email to singu...@lbl.gov
>         <mailto:singu...@lbl.gov>.
>
>     -- 
>     You received this message because you are subscribed to the Google
>     Groups "singularity" group.
>     To unsubscribe from this group and stop receiving emails from it,
>     send an email to singu...@lbl.gov
>     <mailto:singu...@lbl.gov>.
>
>
>
> -- 
> Ian Kaneshiro
> Software Engineer, Sylabs, Inc.
> www.sylabs.io <http://www.sylabs.io/>
> -- 
> You received this message because you are subscribed to the Google 
> Groups "singularity" group.
> To unsubscribe from this group and stop receiving emails from it, send 
> an email to singu...@lbl.gov 
> <mailto:singu...@lbl.gov>.

--------------0AD57123CE57C6CAB6A6886E
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: 8bit

<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  </head>
  <body text="#000000" bgcolor="#FFFFFF">
    <p>Hello Ian,<br>
    </p>
    <p>Thanks for your reply and your ongoing work to improve these
      parts!</p>
    <p>I have just a couple more questions/comments which I think are
      best asked via e-mail, and will add further comments on github as
      appropriate.<br>
    </p>
    <p><br>
    </p>
    <blockquote type="cite"
cite="mid:CAHNsURv_d7mLQf35JE0TuRZH-JMHodF_aU5D2hQCRMEb5=2j...@mail.gmail.com">
      <meta http-equiv="content-type" content="text/html; charset=UTF-8">
      <div dir="ltr">
        <div dir="ltr">
          <div dir="ltr">
            <div dir="ltr">
              <div dir="ltr"><span style="white-space:pre-wrap"></span>
                <div>Multistage builds are on the horizon for 3.2, which
                  is targeted for early/mid April. I don't think this
                  will directly address your concerns, but it will lay
                  down the framework to do so. With multistage builds
                  comes the possibility of caching stages so that you
                  won't have to rebuild everything each build. This
                  should help make debugging builds less painful in some
                  scenarios, but will not make builds recoverable on a
                  per command of the %post section granularity. <br>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </blockquote>
    <p>So, what are these multistage builds that have been discussed
      multiple times so far? Does it mean that one could do something
      like the following?</p>
    <pre>====
Bootstrap: ...
From: ...

%post
    ... download stuff, create directories ...

%copy
    ... move local files to the newly created directories ...

%post
    ... configure and build some software ...

%test
    ... run unit tests if testing is enabled ...

%post
    ... clean up the build to shrink image size ...

%test
    ... check if the runtime environment still works after dropping the build directory ...
====
</pre>
    <p>If so, this sounds like a great idea, which will resolve the
      inflexibility of the current staged %setup / %copy / %post / %test
      model. And I also think that letting the user select the build
      snapshot granularity by tuning %post section size is preferrable
      to the Docker one-layer-per-RUN model.</p>
    <p>However, note that such a feature would also put extra stress on
      build environment issues, and that you probably want to have a
      cleaner way of carrying environment from one build section to the
      next before encouraging people to use such a multistage design.</p>
    <p><br>
    </p>
    <blockquote type="cite"
cite="mid:CAHNsURv_d7mLQf35JE0TuRZH-JMHodF_aU5D2hQCRMEb5=2j...@mail.gmail.com">
      <div dir="ltr">
        <div dir="ltr">
          <div dir="ltr">
            <div dir="ltr">
              <div dir="ltr">
                <div>Version 3.2 will also introduce changes to the
                  definition parser to support args for sections, (e.g.
                  %section arg0 arg1 ...). This will make it easier to
                  configure behavior for how builds are executed on a
                  per section basis and potentially open doors to
                  alleviate other problems you mentioned.</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </blockquote>
    <p>I must admit that I am a bit more confused about how this would
      work on the user side. Can you give me a quick example of what the
      CLI interface for setting these arguments would look like?<br>
    </p>
    <p><br>
    </p>
    <blockquote type="cite"
cite="mid:CAHNsURv_d7mLQf35JE0TuRZH-JMHodF_aU5D2hQCRMEb5=2j...@mail.gmail.com">
      <div dir="ltr">
        <div dir="ltr">
          <div dir="ltr">
            <div dir="ltr">
              <div dir="ltr">
                <div>Though build flags offer a lot of nice
                  functionality, one of the goals of Singularity
                  definitions is to allow reproducible builds. So having
                  build behavior configured from the CLI or external to
                  the definition file will hinder that in my opinion.</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </blockquote>
    <p>I think that the losses outweigh the gains if build flags are
      cached in the output image as a config file or via the JSON
      metadata mechanism.</p>
    <p>Cheers,<br>
      Hadrien<br>
    </p>
    <p><br>
    </p>
    <blockquote type="cite"
cite="mid:CAHNsURv_d7mLQf35JE0TuRZH-JMHodF_aU5D2hQCRMEb5=2j...@mail.gmail.com">
      <div dir="ltr">
        <div dir="ltr">
          <div dir="ltr">
            <div dir="ltr">
              <div dir="ltr">
                <div>If I've failed to address anything please let me
                  know here or feel free to open an issue here: <a
                    href="https://github.com/sylabs/singularity/issues"
                    target="_blank" moz-do-not-send="true">https://github.com/sylabs/singularity/issues</a>
                  so that we can make sure everything is addressed.</div>
                <div><br>
                </div>
                <div>Best,</div>
                <div>Ian </div>
              </div>
            </div>
          </div>
          <br>
          <div class="gmail_quote">
            <div dir="ltr" class="gmail_attr">On Mon, Mar 4, 2019 at
              10:41 AM 'John Hearns' via singularity &lt;<a
                href="mailto:singu...@lbl.gov" target="_blank"
                moz-do-not-send="true">singu...@lbl.gov</a>&gt;
              wrote:<br>
            </div>
            <blockquote class="gmail_quote" style="margin:0px 0px 0px
              0.8ex;border-left:1px solid
              rgb(204,204,204);padding-left:1ex">
              <div dir="ltr">
                <div dir="ltr"><span
style="text-align:left;color:rgb(36,41,46);text-transform:none;text-indent:0px;letter-spacing:normal;font-family:-apple-system,BlinkMacSystemFont,&quot;Segoe
                    UI&quot;,Helvetica,Arial,sans-serif,&quot;Apple
                    Color Emoji&quot;,&quot;Segoe UI
                    Emoji&quot;,&quot;Segoe UI
Symbol&quot;;font-size:16px;font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;word-spacing:0px;display:inline;white-space:normal;float:none;background-color:rgb(255,255,255)">"the
                    laptop-hostile
                    orthodoxy of RHEL / CentOS"    Love it. Lol. </span></div>
                <div dir="ltr"><br>
                </div>
                <div>A grown up from Singularity will be along in a
                  moment - I believe multi stage builds are on the
                  cards.</div>
                <div><br>
                </div>
                <div>ps. Containers? Laptops? Luxury.  In my day you
                  used HBOOK and plotted histograms used EBCDIC
                  characters hammered out by a line printer.</div>
                <div>And you thought yourself lucky if the computer
                  centre delivered the output before lunch.<br>
                </div>
              </div>
              <br>
              <div class="gmail_quote">
                <div class="gmail_attr" dir="ltr">On Mon, 4 Mar 2019 at
                  15:35, Hadrien Grasland &lt;<a
                    href="mailto:gras...@lal.in2p3.fr" target="_blank"
                    moz-do-not-send="true">gras...@lal.in2p3.fr</a>&gt;
                  wrote:<br>
                </div>
                <blockquote class="gmail_quote" style="margin:0px 0px
                  0px 0.8ex;padding-left:1ex;border-left:1px solid
                  rgb(204,204,204)">
                  <div bgcolor="#FFFFFF">
                    <p>Dear Singularity users,</p>
                    <p>I've been packaging HEP software and development
                      environments using a combination of Spack and
                      Docker for a while.</p>
                    <ul>
                      <li>Spack gives me customizable and ergonomic
                        software builds, with automated dependency
                        management and peaceful coexistence between
                        different build configurations.</li>
                      <li>Docker gives me cross-OS binary + environment
                        portability, and a way to "freeze" a snapshot of
                        my rolling Linux distribution of choice in order
                        to momentarily prevent Spack from rebuilding
                        everything over and over again the way it loves
                        to.</li>
                    </ul>
                    <p>This is what the end result currently looks like:
                      <a
class="m_3480298081180584512m_6354435953002871067gmail-m_9123956282012154854gmail-m_-752644209929854928moz-txt-link-freetext"
href="https://github.com/HadrienG2/spack-based-docker" target="_blank"
                        moz-do-not-send="true">https://github.com/HadrienG2/spack-based-docker</a>
                      .</p>
                    <p>A problem with using Docker for this purpose,
                      though, is that it does too much container/host
                      isolation for my use case. I don't really care for
                      Docker masquerading as a VM by hiding the host
                      filesystem and processes from the container, but I
                      do care about the cumbersome side of remembering
                      to bind mount everything, ending up with
                      root-owned files in these bind mounts if I'm not
                      very careful, and ptrace rights being taken away
                      from me unless I take care to pass the magical "I
                      don't care, I trust this container" flags to the
                      docker run command line. From this perspective, I
                      sometimes feel like I'm fighting Docker's
                      cloud-oriented design a bit too much.</p>
                    <p>Which is what led me to investigate Singularity,
                      an experience which I now feel ready to report on.</p>
                    <hr width="100%" size="2">
                    <p>Having some previous bad experience from the
                      Docker -&gt; Singularity image conversion
                      machinery, I decided for this attempt to try to
                      stick with a pure Singularity workflow, without
                      Docker getting in the way at any time. This was
                      easier than expected: bootstrapping a zypper-based
                      image actually proved very smooth.<br>
                    </p>
                    <p>My feeling from translating my Docker recipes
                      afterwards is that Singularity does deliver
                      beautifully on the final image usability front
                      (hurray for the simple CLI, ptrace privileges,
                      proper file permissions, and /home mounting by
                      default), but feels quite a bit more painful than
                      Docker on the image builder's side. Here are some
                      particular pain points that I encountered, maybe
                      they have some well-known solutions / workarounds
                      ?</p>
                    <ul>
                      <li>I miss Docker's build arguments a lot.<br>
                      </li>
                      <ul>
                        <li>A typical use case is building an image
                          twice, once with debug software builds (for
                          debugging) and once with release builds (for
                          end usage and profiling)</li>
                        <li>Another use case is controlling from remote
                          which version of some software gets built, and
                          to synchronize that with the output image's
                          file name.</li>
                        <li>A third use case is synchronizing the
                          directory where image files are written across
                          multiple Singularity definition file, and
                          making it externally configurable.<br>
                        </li>
                      </ul>
                      <li>I appreciate Singuarity's attempt to
                        cautiously separate build environment from
                        runtime environment, but find that it makes
                        build environment management difficult:</li>
                      <ul>
                        <li>I often have to write each
                          environment-altering statement three times,
                          once in %post, once in %test, and once in
                          ${SINGULARITY_ENVIRONMENT}</li>
                        <li>Build environment not being carried over
                          from one parent image to a child image often
                          makes me give up and just write my whole build
                          setup in ${SINGULARITY_ENVIRONMENT} so that I
                          can source that at the beginning of the next
                          image.</li>
                        <li>%environment is almost never usable for me
                          because most of the time I need some
                          environment to be set both for runtime and for
                          child images.<br>
                        </li>
                      </ul>
                      <li>The idea of separating a build in clear-cut
                        %build, %post, %test phases is nice in theory,
                        but limiting for complex recipes</li>
                      <ul>
                        <li>The folder to which I want to copy files may
                          be created during %post, in which case I need
                          to move files to a temporary directory during
                          %copy and re-move them later.</li>
                        <li>Some tests can only be run at some stages
                          during the build process, because they rely on
                          a build folder which must be cleaned up at the
                          end of the recipe.</li>
                        <li>SINGULARITY_ENVIRONMENT not being sourced
                          before %test is painful and uncalled for.<br>
                        </li>
                      </ul>
                      <li>A replacement to Docker layers for build
                        snapshots would be much appreciated.</li>
                      <ul>
                        <li>I certainly don't miss the build
                          performance/size vs recipe readability
                          compromise of Docker saving a layer after
                          every RUN statement...</li>
                        <li>...but I do miss being able to quickly
                          investigate a failed build and restart it
                          without going through my whole %post section
                          all over again.</li>
                      </ul>
                    </ul>
                    <p>In short, I would be longing for....</p>
                    <ul>
                      <li>A way to use some externally configurable
                        environment in a singularity definition file
                        (including, and I guess that's the difficult
                        part, in the "From:" statement)</li>
                      <li>An alternative to SINGULARITY_ENVIRONMENT for
                        configuring build environment instead of runtime
                        environment</li>
                      <li>A less hacky way to pass environment to childe
                        images' build recipes (may or may not be merged
                        with the above)<br>
                      </li>
                      <li>A way to check if tests are enabled in %post
                        as a more flexible alternative to the %test
                        section</li>
                      <ul>
                        <li>...and runtime environment being sourced
                          before the %test section begins.</li>
                      </ul>
                      <li>Faster / easier ways to debug failed
                        Singularity builds than modifying the recipe and
                        restarting it from the beginning.</li>
                    </ul>
                    <p>...but some of that may be an XY problem coming
                      from my Docker user habits :)<br>
                    </p>
                    <p>Cheers,<br>
                      Hadrien<br>
                    </p>
                  </div>
                  -- <br>
                  You received this message because you are subscribed
                  to the Google Groups "singularity" group.<br>
                  To unsubscribe from this group and stop receiving
                  emails from it, send an email to <a
                    href="mailto:singu...@lbl.gov"
                    target="_blank" moz-do-not-send="true">singu...@lbl.gov</a>.<br>
                </blockquote>
              </div>
              -- <br>
              You received this message because you are subscribed to
              the Google Groups "singularity" group.<br>
              To unsubscribe from this group and stop receiving emails
              from it, send an email to <a
                href="mailto:singu...@lbl.gov"
                target="_blank" moz-do-not-send="true">singu...@lbl.gov</a>.<br>
            </blockquote>
          </div>
          <br clear="all">
          <div><br>
          </div>
          -- <br>
          <div dir="ltr"
            class="m_3480298081180584512m_6354435953002871067gmail_signature">
            <div dir="ltr">
              <div>
                <div dir="ltr">
                  <div style="color:rgb(80,0,80);font-size:12.8px">
                    <div>
                      <div dir="ltr">
                        <div dir="ltr">
                          <div dir="ltr">
                            <div
                              style="color:rgb(34,34,34);font-size:12.8px">Ian
                              Kaneshiro</div>
                            <div
                              style="color:rgb(34,34,34);font-size:12.8px">Software
                              Engineer, Sylabs, Inc.</div>
                            <div
                              style="color:rgb(34,34,34);font-size:12.8px"><a
                                href="http://www.sylabs.io/"
                                style="color:rgb(17,85,204)"
                                target="_blank" moz-do-not-send="true">www.sylabs.io</a></div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      -- <br>
      You received this message because you are subscribed to the Google
      Groups "singularity" group.<br>
      To unsubscribe from this group and stop receiving emails from it,
      send an email to <a href="mailto:singu...@lbl.gov"
        moz-do-not-send="true">singu...@lbl.gov</a>.<br>
    </blockquote>
  </body>
</html>

--------------0AD57123CE57C6CAB6A6886E--
