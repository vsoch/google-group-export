Date: Mon, 23 Oct 2017 11:04:11 -0700 (PDT)
From: Christopher Neal <chri...@snumerics.com>
To: singularity <singu...@lbl.gov>
Message-Id: <42aed814-6cf1-4caf-b9ae-59b02825a25c@lbl.gov>
In-Reply-To: <872b1ee0-7c34-4a6f-94d4-389abc8aecea@lbl.gov>
References: <872b1ee0-7c34-4a6f-94d4-389abc8aecea@lbl.gov>
Subject: Re: Running singularity in parallel with complex execution command
MIME-Version: 1.0
Content-Type: multipart/mixed; 
	boundary="----=_Part_11838_215684721.1508781851388"

------=_Part_11838_215684721.1508781851388
Content-Type: multipart/alternative; 
	boundary="----=_Part_11839_421419956.1508781851389"

------=_Part_11839_421419956.1508781851389
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit

Also,
2.) How can I be sure that the environment variables that I set in my 
Docker image are properly transposed to the user that Singularity creates 
when it generates the container?

On Monday, October 23, 2017 at 1:28:18 PM UTC-4, Christopher Neal wrote:
>
> Hi,
>
> I would like to be able to use Singularity to run a parallel(MPI) process 
> from a Docker image that I created. The Docker image contains everything 
> that I need to execute the code. In the Docker image I have defined a user 
> called "MyUser" that has environment variables set so that "MyUser" can run 
> the code e.g. PATH and LD_LIBRARY_PATH point to locations in /opt that 
> house the binaries and libraries for running my code. I created a bash 
> shell script that defined environment variables as well as a few aliases. 
> It's called "image_env_setup.sh".  If I run the Singularity image 
> using "singularity exec -H $HOME <ImageName> /bin/bash --rcfile 
> /opt/Loci-Stream/image_env_setup.sh" then it seems to start up the 
> container with everything set. If I remove the --rcfile command line flag, 
> then the container boots up without any of the definitions. I was thinking 
> about defining them in the Dockerfile as ENV variables, but those would be 
> for "MyUser", and not for the user of whoever starts the Singularity 
> container.
>
> My code run command is: /opt/Loci-Stream/bin/stream --scheduleoutput 
> --nochomp -q solution loxSpray > /dev/null > run.out 2>&1 &
>
> Is there something special that I need to do in order to have that long 
> execution command? The ideal command that I imagine would be present in a 
> PBS scheduler file for running the code would be:
>
> mpirun -np 10 singularity exec 
> ../Loci-Stream/docker/locistream_stream_v206_opensuse423_stream_v206-2017-10-18-74978838ae60.img 
> /opt/Loci-Stream/bin/stream --scheduleoutput --nochomp -q solution loxSpray 
> > /dev/null >run.out 2>&1 & --rcfile /opt/image_env_setup.sh
>
> ^^Singularity doesn't like this though
>
>
> I'm also trying to get it to run via the 'singularity run' command:
> mpirun -np 10 singularity run -H /home/user/source/temp/test_case 
> ../Loci-Stream/docker/locistream_stream_v206_opensuse423_stream_v206-2017-10-23-6face3b78607.img  
> "/opt/Loci-Stream/bin/stream --scheduleoutput --nochomp -q solution 
> loxSpray > /dev/null >run.out 2>&1 &" 
>
> But this is not currently working either.
>
> High level question:
> 1.) What is the proper way to send in a long and complex execution command 
> for my binary?
>

------=_Part_11839_421419956.1508781851389
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Also,<div>2.) How can I be sure that the environment varia=
bles that I set in my Docker image are properly transposed to the user that=
 Singularity creates when it generates the container?<br><br>On Monday, Oct=
ober 23, 2017 at 1:28:18 PM UTC-4, Christopher Neal wrote:<blockquote class=
=3D"gmail_quote" style=3D"margin: 0;margin-left: 0.8ex;border-left: 1px #cc=
c solid;padding-left: 1ex;"><div dir=3D"ltr">Hi,<br><div><br></div><div>I w=
ould like to be able to use Singularity to run a parallel(MPI) process from=
 a Docker image that I created. The Docker image contains everything that I=
 need to execute the code. In the Docker image I have defined a user called=
 &quot;MyUser&quot; that has environment variables set so that &quot;MyUser=
&quot; can run the code e.g. PATH and LD_LIBRARY_PATH point to locations in=
 /opt that house the binaries and libraries for running my code. I created =
a bash shell script that defined environment variables as well as a few ali=
ases. It&#39;s called &quot;image_env_setup.sh&quot;.=C2=A0 If I run the Si=
ngularity image using=C2=A0&quot;singularity exec  -H $HOME &lt;ImageName&g=
t; /bin/bash --rcfile /opt/Loci-Stream/image_env_<wbr>setup.sh&quot; then i=
t seems to start up the container with everything set. If I remove the --rc=
file command line flag, then the container boots up without any of the defi=
nitions. I was thinking about defining them in the Dockerfile as ENV variab=
les, but those would be for &quot;MyUser&quot;, and not for the user of who=
ever starts the Singularity container.</div><div><br></div><div>My code run=
 command is: /opt/Loci-Stream/bin/stream --scheduleoutput --nochomp -q solu=
tion loxSpray  &gt; /dev/null &gt; run.out 2&gt;&amp;1 &amp;</div><div><br>=
</div><div>Is there something special that I need to do in order to have th=
at long execution command? The ideal command that I imagine would be presen=
t in a PBS scheduler file for running the code would be:<br><br>







mpirun -np 10 singularity exec  ../Loci-Stream/docker/<wbr>locistream_strea=
m_v206_<wbr>opensuse423_stream_v206-2017-<wbr>10-18-74978838ae60.img /opt/L=
oci-Stream/bin/stream --scheduleoutput --nochomp -q solution loxSpray  &gt;=
 /dev/null &gt;run.out 2&gt;&amp;1 &amp; --rcfile /opt/image_env_setup.sh</=
div><div><br></div><div>^^Singularity doesn&#39;t like this though</div><di=
v><br></div><div><br></div><div>I&#39;m also trying to get it to run via th=
e &#39;singularity run&#39; command:</div>mpirun -np 10 singularity run -H =
/home/user/source/temp/test_<wbr>case ../Loci-Stream/docker/<wbr>locistream=
_stream_v206_<wbr>opensuse423_stream_v206-2017-<wbr>10-23-6face3b78607.img=
=C2=A0 &quot;/opt/Loci-Stream/bin/stream --scheduleoutput --nochomp -q solu=
tion loxSpray  &gt; /dev/null &gt;run.out 2&gt;&amp;1 &amp;&quot;







<div><br></div><div>But this is not currently working either.</div><div><br=
></div><div>High level question:<br>1.) What is the proper way to send in a=
 long and complex execution command for my binary?</div></div></blockquote>=
</div></div>
------=_Part_11839_421419956.1508781851389--

------=_Part_11838_215684721.1508781851388--
