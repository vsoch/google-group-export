X-Received: by 2002:a65:6083:: with SMTP id t3mr875031pgu.83.1551800010553;
        Tue, 05 Mar 2019 07:33:30 -0800 (PST)
X-BeenThere: singularity@lbl.gov
Received: by 2002:a63:68c7:: with SMTP id d190ls371449pgc.3.gmail; Tue, 05 Mar
 2019 07:33:29 -0800 (PST)
X-Received: by 2002:a62:57dd:: with SMTP id i90mr2408905pfj.154.1551800009089;
        Tue, 05 Mar 2019 07:33:29 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1551800009; cv=none;
        d=google.com; s=arc-20160816;
        b=GkR6n06YV0Z/GLyuc752TZzZRpCwqCrAJx/uw/AZiM/dyCnckeqm8PoDR1u+wH9Led
         wLKgmKjRRBie9oBLVl+2d7YII+Fnj7b2MwKiQTrq7NBqf/vwHQxdBtR+tKTfk0o6RYSc
         Twfe9bnj+uziQPwTe80Dby5QrtsBB6kMUB43q1z2KkHmVbH+ezHxYiV/3Kr5Som/dtLI
         aadAOmK5PFgesxbJG0LXWjVkGiCA2zPZFvIjzsncdE4EuFIiLSxsHnESI2ql8H1+QvS5
         TrbP/2p7RZxDhL1ffVO6kHZNlbfQjU8hLSvfj5ddBEdm8ypXPzUjfhis+jVjJMGiY4w4
         LEiw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=content-language:in-reply-to:mime-version:user-agent:date
         :message-id:from:references:to:subject;
        bh=zWhhl7+JCG5YX/zMm8szAlSNFA36Cc7Q3+E75q1j/DM=;
        b=D7/zSxexn2HvqYYvsmGseCsEvqTQpfpAVCgRpzZ9jNK+JCFMPzHeskMup+YBFAv5H8
         tKRh0Z8gKk+PKIfVb9osmUbEff+WPzegELHH0WyvI81QR9EGuZIERFGOWeTJ32cdvfXx
         B6IMfuWDTzFQ63dY+lpdb6DQwklpY9NC+OyS/GyOfS3e6SF+v1muuLA5GILFIT4DQGKE
         d8Yj+68eRxRJOJmnhiwjE8szaShdpE18SidSu3fDsGAHu+1QKqMR6cmGNU9S8Asvm91m
         yD37cK2xMIvA7sD0nAyo3vO3N92R39VjiNK112qNl0TAxC2eYpTmNSmMbExYyneWJuyj
         z/uw==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of gras...@lal.in2p3.fr designates 134.158.66.141 as permitted sender) smtp.mailfrom=gras...@lal.in2p3.fr
Return-Path: <gras...@lal.in2p3.fr>
Received: from fe4.lbl.gov (fe4.lbl.gov. [131.243.228.53])
        by mx.google.com with ESMTP id a17si8075527pfi.125.2019.03.05.07.33.28
        for <singu...@lbl.gov>;
        Tue, 05 Mar 2019 07:33:29 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of gras...@lal.in2p3.fr designates 134.158.66.141 as permitted sender) client-ip=134.158.66.141;
Authentication-Results: mx.google.com;
       spf=pass (google.com: best guess record for domain of gras...@lal.in2p3.fr designates 134.158.66.141 as permitted sender) smtp.mailfrom=gras...@lal.in2p3.fr
X-Ironport-SBRS: 3.5
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0E3AgChlX5ch41CnoZkHgEGBwaBZYFmg?=
 =?us-ascii?q?RKBAyeEAQeTZIIND5IfhgeBKzcFCwEBGAEKC4FJgnUChC0iOBIBAQMBAQECAQM?=
 =?us-ascii?q?CAQECEAEBAQoLCQgpIwyCOgUCAx8HCgRNOzABAQEBAQEBAQEBAQEBAQEaAg1kA?=
 =?us-ascii?q?wMjBCcZDRULFSoDAgIxFREOBQIEAQEBARcCBIMBASYBgU4FCqomfDMfhCRBQIR?=
 =?us-ascii?q?kBYEviygXgX+BOII2NYMeAoEpBAEBEgGDKYI1IgKHN4JTCoZSgWORPgmBHIYng?=
 =?us-ascii?q?3iDOoN5H4p6iC2QQYxKAhETAYFeVzBxTScRgyeCJIEJAQmCQYpUPjMQjjgPFwQ?=
 =?us-ascii?q?sgXcBAQ?=
X-IPAS-Result: =?us-ascii?q?A0E3AgChlX5ch41CnoZkHgEGBwaBZYFmgRKBAyeEAQeTZII?=
 =?us-ascii?q?ND5IfhgeBKzcFCwEBGAEKC4FJgnUChC0iOBIBAQMBAQECAQMCAQECEAEBAQoLC?=
 =?us-ascii?q?QgpIwyCOgUCAx8HCgRNOzABAQEBAQEBAQEBAQEBAQEaAg1kAwMjBCcZDRULFSo?=
 =?us-ascii?q?DAgIxFREOBQIEAQEBARcCBIMBASYBgU4FCqomfDMfhCRBQIRkBYEviygXgX+BO?=
 =?us-ascii?q?II2NYMeAoEpBAEBEgGDKYI1IgKHN4JTCoZSgWORPgmBHIYng3iDOoN5H4p6iC2?=
 =?us-ascii?q?QQYxKAhETAYFeVzBxTScRgyeCJIEJAQmCQYpUPjMQjjgPFwQsgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.58,444,1544515200"; 
   d="scan'208,217";a="53704846"
Received: from cczrelay01.in2p3.fr ([134.158.66.141])
  by fe4.lbl.gov with ESMTP; 05 Mar 2019 07:33:26 -0800
Received: from [134.158.76.29] (pc-grasland.lal.in2p3.fr [134.158.76.29])
	(authenticated bits=0)
	by cczrelay01.in2p3.fr (8.14.4/8.14.4) with ESMTP id x25FXOd7020711
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <singu...@lbl.gov>; Tue, 5 Mar 2019 16:33:24 +0100
X-Virus-Status: Clean
X-Virus-Scanned: clamav-milter 0.100.2 at cczrelay01
Subject: Re: [Singularity] Re: Thoughts from a Docker -> Singularity
 conversion attempt
To: singularity@lbl.gov
References: <7bb2ddd5-0de0-5bbd-0fa2-d60c36966e57@lal.in2p3.fr>
 <252104d3-a407-45cd-a305-927355fb7492@lbl.gov>
From: Hadrien Grasland <gras...@lal.in2p3.fr>
Message-ID: <edb27021-149e-00a0-f062-c2b8f2d64ede@lal.in2p3.fr>
Date: Tue, 5 Mar 2019 16:34:43 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.5.1
MIME-Version: 1.0
In-Reply-To: <252104d3-a407-45cd-a305-927355fb7492@lbl.gov>
Content-Type: multipart/alternative;
 boundary="------------38E0CACF7DF16D254689B953"
Content-Language: en-US

--------------38E0CACF7DF16D254689B953
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 8bit

Dear Lars,

Thanks for your suggestion! Speaking personally, I am a bit of an 
infrastructure minimalist, so altough I like Singularity's model, it 
would not be attractive enough to motivate me of migrating from a 
two-layer infrastructure (spack + docker) to a five-layer infrastructure 
(spack + docker + hpc-container-maker + docker2singularity + 
singularity). However, I will keep these links around for the benefit of 
colleagues of mine who do not share my opinions on these matters :)

Hadrien


Le 05/03/2019 à 09:39, Lars Bilke a écrit :
> Dear Hadrien,
>
> I just want to draw your attention to the project hpc-container-maker 
> <https://github.com/NVIDIA/hpc-container-maker> which allows to script 
> container definitions with Python. It supports both Singularity and 
> Docker output but I found creating Docker images with a subsequent 
> conversion step to Singularity (e.g. via docker2singularity 
> <https://github.com/singularityware/docker2singularity>) most useful 
> for development (by leveraging Dockers layer caching). I think a lot 
> of your issues can be solved by simple scripting the whole image 
> definition process.
>
> Best,
> Lars
>
> Am Montag, 4. März 2019 16:34:56 UTC+1 schrieb Hadrien Grasland:
>
>     Dear Singularity users,
>
>     I've been packaging HEP software and development environments
>     using a combination of Spack and Docker for a while.
>
>       * Spack gives me customizable and ergonomic software builds,
>         with automated dependency management and peaceful coexistence
>         between different build configurations.
>       * Docker gives me cross-OS binary + environment portability, and
>         a way to "freeze" a snapshot of my rolling Linux distribution
>         of choice in order to momentarily prevent Spack from
>         rebuilding everything over and over again the way it loves to.
>
>     This is what the end result currently looks like:
>     https://github.com/HadrienG2/spack-based-docker
>     <https://github.com/HadrienG2/spack-based-docker> .
>
>     A problem with using Docker for this purpose, though, is that it
>     does too much container/host isolation for my use case. I don't
>     really care for Docker masquerading as a VM by hiding the host
>     filesystem and processes from the container, but I do care about
>     the cumbersome side of remembering to bind mount everything,
>     ending up with root-owned files in these bind mounts if I'm not
>     very careful, and ptrace rights being taken away from me unless I
>     take care to pass the magical "I don't care, I trust this
>     container" flags to the docker run command line. From this
>     perspective, I sometimes feel like I'm fighting Docker's
>     cloud-oriented design a bit too much.
>
>     Which is what led me to investigate Singularity, an experience
>     which I now feel ready to report on.
>
>     ------------------------------------------------------------------------
>
>     Having some previous bad experience from the Docker -> Singularity
>     image conversion machinery, I decided for this attempt to try to
>     stick with a pure Singularity workflow, without Docker getting in
>     the way at any time. This was easier than expected: bootstrapping
>     a zypper-based image actually proved very smooth.
>
>     My feeling from translating my Docker recipes afterwards is that
>     Singularity does deliver beautifully on the final image usability
>     front (hurray for the simple CLI, ptrace privileges, proper file
>     permissions, and /home mounting by default), but feels quite a bit
>     more painful than Docker on the image builder's side. Here are
>     some particular pain points that I encountered, maybe they have
>     some well-known solutions / workarounds ?
>
>       * I miss Docker's build arguments a lot.
>           o A typical use case is building an image twice, once with
>             debug software builds (for debugging) and once with
>             release builds (for end usage and profiling)
>           o Another use case is controlling from remote which version
>             of some software gets built, and to synchronize that with
>             the output image's file name.
>           o A third use case is synchronizing the directory where
>             image files are written across multiple Singularity
>             definition file, and making it externally configurable.
>       * I appreciate Singuarity's attempt to cautiously separate build
>         environment from runtime environment, but find that it makes
>         build environment management difficult:
>           o I often have to write each environment-altering statement
>             three times, once in %post, once in %test, and once in
>             ${SINGULARITY_ENVIRONMENT}
>           o Build environment not being carried over from one parent
>             image to a child image often makes me give up and just
>             write my whole build setup in ${SINGULARITY_ENVIRONMENT}
>             so that I can source that at the beginning of the next image.
>           o %environment is almost never usable for me because most of
>             the time I need some environment to be set both for
>             runtime and for child images.
>       * The idea of separating a build in clear-cut %build, %post,
>         %test phases is nice in theory, but limiting for complex recipes
>           o The folder to which I want to copy files may be created
>             during %post, in which case I need to move files to a
>             temporary directory during %copy and re-move them later.
>           o Some tests can only be run at some stages during the build
>             process, because they rely on a build folder which must be
>             cleaned up at the end of the recipe.
>           o SINGULARITY_ENVIRONMENT not being sourced before %test is
>             painful and uncalled for.
>       * A replacement to Docker layers for build snapshots would be
>         much appreciated.
>           o I certainly don't miss the build performance/size vs
>             recipe readability compromise of Docker saving a layer
>             after every RUN statement...
>           o ...but I do miss being able to quickly investigate a
>             failed build and restart it without going through my whole
>             %post section all over again.
>
>     In short, I would be longing for....
>
>       * A way to use some externally configurable environment in a
>         singularity definition file (including, and I guess that's the
>         difficult part, in the "From:" statement)
>       * An alternative to SINGULARITY_ENVIRONMENT for configuring
>         build environment instead of runtime environment
>       * A less hacky way to pass environment to childe images' build
>         recipes (may or may not be merged with the above)
>       * A way to check if tests are enabled in %post as a more
>         flexible alternative to the %test section
>           o ...and runtime environment being sourced before the %test
>             section begins.
>       * Faster / easier ways to debug failed Singularity builds than
>         modifying the recipe and restarting it from the beginning.
>
>     ...but some of that may be an XY problem coming from my Docker
>     user habits :)
>
>     Cheers,
>     Hadrien
>
> -- 
> You received this message because you are subscribed to the Google 
> Groups "singularity" group.
> To unsubscribe from this group and stop receiving emails from it, send 
> an email to singu...@lbl.gov 
> <mailto:singu...@lbl.gov>.

--------------38E0CACF7DF16D254689B953
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: 8bit

<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  </head>
  <body text="#000000" bgcolor="#FFFFFF">
    <p>Dear Lars,</p>
    <p>Thanks for your suggestion! Speaking personally, I am a bit of an
      infrastructure minimalist, so altough I like Singularity's model,
      it would not be attractive enough to motivate me of migrating from
      a two-layer infrastructure (spack + docker) to a five-layer
      infrastructure (spack + docker + hpc-container-maker +
      docker2singularity + singularity). However, I will keep these
      links around for the benefit of colleagues of mine who do not
      share my opinions on these matters :)</p>
    <p>Hadrien</p>
    <p><br>
    </p>
    <div class="moz-cite-prefix">Le 05/03/2019 à 09:39, Lars Bilke a
      écrit :<br>
    </div>
    <blockquote type="cite"
      cite="mid:252104d3-a407-45...@lbl.gov">
      <meta http-equiv="content-type" content="text/html; charset=UTF-8">
      <div dir="ltr">Dear Hadrien,
        <div><br>
        </div>
        <div>I just want to draw your attention to the project <a
            href="https://github.com/NVIDIA/hpc-container-maker"
            moz-do-not-send="true">hpc-container-maker</a> which allows
          to script container definitions with Python. It supports both
          Singularity and Docker output but I found creating Docker
          images with a subsequent conversion step to Singularity (e.g.
          via <a
            href="https://github.com/singularityware/docker2singularity"
            moz-do-not-send="true">docker2singularity</a>) most useful
          for development (by leveraging Dockers layer caching). I think
          a lot of your issues can be solved by simple scripting the
          whole image definition process.</div>
        <div><br>
        </div>
        <div>Best,</div>
        <div>Lars<br>
          <br>
          Am Montag, 4. März 2019 16:34:56 UTC+1 schrieb Hadrien
          Grasland:
          <blockquote class="gmail_quote" style="margin: 0;margin-left:
            0.8ex;border-left: 1px #ccc solid;padding-left: 1ex;">
            <div text="#000000" bgcolor="#FFFFFF">
              <p>Dear Singularity users,</p>
              <p>I've been packaging HEP software and development
                environments using a combination of Spack and Docker for
                a while.</p>
              <ul>
                <li>Spack gives me customizable and ergonomic software
                  builds, with automated dependency management and
                  peaceful coexistence between different build
                  configurations.</li>
                <li>Docker gives me cross-OS binary + environment
                  portability, and a way to "freeze" a snapshot of my
                  rolling Linux distribution of choice in order to
                  momentarily prevent Spack from rebuilding everything
                  over and over again the way it loves to.</li>
              </ul>
              <p>This is what the end result currently looks like: <a
                  href="https://github.com/HadrienG2/spack-based-docker"
                  target="_blank" rel="nofollow"
onmousedown="this.href='https://www.google.com/url?q\x3dhttps%3A%2F%2Fgithub.com%2FHadrienG2%2Fspack-based-docker\x26sa\x3dD\x26sntz\x3d1\x26usg\x3dAFQjCNEVMJfmHq79fmBcSLUbYN2KFtTJFw';return
                  true;"
onclick="this.href='https://www.google.com/url?q\x3dhttps%3A%2F%2Fgithub.com%2FHadrienG2%2Fspack-based-docker\x26sa\x3dD\x26sntz\x3d1\x26usg\x3dAFQjCNEVMJfmHq79fmBcSLUbYN2KFtTJFw';return
                  true;" moz-do-not-send="true">https://github.com/HadrienG2/<wbr>spack-based-docker</a>
                .</p>
              <p>A problem with using Docker for this purpose, though,
                is that it does too much container/host isolation for my
                use case. I don't really care for Docker masquerading as
                a VM by hiding the host filesystem and processes from
                the container, but I do care about the cumbersome side
                of remembering to bind mount everything, ending up with
                root-owned files in these bind mounts if I'm not very
                careful, and ptrace rights being taken away from me
                unless I take care to pass the magical "I don't care, I
                trust this container" flags to the docker run command
                line. From this perspective, I sometimes feel like I'm
                fighting Docker's cloud-oriented design a bit too much.</p>
              <p>Which is what led me to investigate Singularity, an
                experience which I now feel ready to report on.</p>
              <hr width="100%" size="2">
              <p>Having some previous bad experience from the Docker
                -&gt; Singularity image conversion machinery, I decided
                for this attempt to try to stick with a pure Singularity
                workflow, without Docker getting in the way at any time.
                This was easier than expected: bootstrapping a
                zypper-based image actually proved very smooth.<br>
              </p>
              <p>My feeling from translating my Docker recipes
                afterwards is that Singularity does deliver beautifully
                on the final image usability front (hurray for the
                simple CLI, ptrace privileges, proper file permissions,
                and /home mounting by default), but feels quite a bit
                more painful than Docker on the image builder's side.
                Here are some particular pain points that I encountered,
                maybe they have some well-known solutions / workarounds
                ?</p>
              <ul>
                <li>I miss Docker's build arguments a lot.<br>
                </li>
                <ul>
                  <li>A typical use case is building an image twice,
                    once with debug software builds (for debugging) and
                    once with release builds (for end usage and
                    profiling)</li>
                  <li>Another use case is controlling from remote which
                    version of some software gets built, and to
                    synchronize that with the output image's file name.</li>
                  <li>A third use case is synchronizing the directory
                    where image files are written across multiple
                    Singularity definition file, and making it
                    externally configurable.<br>
                  </li>
                </ul>
                <li>I appreciate Singuarity's attempt to cautiously
                  separate build environment from runtime environment,
                  but find that it makes build environment management
                  difficult:</li>
                <ul>
                  <li>I often have to write each environment-altering
                    statement three times, once in %post, once in %test,
                    and once in ${SINGULARITY_ENVIRONMENT}</li>
                  <li>Build environment not being carried over from one
                    parent image to a child image often makes me give up
                    and just write my whole build setup in
                    ${SINGULARITY_ENVIRONMENT} so that I can source that
                    at the beginning of the next image.</li>
                  <li>%environment is almost never usable for me because
                    most of the time I need some environment to be set
                    both for runtime and for child images.<br>
                  </li>
                </ul>
                <li>The idea of separating a build in clear-cut %build,
                  %post, %test phases is nice in theory, but limiting
                  for complex recipes</li>
                <ul>
                  <li>The folder to which I want to copy files may be
                    created during %post, in which case I need to move
                    files to a temporary directory during %copy and
                    re-move them later.</li>
                  <li>Some tests can only be run at some stages during
                    the build process, because they rely on a build
                    folder which must be cleaned up at the end of the
                    recipe.</li>
                  <li>SINGULARITY_ENVIRONMENT not being sourced before
                    %test is painful and uncalled for.<br>
                  </li>
                </ul>
                <li>A replacement to Docker layers for build snapshots
                  would be much appreciated.</li>
                <ul>
                  <li>I certainly don't miss the build performance/size
                    vs recipe readability compromise of Docker saving a
                    layer after every RUN statement...</li>
                  <li>...but I do miss being able to quickly investigate
                    a failed build and restart it without going through
                    my whole %post section all over again.</li>
                </ul>
              </ul>
              <p>In short, I would be longing for....</p>
              <ul>
                <li>A way to use some externally configurable
                  environment in a singularity definition file
                  (including, and I guess that's the difficult part, in
                  the "From:" statement)</li>
                <li>An alternative to SINGULARITY_ENVIRONMENT for
                  configuring build environment instead of runtime
                  environment</li>
                <li>A less hacky way to pass environment to childe
                  images' build recipes (may or may not be merged with
                  the above)<br>
                </li>
                <li>A way to check if tests are enabled in %post as a
                  more flexible alternative to the %test section</li>
                <ul>
                  <li>...and runtime environment being sourced before
                    the %test section begins.</li>
                </ul>
                <li>Faster / easier ways to debug failed Singularity
                  builds than modifying the recipe and restarting it
                  from the beginning.</li>
              </ul>
              <p>...but some of that may be an XY problem coming from my
                Docker user habits :)<br>
              </p>
              <p>Cheers,<br>
                Hadrien<br>
              </p>
            </div>
          </blockquote>
        </div>
      </div>
      -- <br>
      You received this message because you are subscribed to the Google
      Groups "singularity" group.<br>
      To unsubscribe from this group and stop receiving emails from it,
      send an email to <a href="mailto:singu...@lbl.gov"
        moz-do-not-send="true">singu...@lbl.gov</a>.<br>
    </blockquote>
  </body>
</html>

--------------38E0CACF7DF16D254689B953--
