X-Received: by 10.129.85.209 with SMTP id j200mr6422461ywb.40.1477749591755;
        Sat, 29 Oct 2016 06:59:51 -0700 (PDT)
X-BeenThere: singularity@lbl.gov
Received: by 10.36.28.73 with SMTP id c70ls910358itc.13.canary-gmail; Sat, 29
 Oct 2016 06:59:51 -0700 (PDT)
X-Received: by 10.99.213.21 with SMTP id c21mr28311792pgg.176.1477749591009;
        Sat, 29 Oct 2016 06:59:51 -0700 (PDT)
Return-Path: <bock...@gmail.com>
Received: from fe4.lbl.gov (fe4.lbl.gov. [128.3.41.71])
        by mx.google.com with ESMTP id l184si7830930pfc.285.2016.10.29.06.59.50
        for <singu...@lbl.gov>;
        Sat, 29 Oct 2016 06:59:50 -0700 (PDT)
Received-SPF: pass (google.com: domain of bock...@gmail.com designates 209.85.218.46 as permitted sender) client-ip=209.85.218.46;
Authentication-Results: mx.google.com;
       dkim=pass head...@gmail.com;
       spf=pass (google.com: domain of bock...@gmail.com designates 209.85.218.46 as permitted sender) smtp.mailfrom=bock...@gmail.com
IronPort-PHdr: 9a23:J7gKXRJlSyeWPrw12tmcpTZWNBhigK39O0sv0rFitYgVKfvxwZ3uMQTl6Ol3ixeRBMOAuqgC1Led7fCocFdDyK7JiGoFfp1IWk1NouQttCtkPvS4D1bmJuXhdS0wEZcKflZk+3amLRodQ56mNBXsq3G/pQQfBg/4fVIsYL+kQMiN0o/ph6ibwN76W01wnj2zYLd/fl2djD76kY0ou7ZkMbs70RDTo3FFKKx8zGJsIk+PzV6nvp/jtKN592xsn95pt4seEPayQqIjULYNCT0nN3wyttbqsxbeSQKV52cNEXgQiQdCGAPf7Rv3dpP7tm31sfQu5S+BIMejSLk1XSilvbxqThD1jC4dNiIos3zRkdF6l6lBoRisjxh1x8jbZ5/GCP0rZaLbcs4eTHBAQtd5UyZFRIy7cdghFe0EaMxCroD773EJphizAQylAqu7wDhDhXLy2KQ8++skGADCmgcnGoRd4zzvsNzpOfJKAqiOx67SwGCGMf4=
X-Ironport-SBRS: 3.4
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: A2FTAABaqhRYhi7aVdFdHAEBBAEBCgEBFwEBBAEBCgEBgkg3AQEBAQF3fYM/iXeXAIJXhXWLcoFFGyQDHQEGgkmBXIFaAiOBXj8UAQEBAQEBAQEBAQECEAEBAQgLCwkdMIIzBAIBAhEFBAE5CgYBAQEBAQEBAQEjAQEBAQEBAQEBAQEBAQEBGgINHhMDDwIZAQEBAwESCAkdAQ0OHgMBCwYFCw0WAQkKAgIjDgMBBQELEQ4HBAEaAgQBh05JAQMPCAWkHIEyPzKLRoFrgl8Fg1IKGScNVIMVAQEBAQEBBAEBAQEBAQEBAQEBFAIGEIgqCIJQhBkKAQYBHBkUGwGCOy2CLwWIOwNrhhtEihCGMIV/hAGBbk6HKA4jhW+MfhOCQDGBEQ8PWAuDGywPEQsYgVlUB4YjAQENFzAxgTEBAQE
X-IronPort-AV: E=Sophos;i="5.31,563,1473145200"; 
   d="scan'208,217";a="53576938"
Received: from mail-oi0-f46.google.com ([209.85.218.46])
  by fe4.lbl.gov with ESMTP; 29 Oct 2016 06:59:47 -0700
Received: by mail-oi0-f46.google.com with SMTP id y2so160056898oie.0
        for <singu...@lbl.gov>; Sat, 29 Oct 2016 06:59:47 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=from:content-transfer-encoding:mime-version:date:subject:message-id
         :references:in-reply-to:to;
        bh=gL5W4ArxiohLvlXx1EkY8LEB0wh+FRdM4cLxPoNaIhw=;
        b=iIilu2SErhtlEqQ8Wr2xptp97QFVnYmQz5TjYfCmoU/xVX+hxDnEGec1B6XF0pajO4
         GWVtmsNTqn7CJNKerWpctuCLsLhCNDCzIPie47UaIUUSI5qIe5ezyHnZjuELtCG2ul7M
         ZhljnDkbXFoRYPe59QTMvQ4rI7HKeh3YTVIeJ5h1D8C1e1O0wXNceTl0V7WiAAdENuzb
         T7Sm0IK8ttVH8kfjIG2omNfV/5t506C+70f0YXE+lF4kRPSYTMph1WgAkyW8AyRhvk4v
         B0VvlPUCQG6YutJ1I//jyLW70zh2DmrYloKVTv1ZdhS2XN7ZpL44bkyK5U2wHvtsIGjI
         7clA==
X-Gm-Message-State: ABUngvckOK5e40PJ4WpAAN3oWiJf8+7xCth2HBrpx1an1Ytp0GMF9/sjfQ3yDfvzpV2dxQ==
X-Received: by 10.202.89.136 with SMTP id n130mr4687621oib.29.1477749586527;
        Sat, 29 Oct 2016 06:59:46 -0700 (PDT)
Return-Path: <bock...@gmail.com>
Received: from [10.0.1.5] (cpe-97-98-182-58.neb.res.rr.com. [97.98.182.58])
        by smtp.gmail.com with ESMTPSA id f68sm5489895otb.36.2016.10.29.06.59.44
        for <singu...@lbl.gov>
        (version=TLS1 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
        Sat, 29 Oct 2016 06:59:44 -0700 (PDT)
From: Brian Bockelman <bock...@gmail.com>
Content-Type: multipart/alternative;
	boundary=Apple-Mail-F18C8232-7CC8-46FD-8E04-4BDEED120E69
Content-Transfer-Encoding: 7bit
Mime-Version: 1.0 (1.0)
Date: Sat, 29 Oct 2016 08:59:43 -0500
Subject: Re: [Singularity] Proprietary SW: howto restrict container access to local computing site?
Message-Id: <B9051353-4251-4C3E-8FD4-E8F6DFB7C2BA@gmail.com>
References: <9f087d24-a3d9-4e10-9d19-620041b5fd31@lbl.gov> <CAN7etTy76KQnzdnG8XCMZZL35=ackWg0cdTO3kYkUjV4nUquNQ@mail.gmail.com> <AB7F66F3-4CE6-42BE-B18D-73A1A0EF4C3F@open-mpi.org> <a97f2a6b-fec9-404c-93e3-7e36530be033@lbl.gov> <1ADF4713-7CC9-47A4-9F45-1E730637EA21@open-mpi.org> <CAN7etTyvb52CtjDxZqVphBpHwQg+d9W7H72DEMuw4R_+=WDpGQ@mail.gmail.com> <b6199758-c299-41b8-b506-3b485112fc22@lbl.gov> <CAN7etTz6W4jSU79yoAqCu6E9Nin7GTyvMAJt_8OgEeDff5tuSg@mail.gmail.com>
In-Reply-To: <CAN7etTz6W4jSU79yoAqCu6E9Nin7GTyvMAJt_8OgEeDff5tuSg@mail.gmail.com>
To: singularity@lbl.gov
X-Mailer: iPhone Mail (14A403)

--Apple-Mail-F18C8232-7CC8-46FD-8E04-4BDEED120E69
Content-Type: text/plain;
	charset=utf-8
Content-Transfer-Encoding: quoted-printable

A few thoughts:
- it'd be straightforward to setup a group at install time and allow the ru=
ntime to execute containers owned by that GID.  Then, the sysadmin could al=
low any logged in user to execute - but not read - the container.
- things get significantly trickier if you want to allow only a subset of u=
sers in a certain container. I suppose the image itself could declare the a=
llowed users/groups - but then you have a likely layering problem (image sh=
ouldn't need knowledge about the host system) and might not be an effective=
 protection inside a user namespace.
- we likely need to have some level of access control for users in general.=
  I forget - do we already limit to users with an enabled login?  I'd hate =
to see user nobody and httpd be able to start containers by default.
  - most platforms have an idea of a system daemon UID range (historically =
1-100, but I think 1-500 and 1-1000 are more modern values for this).  It m=
ight be reasonable and simple to have a minimum UID configuration value for=
 starting containers.
- handling key matter and doing any sort of encryption gets nasty and compl=
icated awfully quickly. I'd rather rely on POSIX mechanisms.
  - best save our energy in cryptography to the simple stuff, like signing =
releases!

HTH,

Brian

Sent from my iPhone

> On Oct 28, 2016, at 8:55 PM, Gregory M. Kurtzer <gmku...@lbl.gov> wrote:
>=20
> Hi Stefan,
>=20
> This will end up circumventing standard POSIX permissions ACLs on contain=
ers, so I don't like the implementation. But, I do like the feature idea!
>=20
> So the question in my mind though is how to we do this in a configurable =
manner? Perhaps we do it by group ownership? Or perhaps we have a different=
 configuration file for special containers and in each configuration file, =
the system admin can define things like the path of the file, and if they m=
atch, then allow Singularity to open it as you defined...? <just brainstorm=
ing outloud here>...
>=20
> Thoughts?
>=20
>> On Fri, Oct 28, 2016 at 1:13 AM, 'Stefan Kombrink' via singularity <sing=
u...@lbl.gov> wrote:
>> Okay, after giving it more thought I found another solution for our need=
s:
>>=20
>> Have a look at this little patch:
>>=20
>> --- src/lib/rootfs/image/image.c    2016-10-10 19:25:59.000000000 +0200
>> +++ /home/ul/ul_kiz/ul_l_nsn25/image.c    2016-10-28 10:04:26.974707586 =
+0200
>> @@ -81,7 +81,16 @@
>>      } else {
>>          if ( ( image_fp =3D fopen(source, "r") ) =3D=3D NULL ) { // Fla=
wfinder: ignore
>>              singularity_message(ERROR, "Could not open image (read only=
) %s: %s\n", source, strerror(errno));
>> -            ABORT(255);
>> +            singularity_message(ERROR, "Trying with escalated privilege=
s...\n");
>> +            singularity_priv_escalate();
>> +            if ( ( image_fp =3D fopen(source, "r") ) !=3D NULL ) {
>> +                singularity_message(ERROR, "Now we succeeded :)\n");
>> +            } else {
>> +                singularity_message(ERROR, "No, we again failed :('\n")=
;
>> +                singularity_priv_drop();
>> +                ABORT(255);
>> +            }
>> +            singularity_priv_drop();
>>          }
>>      }
>>=20
>> ----
>>=20
>> Here's the output when I run the patched exec:
>>=20
>> [ul_l_nsn25@adm02 ~]$ ls -lah vre2 && singularity exec -p vre2 ps aux  =
=20
>> -rwx------ 1 root root 1.1G Oct 27 14:32 vre2
>> ERROR  : Could not open image (read only) vre2: Permission denied
>> ERROR  : Trying with escalated privileges...
>> ERROR  : Now we succeeded :)
>> USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
>> ul_l_ns+     1  0.0  0.0   7132   636 pts/0    R+   08:12   0:00 ps aux
>>=20
>> If I apply this exec.exec falls back to escalated privileges to open the=
 singularity container. That way root can be the owner and have exclusive r=
ead/write access to it.
>> As I understand any other command shouldn't have access to that containe=
r then. Is there anything to be considered security-wise?
>> Would be lovely to have such functionality merged into master.
>>=20
>> thanks and greetings Stefan
>>=20
>>=20
>>=20
>> Am Mittwoch, 26. Oktober 2016 23:48:11 UTC+2 schrieb Gregory M. Kurtzer:
>>>=20
>>> Even worse when you are dealing with users who have controlled software=
. Most container platforms don't offer the granularity of ACLs necessary to=
 limit container access to a subset of users on a particular host.
>>>=20
>>> On second thought,... I don't even want to think about this... Purging =
from memory so I can plead ignorance (which isn't hard for me). haha
>>>=20
>>>=20
>>>=20
>>>> On Wed, Oct 26, 2016 at 1:24 PM, r...@open-mpi.org <r...@open-mpi.org>=
 wrote:
>>>>=20
>>>>=20
>>>>> On Oct 26, 2016, at 1:10 PM, Stefan Kombrink <ste...@googlemail.com> =
wrote:
>>>>>=20
>>>>> Yeah, all these licensing issues are really complex .. :D
>>>>>=20
>>>>> Am Mittwoch, 26. Oktober 2016 21:00:58 UTC+2 schrieb r...@open-mpi.or=
g:
>>>>>>=20
>>>>>> I=E2=80=99ve been pondering a related issue lately. Suppose I create=
 a container that includes a licensed library, and then I migrate that cont=
ainer to another cluster. Depending on how the license is enforced (e.g., a=
 license manager daemon vs a local =E2=80=9Ctoken=E2=80=9D), I may now be o=
perating the container in violation of the license.
>>>>>>=20
>>>>>> Now suppose I distribute the container - have I now enabled everyone=
 to use that licensed software without paying for it? You have a similar pr=
oblem with your proposal - what if I distribute the encryption key along wi=
th the container?
>>>>>=20
>>>>> Sure, if you distributed the private key that allows the access to th=
e encrypted container. In my use case, however, I'd prevent this from happe=
ning  by having it installed on our cluster with root-only access exclusive=
ly.
>>>>> =20
>>>>>>=20
>>>>>> Related question: suppose the library is actually GPL. Now GPL doesn=
=E2=80=99t hold sway unless you distribute your software. If you statically=
 link your code against a GPL library and then distribute that binary, we k=
now that makes your code subject to the GPL.
>>>>>>=20
>>>>>> However, if I put a GPL library in a container, and then distribute =
the container - have I now caused my code that links against that library a=
t runtime to become subject to GPL? I am distributing the combination, albe=
it they are not actually combined until you run the container.
>>>>>=20
>>>>> Aaah took me long to understand what you actually meant: Technically =
no. You're just not allowed to execute the container ... hehe
>>>>> Here's another one: If I containerize licensed software into encrypte=
d containers, can I be sued for distributing it? Or just for distributing t=
he private key?
>>>>=20
>>>> Oooohh...now my head really hurts! I honestly don=E2=80=99t know. You =
distributed the software, but it isn=E2=80=99t usable without the key...but=
 you _did_ distribute it.
>>>>=20
>>>> Sounds like something to ask a lawyer.
>>>>=20
>>>>> =20
>>>>>>=20
>>>>>> Makes my head hurt...
>>>>>> Ralph
>>>>>>=20
>>>>>>=20
>>>>>>> On Oct 26, 2016, at 11:21 AM, Gregory M. Kurtzer <gm...@lbl.gov> wr=
ote:
>>>>>>>=20
>>>>>>> Hi Stefan,
>>>>>>>=20
>>>>>>> This is an interesting idea! There are a couple of ways to handle i=
t considering that Singularity has a privileged mode of operation... We can=
 look into encrypting the file system contained within the image and locate=
 the key within a file that only has root access, then count on our privile=
ged code to read that in.
>>>>>>>=20
>>>>>>> Technically we can also do this by circumventing POSIX permissions =
on the image files, and allow containers that can only be read by root to b=
e run by normal users, but then how do we implement this securely and relia=
bly? ... I am open to suggestions. :)
>>>>>>>=20
>>>>>>> Greg
>>>>>>>=20
>>>>>>>> On Mon, Oct 24, 2016 at 2:40 AM, 'Stefan Kombrink' via singularity=
 <si...@lbl.gov> wrote:
>>>>>>>> Hi,
>>>>>>>>=20
>>>>>>>>  I wonder what are the possibilities to offer licensed SW containe=
rized by singularity while still preventing users to copy the container.
>>>>>>>> Right now we achieve this by allowing certain binaries to be execu=
table but not readable.
>>>>>>>> If I get it right there is no way to let users run containers they=
 can't read but execute.
>>>>>>>> Anyways this approach using access rights seems very limited.
>>>>>>>>=20
>>>>>>>> I had that idea that containers might be encrypted using a key whi=
ch can be installed in the system alongside singularity and allow to decryp=
t the container during loading.
>>>>>>>> The appropriate key could be loaded prior during the suid_exec par=
t.
>>>>>>>> Am I overlooking something?
>>>>>>>> Is there an easier way to achieve what I want?
>>>>>>>>=20
>>>>>>>> I'd really love to come up with a viable solution for that problem=
 as it is an obstacle for containerization/virtualization which affects man=
y SW suites we are currently offering...
>>>>>>>>=20
>>>>>>>> greets and thanks
>>>>>>>> Stefan
>>>>>>>>=20
>>>>>>>> --=20
>>>>>>>> You received this message because you are subscribed to the Google=
 Groups "singularity" group.
>>>>>>>> To unsubscribe from this group and stop receiving emails from it, =
send an email to singu...@lbl.gov.
>>>>>>>=20
>>>>>>>=20
>>>>>>>=20
>>>>>>> --=20
>>>>>>> Gregory M. Kurtzer
>>>>>>> HPC Systems Architect and Technology Developer
>>>>>>> Lawrence Berkeley National Laboratory HPCS
>>>>>>> University of California Berkeley Research IT
>>>>>>> Singularity Linux Containers (http://singularity.lbl.gov/)
>>>>>>> Warewulf Cluster Management (http://warewulf.lbl.gov/)
>>>>>>> GitHub: https://github.com/gmkurtzer, Twitter: https://twitter.com/=
gmkurtzer
>>>>>>>=20
>>>>>>> --=20
>>>>>>> You received this message because you are subscribed to the Google =
Groups "singularity" group.
>>>>>>> To unsubscribe from this group and stop receiving emails from it, s=
end an email to singu...@lbl.gov.
>>>>>>=20
>>>>=20
>>>> --=20
>>>> You received this message because you are subscribed to the Google Gro=
ups "singularity" group.
>>>> To unsubscribe from this group and stop receiving emails from it, send=
 an email to singu...@lbl.gov.
>>>=20
>>>=20
>>>=20
>>>=20
>>> --=20
>>> Gregory M. Kurtzer
>>> HPC Systems Architect and Technology Developer
>>> Lawrence Berkeley National Laboratory HPCS
>>> University of California Berkeley Research IT
>>> Singularity Linux Containers (http://singularity.lbl.gov/)
>>> Warewulf Cluster Management (http://warewulf.lbl.gov/)
>>> GitHub: https://github.com/gmkurtzer, Twitter: https://twitter.com/gmku=
rtzer
>>=20
>> --=20
>> You received this message because you are subscribed to the Google Group=
s "singularity" group.
>> To unsubscribe from this group and stop receiving emails from it, send a=
n email to singu...@lbl.gov.
>=20
>=20
>=20
> --=20
> Gregory M. Kurtzer
> HPC Systems Architect and Technology Developer
> Lawrence Berkeley National Laboratory HPCS
> University of California Berkeley Research IT
> Singularity Linux Containers (http://singularity.lbl.gov/)
> Warewulf Cluster Management (http://warewulf.lbl.gov/)
> GitHub: https://github.com/gmkurtzer, Twitter: https://twitter.com/gmkurt=
zer
> --=20
> You received this message because you are subscribed to the Google Groups=
 "singularity" group.
> To unsubscribe from this group and stop receiving emails from it, send an=
 email to singu...@lbl.gov.

--Apple-Mail-F18C8232-7CC8-46FD-8E04-4BDEED120E69
Content-Type: text/html;
	charset=utf-8
Content-Transfer-Encoding: quoted-printable

<html><head><meta http-equiv=3D"content-type" content=3D"text/html; charset=
=3Dutf-8"></head><body dir=3D"auto"><div><div style=3D"direction: inherit;"=
>A few thoughts:</div><div style=3D"direction: inherit;">- it'd be straight=
forward to setup a group at install time and allow the runtime to execute c=
ontainers owned by that GID. &nbsp;Then, the sysadmin could allow any logge=
d in user to execute - but not read - the container.</div><div style=3D"dir=
ection: inherit;">- things get significantly trickier if you want to allow =
only a subset of users in a certain container. I suppose the image itself c=
ould declare the allowed users/groups - but then you have a likely layering=
 problem (image shouldn't need knowledge about the host system) and might n=
ot be an effective protection inside a user namespace.</div><div style=3D"d=
irection: inherit;">- we likely need to have some level of access control f=
or users in general. &nbsp;I forget - do we already limit to users with an =
enabled login? &nbsp;I'd hate to see user nobody and httpd be able to start=
 containers by default.</div><div style=3D"direction: inherit;">&nbsp; - mo=
st platforms have an idea of a system daemon UID range (historically 1-100,=
 but I think 1-500 and 1-1000 are more modern values for this). &nbsp;It mi=
ght be reasonable and simple to have a minimum UID configuration value for =
starting containers.</div><div style=3D"direction: inherit;">- handling key=
 matter and doing any sort of encryption gets nasty and complicated awfully=
 quickly. I'd rather rely on POSIX mechanisms.</div><div style=3D"direction=
: inherit;">&nbsp; - best save our energy in cryptography to the simple stu=
ff, like signing releases!</div><div style=3D"direction: inherit;"><br></di=
v><div style=3D"direction: inherit;">HTH,</div><div style=3D"direction: inh=
erit;"><br></div><div style=3D"direction: inherit;">Brian</div><div style=
=3D"direction: inherit;"><br></div>Sent from my iPhone</div><div><br>On Oct=
 28, 2016, at 8:55 PM, Gregory M. Kurtzer &lt;<a href=3D"mailto:gmku...@lbl=
.gov">gmku...@lbl.gov</a>&gt; wrote:<br><br></div><blockquote type=3D"cite"=
><div><div dir=3D"ltr">Hi Stefan,<div><br></div><div>This will end up circu=
mventing standard POSIX permissions ACLs on containers, so I don't like the=
 implementation. But, I do like the feature idea!</div><div><br></div><div>=
So the question in my mind though is how to we do this in a configurable ma=
nner? Perhaps we do it by group ownership? Or perhaps we have a different c=
onfiguration file for special containers and in each configuration file, th=
e system admin can define things like the path of the file, and if they mat=
ch, then allow Singularity to open it as you defined...? &lt;just brainstor=
ming outloud here&gt;...</div><div><br></div><div>Thoughts?</div></div><div=
 class=3D"gmail_extra"><br><div class=3D"gmail_quote">On Fri, Oct 28, 2016 =
at 1:13 AM, 'Stefan Kombrink' via singularity <span dir=3D"ltr">&lt;<a href=
=3D"mailto:singu...@lbl.gov" target=3D"_blank">singu...@lbl.gov</a>&gt;</sp=
an> wrote:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;=
border-left:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr">Okay, after g=
iving it more thought I found another solution for our needs:<br><br>Have a=
 look at this little patch:<br><br>--- src/lib/rootfs/image/image.c&nbsp;&n=
bsp;<wbr>&nbsp; 2016-10-10 19:25:59.000000000 +0200<br>+++ /home/ul/ul_kiz/=
ul_l_nsn25/<wbr>image.c&nbsp;&nbsp;&nbsp; 2016-10-28 10:04:26.974707586 +02=
00<br>@@ -81,7 +81,16 @@<br>&nbsp;&nbsp;&nbsp;&nbsp; } else {<br>&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ( ( image_fp =3D fopen(source, "r=
") ) =3D=3D NULL ) { // Flawfinder: ignore<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; singularity_message(ERROR, "Cou=
ld not open image (read only) %s: %s\n", source, strerror(errno));<br>-&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ABORT(255);<=
br>+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sing=
ularity_message(ERROR, "Trying with escalated privileges...\n");<br>+&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; singularity_pr=
iv_escalate();<br>+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; if ( ( image_fp =3D fopen(source, "r") ) !=3D NULL ) {<br>+&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; singularity_message(ERROR, "Now we succeeded :)\n");<br>+&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br>+&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp; singularity_message(ERROR, "No, we again failed :('\n");<br>+=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; singularity_priv_drop();<br>+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ABORT(255);<br=
>+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>+=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; singular=
ity_priv_drop();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&=
nbsp;&nbsp;&nbsp;&nbsp; }<br><br>----<br><br>Here's the output when I run t=
he patched exec:<br><br>[ul_l_nsn25@adm02 ~]$ ls -lah vre2 &amp;&amp; singu=
larity exec -p vre2 ps aux&nbsp;&nbsp; <br>-rwx------ 1 root root 1.1G Oct =
27 14:32 vre2<br>ERROR&nbsp; : Could not open image (read only) vre2: Permi=
ssion denied<br>ERROR&nbsp; : Trying with escalated privileges...<br>ERROR&=
nbsp; : Now we succeeded :)<br>USER&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PID=
 %CPU %MEM&nbsp;&nbsp;&nbsp; VSZ&nbsp;&nbsp; RSS TTY&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp; STAT START&nbsp;&nbsp; TIME COMMAND<br>ul_l_ns+&nbsp;&nbsp;&nbsp;&n=
bsp; 1&nbsp; 0.0&nbsp; 0.0&nbsp;&nbsp; 7132&nbsp;&nbsp; 636 pts/0&nbsp;&nbs=
p;&nbsp; R+&nbsp;&nbsp; 08:12&nbsp;&nbsp; 0:00 ps aux<br><br>If I apply thi=
s exec.exec falls back to escalated privileges to open the singularity cont=
ainer. That way root can be the owner and have exclusive read/write access =
to it.<br>As I understand any other command shouldn't have access to that c=
ontainer then. Is there anything to be considered security-wise?<br>Would b=
e lovely to have such functionality merged into master.<br><br>thanks and g=
reetings Stefan<span class=3D""><br><br><br><br>Am Mittwoch, 26. Oktober 20=
16 23:48:11 UTC+2 schrieb Gregory M. Kurtzer:</span><blockquote class=3D"gm=
ail_quote" style=3D"margin:0;margin-left:0.8ex;border-left:1px #ccc solid;p=
adding-left:1ex"><span class=3D""><div dir=3D"ltr">Even worse when you are =
dealing with users who have controlled software. Most container platforms d=
on't offer the granularity of ACLs necessary to limit container access to a=
 subset of users on a particular host.<div><br><div>On second thought,... I=
 don't even want to think about this... Purging from memory so I can plead =
ignorance (which isn't hard for me). haha<div><br></div><div><br></div></di=
v></div></div></span><div><br><div class=3D"gmail_quote">On Wed, Oct 26, 20=
16 at 1:24 PM, <a rel=3D"nofollow">r...@open-mpi.org</a> <span dir=3D"ltr">=
&lt;<a rel=3D"nofollow">r...@open-mpi.org</a>&gt;</span> wrote:<div><div cl=
ass=3D"h5"><br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex=
;border-left:1px #ccc solid;padding-left:1ex"><div style=3D"word-wrap:break=
-word"><br><div><span><blockquote type=3D"cite"><div>On Oct 26, 2016, at 1:=
10 PM, Stefan Kombrink &lt;<a rel=3D"nofollow">ste...@googlemail.com</a>&gt=
; wrote:</div><br><div><div dir=3D"ltr">Yeah, all these licensing issues ar=
e really complex .. :D<br><br>Am Mittwoch, 26. Oktober 2016 21:00:58 UTC+2 =
schrieb r...@<a href=3D"http://open-mpi.org" rel=3D"nofollow" target=3D"_bl=
ank">open-mpi.org</a>:<blockquote class=3D"gmail_quote" style=3D"margin:0;m=
argin-left:0.8ex;border-left:1px #ccc solid;padding-left:1ex"><div style=3D=
"word-wrap:break-word">I=E2=80=99ve been pondering a related issue lately. =
Suppose I create a container that includes a licensed library, and then I m=
igrate that container to another cluster. Depending on how the license is e=
nforced (e.g., a license manager daemon vs a local =E2=80=9Ctoken=E2=80=9D)=
, I may now be operating the container in violation of the license.<div><br=
></div><div>Now suppose I distribute the container - have I now enabled eve=
ryone to use that licensed software without paying for it? You have a simil=
ar problem with your proposal - what if I distribute the encryption key alo=
ng with the container?</div></div></blockquote><div><br>Sure, if you distri=
buted the private key that allows the access to the encrypted container. In=
 my use case, however, I'd prevent this from happening&nbsp; by having it i=
nstalled on our cluster with root-only access exclusively.<br>&nbsp;</div><=
blockquote class=3D"gmail_quote" style=3D"margin:0;margin-left:0.8ex;border=
-left:1px #ccc solid;padding-left:1ex"><div style=3D"word-wrap:break-word">=
<div><br></div><div>Related question: suppose the library is actually GPL. =
Now GPL doesn=E2=80=99t hold sway unless you distribute your software. If y=
ou statically link your code against a GPL library and then distribute that=
 binary, we know that makes your code subject to the GPL.</div><div><br></d=
iv><div>However, if I put a GPL library in a container, and then distribute=
 the container - have I now caused my code that links against that library =
at runtime to become subject to GPL? I am distributing the combination, alb=
eit they are not actually combined until you run the container.</div></div>=
</blockquote><div><br>Aaah took me long to understand what you actually mea=
nt: Technically no. You're just not allowed to execute the container ... he=
he<br>Here's another one: If I containerize licensed software into encrypte=
d containers, can I be sued for distributing it? Or just for distributing t=
he private key?<br></div></div></div></blockquote><div><br></div></span>Ooo=
ohh...now my head really hurts! I honestly don=E2=80=99t know. You distribu=
ted the software, but it isn=E2=80=99t usable without the key...but you _di=
d_ distribute it.</div><div><br></div><div>Sounds like something to ask a l=
awyer.</div><div><div><div><br><blockquote type=3D"cite"><div><div dir=3D"l=
tr"><div>&nbsp;</div><blockquote class=3D"gmail_quote" style=3D"margin:0;ma=
rgin-left:0.8ex;border-left:1px #ccc solid;padding-left:1ex"><div style=3D"=
word-wrap:break-word"><div><br></div><div>Makes my head hurt...</div><div>R=
alph</div><div><br></div><div><br><div><blockquote type=3D"cite"><div>On Oc=
t 26, 2016, at 11:21 AM, Gregory M. Kurtzer &lt;<a rel=3D"nofollow">gm...@l=
bl.gov</a>&gt; wrote:</div><br><div><div dir=3D"ltr">Hi Stefan,<div><br></d=
iv><div>This is an interesting idea! There are a couple of ways to handle i=
t considering that Singularity has a privileged mode of operation... We can=
 look into encrypting the file system contained within the image and locate=
 the key within a file that only has root access, then count on our privile=
ged code to read that in.</div><div><br></div><div>Technically we can also =
do this by circumventing POSIX permissions on the image files, and allow co=
ntainers that can only be read by root to be run by normal users, but then =
how do we implement this securely and reliably? ... I am open to suggestion=
s. :)</div><div><br></div><div>Greg</div></div><div><br><div class=3D"gmail=
_quote">On Mon, Oct 24, 2016 at 2:40 AM, 'Stefan Kombrink' via singularity =
<span dir=3D"ltr">&lt;<a rel=3D"nofollow">si...@lbl.gov</a>&gt;</span> wrot=
e:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-l=
eft:1px #ccc solid;padding-left:1ex"><div dir=3D"ltr">Hi,<br><br>&nbsp;I wo=
nder what are the possibilities to offer licensed SW containerized by singu=
larity while still preventing users to copy the container.<br>Right now we =
achieve this by allowing certain binaries to be executable but not readable=
.<br>If I get it right there is no way to let users run containers they can=
't read but execute.<br>Anyways this approach using access rights seems ver=
y limited.<br><br>I had that idea that containers might be encrypted using =
a key which can be installed in the system alongside singularity and allow =
to decrypt the container during loading.<br>The appropriate key could be lo=
aded prior during the suid_exec part.<br>Am I overlooking something?<br>Is =
there an easier way to achieve what I want?<br><br>I'd really love to come =
up with a viable solution for that problem as it is an obstacle for contain=
erization/virtualizatio<wbr>n which affects many SW suites we are currently=
 offering...<br><br>greets and thanks<span><font color=3D"#888888"><br>Stef=
an<br></font></span></div><span><font color=3D"#888888"><div><br></div>

-- <br>
You received this message because you are subscribed to the Google Groups "=
singularity" group.<br>
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to <a rel=3D"nofollow">singu...@lbl.gov</a>.<br>
</font></span></blockquote></div><br><br clear=3D"all"><div><br></div>-- <b=
r><div><div dir=3D"ltr"><div><div dir=3D"ltr"><div><div dir=3D"ltr"><div><d=
iv dir=3D"ltr"><div dir=3D"ltr"><div dir=3D"ltr"><div>Gregory M. Kurtzer</d=
iv><div>HPC Systems Architect and Technology Developer</div><div>Lawrence B=
erkeley National Laboratory HPCS<br>University of California Berkeley Resea=
rch IT<br>Singularity Linux Containers&nbsp;(<a href=3D"http://singularity.=
lbl.gov/" rel=3D"nofollow" target=3D"_blank">http://singularity<wbr>.lbl.go=
v/</a>)</div><div>Warewulf Cluster Management&nbsp;(<a href=3D"http://warew=
ulf.lbl.gov/" rel=3D"nofollow" target=3D"_blank">http://warewulf.lb<wbr>l.g=
ov/</a>)</div><div>GitHub:&nbsp;<a href=3D"https://github.com/gmkurtzer" re=
l=3D"nofollow" target=3D"_blank">https://github.com/gmk<wbr>urtzer</a>,&nbs=
p;<span style=3D"font-size:12.8px">Twitter:&nbsp;</span><a href=3D"https://=
twitter.com/gmkurtzer" style=3D"font-size:12.8px" rel=3D"nofollow" target=
=3D"_blank">https://twitt<wbr>er.com/gmkurtzer</a></div></div></div></div><=
/div></div></div></div></div></div></div>
</div><div><br></div>

-- <br>
You received this message because you are subscribed to the Google Groups "=
singularity" group.<br>
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to <a rel=3D"nofollow">singu...@lbl.gov</a>.<br>
</div></blockquote></div><br></div></div></blockquote></div></div></blockqu=
ote></div><br></div></div></div><div><div>

<p></p>

-- <br>
You received this message because you are subscribed to the Google Groups "=
singularity" group.<br>
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to <a rel=3D"nofollow">singu...@lbl.gov</a>.<br>
</div></div></blockquote></div></div></div><div><div class=3D"h5"><br><br c=
lear=3D"all"><div><br></div>-- <br><div><div dir=3D"ltr"><div><div dir=3D"l=
tr"><div><div dir=3D"ltr"><div><div dir=3D"ltr"><div dir=3D"ltr"><div dir=
=3D"ltr"><div>Gregory M. Kurtzer</div><div>HPC Systems Architect and Techno=
logy Developer</div><div>Lawrence Berkeley National Laboratory HPCS<br>Univ=
ersity of California Berkeley Research IT<br>Singularity Linux Containers&n=
bsp;(<a href=3D"http://singularity.lbl.gov/" rel=3D"nofollow" target=3D"_bl=
ank">http://singularity<wbr>.lbl.gov/</a>)</div><div>Warewulf Cluster Manag=
ement&nbsp;(<a href=3D"http://warewulf.lbl.gov/" rel=3D"nofollow" target=3D=
"_blank">http://warewulf.lb<wbr>l.gov/</a>)</div><div>GitHub:&nbsp;<a href=
=3D"https://github.com/gmkurtzer" rel=3D"nofollow" target=3D"_blank">https:=
//github.com/gmk<wbr>urtzer</a>,&nbsp;<span style=3D"font-size:12.8px">Twit=
ter:&nbsp;</span><a href=3D"https://twitter.com/gmkurtzer" style=3D"font-si=
ze:12.8px" rel=3D"nofollow" target=3D"_blank">https://twitt<wbr>er.com/gmku=
rtzer</a></div></div></div></div></div></div></div></div></div></div></div>
</div></div></div>
</blockquote></div><div><div class=3D"h5">

<p></p>

-- <br>
You received this message because you are subscribed to the Google Groups "=
singularity" group.<br></div></div>
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to <a href=3D"mailto:singu...@lbl.gov" target=3D"_blank">singularity+u=
nsubscribe@lbl.<wbr>gov</a>.<br>
</blockquote></div><br><br clear=3D"all"><div><br></div>-- <br><div class=
=3D"gmail_signature" data-smartmail=3D"gmail_signature"><div dir=3D"ltr"><d=
iv><div dir=3D"ltr"><div><div dir=3D"ltr"><div><div dir=3D"ltr"><div dir=3D=
"ltr"><div dir=3D"ltr"><div>Gregory M. Kurtzer</div><div>HPC Systems Archit=
ect and Technology Developer</div><div>Lawrence Berkeley National Laborator=
y HPCS<br>University of California Berkeley Research IT<br>Singularity Linu=
x Containers&nbsp;(<a href=3D"http://singularity.lbl.gov/" target=3D"_blank=
">http://singularity.lbl.gov/</a>)</div><div>Warewulf Cluster Management&nb=
sp;(<a href=3D"http://warewulf.lbl.gov/" target=3D"_blank">http://warewulf.=
lbl.gov/</a>)</div><div>GitHub:&nbsp;<a href=3D"https://github.com/gmkurtze=
r" target=3D"_blank">https://github.com/gmkurtzer</a>,&nbsp;<span style=3D"=
font-size:12.8px">Twitter:&nbsp;</span><a href=3D"https://twitter.com/gmkur=
tzer" style=3D"font-size:12.8px" target=3D"_blank">https://twitter.com/gmku=
rtzer</a></div></div></div></div></div></div></div></div></div></div></div>
</div>

<p></p>

-- <br>
You received this message because you are subscribed to the Google Groups "=
singularity" group.<br>
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to <a href=3D"mailto:singu...@lbl.gov">singu...@lbl.gov</a>.<br>
</div></blockquote></body></html>
--Apple-Mail-F18C8232-7CC8-46FD-8E04-4BDEED120E69--
