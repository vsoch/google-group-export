X-Received: by 10.129.75.75 with SMTP id y72mr595905ywa.9.1494991907817;
        Tue, 16 May 2017 20:31:47 -0700 (PDT)
X-BeenThere: singularity@lbl.gov
Received: by 10.107.47.89 with SMTP id j86ls1021393ioo.10.gmail; Tue, 16 May
 2017 20:31:46 -0700 (PDT)
X-Received: by 10.84.238.203 with SMTP id l11mr1626950pln.17.1494991906807;
        Tue, 16 May 2017 20:31:46 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1494991906; cv=none;
        d=google.com; s=arc-20160816;
        b=F7pr5Wff3x7+zag6nxIaFbDh19oCmjbCF7fKecfddBwpuHzBuA8NnxrkUO2yPpM+sN
         zuUlFKYb8TTxjPUE98H5ARcofuUtJGLW3z4a2EXSyugS/YljOHH3PS4ZgcXHmAQxDuk6
         eDjenzOu7jf9HDF3HVkQ20mQz2B9LWIgiQKMmyj6Z/pLIEYjD2ReH6Hpbm4gWIL1S83m
         t1SyUM9tpFM6WBpf7qNUtfmu/KqrT2MQu/WczTeohZR3ErT0wmbu6uvrK6mE8yNkLyDy
         88Fxjsp795Cu9hOg2IZtgwenBZg0OfsKzIHBjPfitaF85a2QhjIPuErjjGeaovY8Ob5K
         6HyQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=to:subject:message-id:date:from:references:in-reply-to:mime-version
         :dkim-signature:arc-authentication-results;
        bh=ZGfg91dMm6ioul74uuDq7pLZuIJw58OHBYBh04yCGtk=;
        b=iiYivqKdsDsTLmNZMxOUvVSmcux6JMDSggmW3fZZDVCGrN0NA2WwLz9CaKkqMrgmrC
         FABcjkAcT3NwdScnAPusMwGdNwNDF9kCuAF4PSNWLeZgpPWepG07LcZaeHdUKLT8qEYk
         05V7Iu/i0YA1bxQqRq2/vMfuBy5ap3GYJFLmi16lYwfwh4tthWhEFQKPD172iS96ZkLa
         A98PQOszONtzspK9bbq6907nlcwrRLvDKWzyLe6do0wcsTaTubEeyt5xaZ4yCrOQhHLv
         d7GtJHy0ND3tOdCJLD1lCttJzXYhDcxF5C4XEm8Ftfpo/sjmcS/sGAzzkpQMw94fQTFs
         HGtw==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass head...@gmail.com;
       spf=pass (google.com: domain of vso...@gmail.com designates 209.85.213.47 as permitted sender) smtp.mailfrom=vso...@gmail.com
Return-Path: <vso...@gmail.com>
Received: from fe3.lbl.gov (fe3.lbl.gov. [128.3.41.68])
        by mx.google.com with ESMTP id o13si817827pgd.309.2017.05.16.20.31.46
        for <singu...@lbl.gov>;
        Tue, 16 May 2017 20:31:46 -0700 (PDT)
Received-SPF: pass (google.com: domain of vso...@gmail.com designates 209.85.213.47 as permitted sender) client-ip=209.85.213.47;
Authentication-Results: mx.google.com;
       dkim=pass head...@gmail.com;
       spf=pass (google.com: domain of vso...@gmail.com designates 209.85.213.47 as permitted sender) smtp.mailfrom=vso...@gmail.com
X-Ironport-SBRS: 3.4
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A2FoAwCLwxtZhi/VVdFZAx4GDBkGDIMBT?=
 =?us-ascii?q?AGBSgeDXgiBNppHiRWHKIU4gUxDIQGGAgKFSAc/GAEBAQEBAQEBAQEBAhABAQE?=
 =?us-ascii?q?ICwsIKC+CMwUCAxoGCEYpLwEBAQEBAQEBAQEfAislARoBAgIBIx0BDQ4eAwwGA?=
 =?us-ascii?q?wILNwICIgEOAwEFARwOBwQBHASIM4E2AQMNCAWOcJEaP4wHggQFARyDCgWDWwo?=
 =?us-ascii?q?ZJw1WgnEBAQgBAQEBAQEaAgYSi0aENBIBPSaCS4JgAQSJP4hAjBCTG4IEiSKGR?=
 =?us-ascii?q?pJ9FB+BFR+BBTMLcBVfhE8fggskNgeGM0eBZwEBAQ?=
X-IronPort-AV: E=Sophos;i="5.38,352,1491289200"; 
   d="scan'208,217";a="75188565"
Received: from mail-vk0-f47.google.com ([209.85.213.47])
  by fe3.lbl.gov with ESMTP; 16 May 2017 20:31:45 -0700
Received: by mail-vk0-f47.google.com with SMTP id y190so200357vkc.1
        for <singu...@lbl.gov>; Tue, 16 May 2017 20:31:45 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to;
        bh=ZGfg91dMm6ioul74uuDq7pLZuIJw58OHBYBh04yCGtk=;
        b=ALWuo+PL295B075q6trjhU2fS4PkyCL2zi87S36lWlxuLIsxLT74Kve+xMrd02+UtE
         lUvwELGic7lSgWZEa3+8Wq+KVlQj/0br8LFGKRqibUCrEyeFsk22fkVWtH8zpB68OMLC
         SvUXJ0nMDmW0mMdFiL6LtnV6SHStqvI493sE3pzGJucCXK2kCnWAfVmF2jVEU9UpXjz8
         hHT2GGmzqJ/cAVYTIJxJ4hJS8q3+ufjga2BV4VRYc4yTcBLvgtNQEZSG+wHZWKEPTdcx
         jbmhKJ1bqjB7zD/KdV5Zax4B1mP8b7CHxb8PHM1obYhEbB+t0KBFTPpMdbMbAi/mE9LE
         ycqQ==
X-Gm-Message-State: AODbwcADrdmtDiyG+7x4vbDST4zuN2fIYX3Z/4eYLL6i76jI0r4S5gox
	xgv1Ix/117ZIt28OMjp2uOtekSeW4HiE5aA=
X-Received: by 10.31.69.138 with SMTP id s132mr288692vka.97.1494991904791;
 Tue, 16 May 2017 20:31:44 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.103.48.143 with HTTP; Tue, 16 May 2017 20:31:24 -0700 (PDT)
In-Reply-To: <0c8f63fa-efd7-438e-a78f-1f51f374931e@lbl.gov>
References: <0c8f63fa-efd7-438e-a78f-1f51f374931e@lbl.gov>
From: vanessa s <vso...@gmail.com>
Date: Tue, 16 May 2017 23:31:24 -0400
Message-ID: <CAM=pu++QZR1FYaCWSiMt8ynmvg7Vg_98dBOodtc_3f=JZU1w+A@mail.gmail.com>
Subject: Re: [Singularity] Singularity shell script and directory priviledges
To: singularity@lbl.gov
Content-Type: multipart/alternative; boundary="001a114dd2d26d6179054fafedca"

--001a114dd2d26d6179054fafedca
Content-Type: text/plain; charset="UTF-8"

Hey Guilluame,

>
> I've two questions regarding boostrap files:
>
> 1) From what I understand, *%runscript* is executed during `singularity
> run` only. (It writes /singularity file in the container. There's also a
> /.run file).
>

I'm guessing that you are using Singularity 2.1 or 2.2, since you are
talking about /singularity and /.run. For this older version, these two
things are actual files, and you are correct that /runscript is executed
when the user does `singularity run container.img`. The .run file is
actually just a little script to check for the actual runscript, and launch
a shell if it's not found.

Now, this is a bit different for Singularity later versions (specifically
2.3 in the development branch). We now have a "file" for the runscript at
/singularity, but it has changed from an actual file to a symbolic link to
the *actual* file, which is in the singularity metadata folder and more
appropriately called runscript ( /.singularity.d/runscript). For the old /.run
 file, this is also more clearly organized into
/.singularity.d/actions/run.

To be clear, when you do "run" it doesn't write the runscript at that time,
it just runs it. The writing of the runscript can only happen when you do
create followed by bootstrap or import. For the earlier versions of
Singularity, both of these commands require sudo. For later, you can do a
non sudo import, eg:

   singularity create container.img
   singularity import docker://ubuntu container.img

or you can just shell, but that of course doesn't use the runscript :) We
can look at the example run (actions)

Singularity ubuntu:~> cat /.singularity.d/actions/run
> #!/bin/sh
> for script in /.singularity.d/env/*.sh; do
>     if [ -f "$script" ]; then
>         . $script
>     fi
> done
> if test -x /.singularity.d/runscript; then
>     exec /.singularity.d/runscript "$@"
> else
>     echo "No Singularity runscript found, executing /bin/sh"
>     exec /bin/sh "$@"
> fi


 So you see, we are just sourcing the environment, testing for the
runscript, if it exists, we use exec to return it as the calling process,
else we tell the user it doesn't exist and shell them in.

Is there a kind of
> *%shellscript *to execute bash commands using `singularity shell` ? (I
> figure there's a /.shell file)
>
>
The /.shell file (or in Singularity development branch
/.singularity.d/actions/shell, is akin to its siblings, it just does little
checks to make sure when you shell into the container, you hit the right
one. We can look at an example:

Singularity ubuntu:~> cat /.singularity.d/actions/shell
> #!/bin/sh
> for script in /.singularity.d/env/*.sh; do
>     if [ -f "$script" ]; then
>         . $script
>     fi
> done
> if test -n "$SINGULARITY_SHELL" -a -x "$SINGULARITY_SHELL"; then
>     exec $SINGULARITY_SHELL "$@"
>     echo "ERROR: Failed running shell as defined by '\$SINGULARITY_SHELL'"
> 1>&2
>     exit 1
> elif test -x /bin/bash; then
>     SHELL=/bin/bash
>     PS1="Singularity $SINGULARITY_CONTAINER:\\w> "
>     export SHELL PS1
>     exec /bin/bash --norc "$@"
> elif test -x /bin/sh; then
>     SHELL=/bin/sh
>     export SHELL
>     exec /bin/sh "$@"
> else
>     echo "ERROR: /bin/sh does not exist in container" 1>&2
> fi
> exit 1


You see we are sourcing all the environment variables so they are available
to the user, then we are checking to see if the user has a shell of choice
specified, and then falling back to /bin/sh, and specifying the little
prompt you see (/Singularity ubuntu in the example above) with $PS1, and
then executing it (and then you shell in!) and of course if this fails, you
get an error message.

2) Is it possible to set read/write access to container specific
> directories for users (no sudo, with or without -w) ? (If yes how?)
>
> For permissions, you can generally think of the files/folders permissions
in the container akin to how you would think of files/permissions anywhere
else. The user inside the container is the same user outside the container,
so you would set permissions, etc, likely in your bootstrap file. I don't
see how you would make any kind of changes to the container if you do not
have write access to it.

Best,

Vanessa

>
> B. Regards
>
> --
> You received this message because you are subscribed to the Google Groups
> "singularity" group.
> To unsubscribe from this group and stop receiving emails from it, send an
> email to singu...@lbl.gov.
>



-- 
Vanessa Villamia Sochat
Stanford University '16
(603) 321-0676

--001a114dd2d26d6179054fafedca
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Hey Guilluame,<div class=3D"gmail_extra"><div class=3D"gma=
il_quote"><blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8=
ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"><div dir=3D"ltr=
"><br>I&#39;ve two questions regarding boostrap files:<br><br> 1) From what=
 I understand, <b>%runscript</b> is executed during `<span style=3D"color:r=
gb(56,118,29)">singularity run`</span> only. (It writes<span style=3D"color=
:rgb(204,0,0)"> /singularity </span>file in the container. There&#39;s also=
 a <span style=3D"color:rgb(204,0,0)">/.run</span> file). </div></blockquot=
e><div><br></div><div>I&#39;m guessing that you are using Singularity 2.1 o=
r 2.2, since you are talking about /singularity and /.run. For this older v=
ersion, these two things are actual files, and you are correct that /runscr=
ipt is executed when the user does `<span style=3D"color:rgb(56,118,29)">si=
ngularity run container.img`. </span>The .run file is actually just a littl=
e script to check for the actual runscript, and launch a shell if it&#39;s =
not found.</div><div><br></div><div>Now, this is a bit different for Singul=
arity later versions (specifically 2.3 in the development branch). We now h=
ave a &quot;file&quot; for the runscript at /singularity, but it has change=
d from an actual file to a symbolic link to the <i>actual</i>=C2=A0file, wh=
ich is in the singularity metadata folder and more appropriately called run=
script (<span style=3D"color:rgb(204,0,0)">=C2=A0</span><span style=3D"colo=
r:rgb(204,0,0)">/.singularity.d/runscript</span>). For the old=C2=A0<span s=
tyle=3D"color:rgb(204,0,0)">/.run =C2=A0</span>file, this is also more clea=
rly organized into=C2=A0<span style=3D"color:rgb(204,0,0)">=C2=A0</span><sp=
an style=3D"color:rgb(204,0,0)">/.singularity.d/actions/run.</span></div><d=
iv><br></div><div>To be clear, when you do &quot;run&quot; it doesn&#39;t w=
rite the runscript at that time, it just runs it. The writing of the runscr=
ipt can only happen when you do create followed by bootstrap or import. For=
 the earlier versions of Singularity, both of these commands require sudo. =
For later, you can do a non sudo import, eg:</div><div><br></div><div>=C2=
=A0 =C2=A0singularity create container.img</div><div>=C2=A0 =C2=A0singulari=
ty import docker://ubuntu container.img</div><div><br></div><div>or you can=
 just shell, but that of course doesn&#39;t use the runscript :) We can loo=
k at the example run (actions)</div><div><br></div><div><blockquote class=
=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rg=
b(204,204,204);padding-left:1ex"><font color=3D"#0000ff">Singularity ubuntu=
:~&gt; cat /.singularity.d/actions/run =C2=A0=C2=A0<br>#!/bin/sh<br>for scr=
ipt in /.singularity.d/env/*.sh; do<br>=C2=A0 =C2=A0 if [ -f &quot;$script&=
quot; ]; then<br>=C2=A0 =C2=A0 =C2=A0 =C2=A0 . $script<br>=C2=A0 =C2=A0 fi<=
br>done<br>if test -x /.singularity.d/runscript; then<br>=C2=A0 =C2=A0 exec=
 /.singularity.d/runscript &quot;$@&quot;<br>else<br>=C2=A0 =C2=A0 echo &qu=
ot;No Singularity runscript found, executing /bin/sh&quot;<br>=C2=A0 =C2=A0=
 exec /bin/sh &quot;$@&quot;<br>fi</font></blockquote></div><div><font colo=
r=3D"#0000ff"><br></font></div><div>=C2=A0So you see, we are just sourcing =
the environment, testing for the runscript, if it exists, we use exec to re=
turn it as the calling process, else we tell the user it doesn&#39;t exist =
and shell them in.</div><div><br></div><blockquote class=3D"gmail_quote" st=
yle=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padd=
ing-left:1ex"><div dir=3D"ltr">Is there a kind of<br><b>%shellscript </b>to=
 execute bash commands using `<span style=3D"color:rgb(56,118,29)">singular=
ity shell</span>` ? (I figure there&#39;s a <span style=3D"color:rgb(204,0,=
0)">/.shell</span> file)<br><br></div></blockquote><div><br></div><div>The=
=C2=A0<span style=3D"color:rgb(204,0,0)">/.shell</span>=C2=A0file (or in Si=
ngularity development branch=C2=A0<span style=3D"color:rgb(204,0,0)">/.sing=
ularity.d/actions/shell</span>, is akin to its siblings, it just does littl=
e checks to make sure when you shell into the container, you hit the right =
one. We can look at an example:</div><div><br></div><div><blockquote class=
=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rg=
b(204,204,204);padding-left:1ex"><font color=3D"#0000ff">Singularity ubuntu=
:~&gt; cat /.singularity.d/actions/shell=C2=A0<br>#!/bin/sh<br>for script i=
n /.singularity.d/env/*.sh; do<br>=C2=A0 =C2=A0 if [ -f &quot;$script&quot;=
 ]; then<br>=C2=A0 =C2=A0 =C2=A0 =C2=A0 . $script<br>=C2=A0 =C2=A0 fi<br>do=
ne<br>if test -n &quot;$SINGULARITY_SHELL&quot; -a -x &quot;$SINGULARITY_SH=
ELL&quot;; then<br>=C2=A0 =C2=A0 exec $SINGULARITY_SHELL &quot;$@&quot;<br>=
=C2=A0 =C2=A0 echo &quot;ERROR: Failed running shell as defined by &#39;\$S=
INGULARITY_SHELL&#39;&quot; 1&gt;&amp;2<br>=C2=A0 =C2=A0 exit 1<br>elif tes=
t -x /bin/bash; then<br>=C2=A0 =C2=A0 SHELL=3D/bin/bash<br>=C2=A0 =C2=A0 PS=
1=3D&quot;Singularity $SINGULARITY_CONTAINER:\\w&gt; &quot;<br>=C2=A0 =C2=
=A0 export SHELL PS1<br>=C2=A0 =C2=A0 exec /bin/bash --norc &quot;$@&quot;<=
br>elif test -x /bin/sh; then<br>=C2=A0 =C2=A0 SHELL=3D/bin/sh<br>=C2=A0 =
=C2=A0 export SHELL<br>=C2=A0 =C2=A0 exec /bin/sh &quot;$@&quot;<br>else<br=
>=C2=A0 =C2=A0 echo &quot;ERROR: /bin/sh does not exist in container&quot; =
1&gt;&amp;2<br>fi<br>exit 1</font></blockquote></div><div>=C2=A0</div><div>=
You see we are sourcing all the environment variables so they are available=
 to the user, then we are checking to see if the user has a shell of choice=
 specified, and then falling back to /bin/sh, and specifying the little pro=
mpt you see (/Singularity ubuntu in the example above) with $PS1, and then =
executing it (and then you shell in!) and of course if this fails, you get =
an error message.</div><div><br></div><blockquote class=3D"gmail_quote" sty=
le=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);paddi=
ng-left:1ex"><div dir=3D"ltr">2) Is it possible to set read/write access to=
 container specific directories for users (no sudo, with or without -w) ? (=
If yes how?)<br><br></div></blockquote><div>For permissions, you can genera=
lly think of the files/folders permissions in the container akin to how you=
 would think of files/permissions anywhere else. The user inside the contai=
ner is the same user outside the container, so you would set permissions, e=
tc, likely in your bootstrap file. I don&#39;t see how you would make any k=
ind of changes to the container if you do not have write access to it.</div=
><div><br></div><div>Best,</div><div><br></div><div>Vanessa=C2=A0</div><blo=
ckquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left=
:1px solid rgb(204,204,204);padding-left:1ex"><div dir=3D"ltr"><br>B. Regar=
ds<span class=3D"gmail-HOEnZb"><font color=3D"#888888"><br></font></span></=
div><span class=3D"gmail-HOEnZb"><font color=3D"#888888">

<p></p>

-- <br>
You received this message because you are subscribed to the Google Groups &=
quot;singularity&quot; group.<br>
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to <a href=3D"mailto:singu...@lbl.gov" target=3D"_blank">singularity+u=
nsubscribe@lbl.<wbr>gov</a>.<br>
</font></span></blockquote></div><br><br clear=3D"all"><div><br></div>-- <b=
r><div class=3D"gmail_signature" data-smartmail=3D"gmail_signature">Vanessa=
 Villamia Sochat<br>Stanford University &#39;16<br><div><div><div>(603) 321=
-0676</div></div></div></div>
</div></div>

--001a114dd2d26d6179054fafedca--
