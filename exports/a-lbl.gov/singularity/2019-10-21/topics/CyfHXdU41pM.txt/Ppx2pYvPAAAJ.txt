Date: Sat, 17 Mar 2018 08:36:55 -0700 (PDT)
From: David Trudgian <dtr...@sylabs.io>
To: singularity <singu...@lbl.gov>
Message-Id: <0cee554d-b766-46f5-a4c7-e50f5a37adfc@lbl.gov>
In-Reply-To: <d413bb02-6c0d-444b-9f85-1ea75c066b88@lbl.gov>
References: <d413bb02-6c0d-444b-9f85-1ea75c066b88@lbl.gov>
Subject: Re: Questions regarding upcoming network features and source code
 documentation.
MIME-Version: 1.0
Content-Type: multipart/mixed; 
	boundary="----=_Part_3838_1355836517.1521301015750"

------=_Part_3838_1355836517.1521301015750
Content-Type: multipart/alternative; 
	boundary="----=_Part_3839_250118536.1521301015751"

------=_Part_3839_250118536.1521301015751
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Hi there,

I'm afraid I'm not the best person to comment on the planned networking=20
features, but for your other questions:

>
> 2. mpirun -f <host file contains 4 node> -n 16 singularity exec <image>=
=20
> ./ep.C.16
>
> For the above command, my understanding is 16 processes are distributed=
=20
> among 4 different machines. Each machine is communicating to another=20
> using ssh. How containers are discovered and synchronizing the job, as=20
> they don=E2=80=99t have any ip other than the host?=20
>
> [I am using openmpi, nfs for shared drive ]
>
>
>
There's an explanation of how this works=20
here: http://singularity.lbl.gov/docs-hpc#integration-with-mpi

The MPI processes started in the containers aren't communicating via SSH=20
here. The MPI orted process gets started on the host, containers are=20
started by it - and then the processes in the containers can connect back=
=20
to it.=20


3. I tried to generate call graph and caller graph for singularity source=
=20
> with doxygen but no luck on that. The available on line documentation are=
=20
> for user perspective. How I will get documentation to understand=20
> implementation/flow  of singularity? Would you please give me some guide=
=20
> line on that?
>

Different operations in Singularity 2.x pass through steps involving shell,=
=20
compiled C, and Python code - so it's a little difficult to follow the=20
complete flow through. It might be useful to run commands with the '-d'=20
option, e.g. 'singularity -d build ubuntu.img docker://ubuntu:latest'=20
'singularity -d run ubuntu.img' The debug output will show you the steps=20
that these commands are going through.

With Singularity 3.0 moving to Go, the structure will change a bit. There=
=20
is a post on the Sylabs lab notes page talking about plans for Go - which=
=20
includes a diagram that may interest=20
you: https://www.sylabs.io/2018/02/singularity-golang/


Cheers,

DT
=20

------=_Part_3839_250118536.1521301015751
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>Hi there,</div><div><br></div><div>I&#39;m afraid I&#=
39;m not the best person to comment on the planned networking features, but=
 for your other questions:</div><blockquote class=3D"gmail_quote" style=3D"=
margin: 0;margin-left: 0.8ex;border-left: 1px #ccc solid;padding-left: 1ex;=
"><div dir=3D"ltr"><p style=3D"margin-bottom:0in;line-height:100%"><font si=
ze=3D"2"><br>

</font></p>
<p style=3D"margin-bottom:0in;line-height:100%"><font size=3D"2"><a name=3D=
"d413bb02-6c0d-444b-9f85-1ea75c066b88@lbl.gov_docs-internal-guid-8016fef2-0=
6a4-e20f-7f45-b04b8e428136"></a>
2.  <span><font color=3D"#000000"><font face=3D"Arial"><font><span style=3D=
"background:transparent">mpirun
-f </span></font></font></font></span><span><font color=3D"#000000"><font f=
ace=3D"Arial"><font><span style=3D"background:transparent">&lt;host
file </span></font></font></font></span><span><font color=3D"#000000"><font=
 face=3D"Arial"><font><span style=3D"background:transparent">contains
4 node</span></font></font></font></span><span><font color=3D"#000000"><fon=
t face=3D"Arial"><font><span style=3D"background:transparent">&gt;</span></=
font></font></font></span><span><font color=3D"#000000"><font face=3D"Arial=
"><font><span style=3D"background:transparent">
-n 16 singularity exec </span></font></font></font></span><span><font color=
=3D"#000000"><font face=3D"Arial"><font><span style=3D"background:transpare=
nt">&lt;image&gt;</span></font></font></font></span><span><font color=3D"#0=
00000"><font face=3D"Arial"><font><span style=3D"background:transparent">
./ep.C.16</span></font></font></font></span></font></p>
<p style=3D"margin-bottom:0in;line-height:100%"><font size=3D"2"><span><fon=
t color=3D"#000000"><font face=3D"Arial"><font><span style=3D"background:tr=
ansparent">For
the above command, </span></font></font></font></span><span><font color=3D"=
#000000"><font face=3D"Arial"><font><span style=3D"background:transparent">=
my
understanding is 1</span></font></font></font></span><span><font color=3D"#=
000000"><font face=3D"Arial"><font><span style=3D"background:transparent">6
process</span></font></font></font></span><span><font color=3D"#000000"><fo=
nt face=3D"Arial"><font><span style=3D"background:transparent">es</span></f=
ont></font></font></span><span><font color=3D"#000000"><font face=3D"Arial"=
><font><span style=3D"background:transparent">
are </span></font></font></font></span><span><font color=3D"#000000"><font =
face=3D"Arial"><font><span style=3D"background:transparent">distributed</sp=
an></font></font></font></span><span><font color=3D"#000000"><font face=3D"=
Arial"><font><span style=3D"background:transparent">
among 4 different machine</span></font></font></font></span><span><font col=
or=3D"#000000"><font face=3D"Arial"><font><span style=3D"background:transpa=
rent">s</span></font></font></font></span><span><font color=3D"#000000"><fo=
nt face=3D"Arial"><font><span style=3D"background:transparent">.
</span></font></font></font></span><span><font color=3D"#000000"><font face=
=3D"Arial"><font><span style=3D"background:transparent">Each
machine is communicating to another using ssh.  </span></font></font></font=
></span><span><font color=3D"#000000"><font face=3D"Arial"><font><span styl=
e=3D"background:transparent">H</span></font></font></font></span><span><fon=
t color=3D"#000000"><font face=3D"Arial"><font><span style=3D"background:tr=
ansparent">ow
containers are </span></font></font></font></span><span><font color=3D"#000=
000"><font face=3D"Arial"><font><span style=3D"background:transparent">disc=
overed
and synchronizing the job</span></font></font></font></span><span><font col=
or=3D"#000000"><font face=3D"Arial"><font><span style=3D"background:transpa=
rent">,
</span></font></font></font></span><span><font color=3D"#000000"><font face=
=3D"Arial"><font><span style=3D"background:transparent">as
they don=E2=80=99t have any ip other than the host</span></font></font></fo=
nt></span><span><font color=3D"#000000"><font face=3D"Arial"><font><span st=
yle=3D"background:transparent">?
</span></font></font></font></span>
</font></p>
<p style=3D"margin-bottom:0in;line-height:100%"><span><font color=3D"#00000=
0"><font face=3D"Arial" size=3D"2"><span style=3D"background:transparent">[=
I
am using openmpi, nfs for shared drive ]</span></font></font></span></p>
<p style=3D"margin-bottom:0in;line-height:100%"><font size=3D"2"><br></font=
></p></div></blockquote><div><br></div><div>There&#39;s an explanation of h=
ow this works here:=C2=A0http://singularity.lbl.gov/docs-hpc#integration-wi=
th-mpi<br></div><div><br></div><div>The MPI processes started in the contai=
ners aren&#39;t communicating via SSH here. The MPI orted process gets star=
ted on the host, containers are started by it - and then the processes in t=
he containers can connect back to it.=C2=A0</div><div><br></div><div><br></=
div><blockquote class=3D"gmail_quote" style=3D"margin: 0;margin-left: 0.8ex=
;border-left: 1px #ccc solid;padding-left: 1ex;"><div dir=3D"ltr"><p style=
=3D"margin-bottom:0in;line-height:100%"><font size=3D"2">

</font></p>
<p style=3D"margin-bottom:0in;line-height:100%"><font size=3D"2"><span><fon=
t color=3D"#000000"><font face=3D"Arial"><font><span style=3D"background:tr=
ansparent">3.</span></font></font></font></span><span><font color=3D"#00000=
0"><font face=3D"Arial"><font><span style=3D"background:transparent">
 </span></font></font></font></span><span><font color=3D"#000000"><font fac=
e=3D"Arial"><font><span style=3D"background:transparent">I
tried to generate call graph and caller graph for singularity source with d=
oxygen but  no
luck on that. The available on line documentation are for user
perspective. How  I </span></font></font></font></span><span><font color=3D=
"#000000"><font face=3D"Arial"><font><span style=3D"background:transparent"=
>will
</span></font></font></font></span><span><font color=3D"#000000"><font face=
=3D"Arial"><font><span style=3D"background:transparent">get
documentation to understand implementation/flow=C2=A0 of singularity?=20
W</span></font></font></font></span><span><font color=3D"#000000"><font fac=
e=3D"Arial"><font><span style=3D"background:transparent">ould</span></font>=
</font></font></span><span><font color=3D"#000000"><font face=3D"Arial"><fo=
nt><span style=3D"background:transparent">
you </span></font></font></font></span><span><font color=3D"#000000"><font =
face=3D"Arial"><font><span style=3D"background:transparent">please
</span></font></font></font></span><span><font color=3D"#000000"><font face=
=3D"Arial"><font><span style=3D"background:transparent">give
me some guide line </span></font></font></font></span><span><font color=3D"=
#000000"><font face=3D"Arial"><font><span style=3D"background:transparent">=
on
that?</span></font></font></font></span></font></p></div></blockquote><div>=
<br></div><div>Different operations in Singularity 2.x pass through steps i=
nvolving shell, compiled C, and Python code - so it&#39;s a little difficul=
t to follow the complete flow through. It might be useful to run commands w=
ith the &#39;-d&#39; option, e.g. &#39;singularity -d build ubuntu.img dock=
er://ubuntu:latest&#39; &#39;singularity -d run ubuntu.img&#39; The debug o=
utput will show you the steps that these commands are going through.</div><=
div><br></div><div>With Singularity 3.0 moving to Go, the structure will ch=
ange a bit. There is a post on the Sylabs lab notes page talking about plan=
s for Go - which includes a diagram that may interest you:=C2=A0https://www=
.sylabs.io/2018/02/singularity-golang/</div><div><br></div><div><br></div><=
div>Cheers,</div><div><br></div><div>DT</div><div>=C2=A0</div></div>
------=_Part_3839_250118536.1521301015751--

------=_Part_3838_1355836517.1521301015750--
