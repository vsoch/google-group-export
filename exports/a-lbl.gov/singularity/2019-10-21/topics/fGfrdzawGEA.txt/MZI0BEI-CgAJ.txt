Date: Thu, 20 Jun 2019 08:57:19 -0700 (PDT)
From: Massimiliano Leoni <leoni.mas...@gmail.com>
To: singularity <singu...@lbl.gov>
Message-Id: <50d11a2e-dcf2-4311-9867-de27072e6360@lbl.gov>
Subject: Different instruction sets in different environments
MIME-Version: 1.0
Content-Type: multipart/mixed; 
	boundary="----=_Part_374_1986157467.1561046239098"

------=_Part_374_1986157467.1561046239098
Content-Type: multipart/alternative; 
	boundary="----=_Part_375_2023154868.1561046239098"

------=_Part_375_2023154868.1561046239098
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Hello everyone, I have a most likely na=C3=AFve question on how Singularity=
=20
handles different instruction set extensions across different platforms.

Say that I build an image on a machine with a processor that supports, for=
=20
example, SSE4, and I compile my software with optimization flags. Then I=20
expect that the resulting binaries will be optimized to use SSE4=20
instructions.
Say now that I move the image to another computer, with a processor that=20
only supports SSE2, and try to run the image there: what will happen? I=20
expect the latter machine to be unable to run the binaries correctly as it=
=20
doesn't support SSE4.
Is there some trick in place preventing this from happening?

Thanks for any help!
Massimiliano

------=_Part_375_2023154868.1561046239098
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div>Hello everyone, I have a most likely na=C3=AFve quest=
ion on how Singularity handles different instruction set extensions across =
different platforms.</div><div><br></div><div>Say that I build an image on =
a machine with a processor that supports, for example, SSE4, and I compile =
my software with optimization flags. Then I expect that the resulting binar=
ies will be optimized to use SSE4 instructions.</div><div>Say now that I mo=
ve the image to another computer, with a processor that only supports SSE2,=
 and try to run the image there: what will happen? I expect the latter mach=
ine to be unable to run the binaries correctly as it doesn&#39;t support SS=
E4.</div><div>Is there some trick in place preventing this from happening?<=
/div><div><br></div><div>Thanks for any help!</div><div>Massimiliano<br></d=
iv></div>
------=_Part_375_2023154868.1561046239098--

------=_Part_374_1986157467.1561046239098--
