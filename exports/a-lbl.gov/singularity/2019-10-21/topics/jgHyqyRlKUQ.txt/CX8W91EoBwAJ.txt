Date: Thu, 2 Nov 2017 11:13:31 -0700 (PDT)
From: Luigi Pertoldi <luigi.p...@gmail.com>
To: singularity <singu...@lbl.gov>
Message-Id: <5d78d554-1e61-43b2-9ed9-c9a2af1deeb6@lbl.gov>
Subject: Best practices for managing dependencies between apps
MIME-Version: 1.0
Content-Type: multipart/mixed; 
	boundary="----=_Part_1326_1628960749.1509646411805"

------=_Part_1326_1628960749.1509646411805
Content-Type: multipart/alternative; 
	boundary="----=_Part_1327_748177337.1509646411805"

------=_Part_1327_748177337.1509646411805
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit

Hello everybody!

Just learned about the SCI-F implementation (well, actually about the whole 
Singularity ahah). I was writing my first Singularity file to package my 
software and realised that maybe things are not that neat as it could seem 
when dealing with apps depending on each other (or perhaps I missed 
something).

Say that app B depends on app A (at build and run time app A must be 
present in LD_LIBRARY_PATH and PATH, for example), then I would write the 
recipe file as follows:

%appinstall A
    <...install steps...>

%appinstall B
    export PATH=$APPROOT_A/bin
    export LD_LIBRARY_PATH=$APPROOT_A/lib
    <...install steps...>

%appenv B
    export PATH=$APPROOT_A/bin
    export LD_LIBRARY_PATH=$APPROOT_A/lib

And that's ok, everything works when I run "singularity --app B <image>". 
Anyway, suppose that the "%appenv A" section exports a lot of other useful 
variables that should also be exported when dealing with app B, wouldn't it 
be nice to provide a more neat method to accomplish this (i.e. a built-in 
method to specify dependencies)? Am I missing something?

Thanks so much,
Luigi

------=_Part_1327_748177337.1509646411805
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Hello everybody!<div><br></div><div>Just learned about the=
 SCI-F implementation (well, actually about the whole Singularity ahah). I =
was writing my first Singularity file to package my software and realised t=
hat maybe things are not that neat as it could seem when dealing with apps =
depending on each other (or perhaps I missed something).</div><div><br></di=
v><div>Say that app B depends on app A (at build and run time app A must be=
 present in LD_LIBRARY_PATH and PATH, for example), then I would write the =
recipe file as follows:</div><div><br></div><div>%appinstall A</div><div>=
=C2=A0 =C2=A0 &lt;...install steps...&gt;</div><div><br></div><div>%appinst=
all B</div><div>=C2=A0 =C2=A0 export PATH=3D$APPROOT_A/bin</div><div>=C2=A0=
 =C2=A0 export LD_LIBRARY_PATH=3D$APPROOT_A/lib<br></div><div>=C2=A0 =C2=A0=
 &lt;...install steps...&gt;</div><div><br></div><div>%appenv B</div><div><=
div>=C2=A0 =C2=A0 export PATH=3D$APPROOT_A/bin</div><div>=C2=A0 =C2=A0 expo=
rt LD_LIBRARY_PATH=3D$APPROOT_A/lib</div></div><div><br></div><div>And that=
&#39;s ok, everything works when I run &quot;singularity --app B &lt;image&=
gt;&quot;. Anyway, suppose that the &quot;%appenv A&quot; section exports a=
 lot of other useful variables that should also be exported when dealing wi=
th app B, wouldn&#39;t it be nice to provide a more neat method to accompli=
sh this (i.e. a built-in method to specify dependencies)? Am I missing some=
thing?</div><div><br></div><div>Thanks so much,</div><div>Luigi</div></div>
------=_Part_1327_748177337.1509646411805--

------=_Part_1326_1628960749.1509646411805--
