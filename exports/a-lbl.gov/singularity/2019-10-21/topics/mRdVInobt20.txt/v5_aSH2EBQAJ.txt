X-Received: by 10.101.88.207 with SMTP id e15mr293529pgu.118.1507318978780;
        Fri, 06 Oct 2017 12:42:58 -0700 (PDT)
X-BeenThere: singularity@lbl.gov
Received: by 10.99.108.66 with SMTP id h63ls3478205pgc.25.gmail; Fri, 06 Oct
 2017 12:42:58 -0700 (PDT)
X-Received: by 10.98.222.131 with SMTP id h125mr3135211pfg.25.1507318977767;
        Fri, 06 Oct 2017 12:42:57 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1507318977; cv=none;
        d=google.com; s=arc-20160816;
        b=Sw2l6ZA4mktP82YYFuh2Nci9iRmF5QtApsJDjarUW+kmwNJNTM4cp/6c6tO8ggveB7
         fpHgNknAFESLMVizNw0XaeACfdLKOBy6NXar//v1FHNndhCbCAQZM7/0y1B1BqZLd4KP
         IS2yMPy1lDdAYdyuFM3yO/vL8Jyvy4Gz2DI/3GF7ewnbUFernZTr0y12CZ0QIy4f5bjT
         H1sxPXbtVyb34VgwAhXzxfyEdF1ztJMp6rmwyWhspSowRn+rS1pU5uTMLETXyOUx+hH3
         XUEkoAvyB/rHo17uA4fPNkZEvSx7rgufb6C3zOFFHnYAHW19bENzUE5una+PTiRqzq0g
         7m5g==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=cc:to:subject:message-id:date:from:references:in-reply-to
         :mime-version:dkim-signature:arc-authentication-results;
        bh=3ukIG54S+VbHrGYvBFbWzQ5eetpU4Av/IpPn4pntp4o=;
        b=kcUmRiAai0qWVhHoleRCTS1n2o+FAxrBGHBcXmmVEjZ3V3PcnOOWBiER8vEoYipiOC
         f0mty0KLa5ez/9vglFqoCrcRaVYSkxeqmrNwHNVj+LoTVYmgNM6Ay0cgFbRitEJUhCKH
         Jt2vWmW8rllfLGzLjROw6dne7yBdKtyAcKT3p65uwMKjCGIFrBM/F319HsydEqHjjRdt
         WBNHjgCUeVYPGw2oBECsxDJoSB08zmAk8l48NufiASPqOlLMkqKO2A9DqPrPyR+hLw9Q
         Nzf1dk+dbuJJ/1eOCpn1vMBKGyEaQ01VoQH2vEsiznuI2KVdD8w8LQMRDa/9CSzo6VDb
         bsuA==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass head...@gmail.com header.s=20161025 header.b=l8EssW5D;
       spf=pass (google.com: domain of vso...@gmail.com designates 209.85.218.43 as permitted sender) smtp.mailfrom=vso...@gmail.com
Return-Path: <vso...@gmail.com>
Received: from fe4.lbl.gov (fe4.lbl.gov. [128.3.41.71])
        by mx.google.com with ESMTP id f124si1602702pgc.694.2017.10.06.12.42.57
        for <singu...@lbl.gov>;
        Fri, 06 Oct 2017 12:42:57 -0700 (PDT)
Received-SPF: pass (google.com: domain of vso...@gmail.com designates 209.85.218.43 as permitted sender) client-ip=209.85.218.43;
Authentication-Results: mx.google.com;
       dkim=pass head...@gmail.com header.s=20161025 header.b=l8EssW5D;
       spf=pass (google.com: domain of vso...@gmail.com designates 209.85.218.43 as permitted sender) smtp.mailfrom=vso...@gmail.com
X-Ironport-SBRS: 3.4
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A2G4AABe3NdZhivaVdFZAxwBAQQBAQoBA?=
 =?us-ascii?q?RgBBQELAYNXAT5uJweDawiBBDKIaY9qgXaJNYx6DoFBGyUDIgEKgQtTgVyBD08?=
 =?us-ascii?q?ChBkHPxgBAQEBAQEBAQEBAQIQAQEBCAsLCCgvgjMFAgMaAQUEBDcPJwIDAQEBA?=
 =?us-ascii?q?QEBAQEBIgEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQ8CDR4EHQQBARkBAgI?=
 =?us-ascii?q?BGgkEGQENDhgFAQMBCwYDAgsDHwsHAwICIgEOAwEFAQsRBggHBAEVBAECBIl2A?=
 =?us-ascii?q?QMNCAULhnqRG0CKWBGBI4FtGAUBHIMKBYNoChknDVeDDgEBAQEBAQQBAQEBAQE?=
 =?us-ascii?q?BAQEXAgYSgxuCAoVWgQ6DMoENEgESAQk3DAkJCIJMgkEgBZFAgRCOY4dejQeCF?=
 =?us-ascii?q?FuFFIk0gVORcgGDUhkfgRUfgQg0C3gVY4RHKh+BciEgNgiHAUiBbAEBAQ?=
X-IronPort-AV: E=Sophos;i="5.42,484,1500966000"; 
   d="scan'208,217";a="91275988"
Received: from mail-oi0-f43.google.com ([209.85.218.43])
  by fe4.lbl.gov with ESMTP; 06 Oct 2017 12:42:54 -0700
Received: by mail-oi0-f43.google.com with SMTP id w197so26669584oif.6
        for <singu...@lbl.gov>; Fri, 06 Oct 2017 12:42:54 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:in-reply-to:references:from:date:message-id:subject:to
         :cc;
        bh=3ukIG54S+VbHrGYvBFbWzQ5eetpU4Av/IpPn4pntp4o=;
        b=l8EssW5DSzNTC8Va0lVtp0sfasI2AXrjekV7Mq0jFNbb3zM6FddJJhk/722d2D/pJf
         GpFpeWmzVHzrTXuTkXocHIryQdPTWZBxApipJzy32Mh1J8jmigTBzKeQntoD8vCuQ12v
         UDUqwV86sw8jIfhylDtKOmMnUI1oy2xtvwSD+ttDEu+wu1JsZvTi6ulMt46pkdYdDyeo
         J6ay3n0wa2joNhGxbyJ6v7cDAf30+FW58P0aouxDnf0UT9/oiADoeRP+VazRM4Uq2XRt
         eQ0NJ6Q/79VjlNpFPHgo+SQH+CKvv/6TAaHQBPDFCxYLgbPnQs63Csveu8VzbHXJm5S2
         HyEw==
X-Gm-Message-State: AMCzsaXJogMOJvVBQ50+AEjaHA1S4efe5wXcovpIdbI0DTd9IKXNiYTA
	dCM5u7en3tGt6boneV94wVSJuZHgBs9sohljdNO3cyp3
X-Received: by 10.157.46.23 with SMTP id q23mr1908406otb.180.1507318974094;
 Fri, 06 Oct 2017 12:42:54 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.74.151.145 with HTTP; Fri, 6 Oct 2017 12:42:33 -0700 (PDT)
In-Reply-To: <fe2d9b7b-fae3-755e-356b-8e7e3ce80aae@googlemail.com>
References: <c7ac581e-de03-1e02-207c-55c3b5677eba@googlemail.com>
 <CAM=pu+Ja9J+mb1MsswRU3X-vy-BJT64TcwKu3=B2hjo4anEMQQ@mail.gmail.com>
 <aa96e91d-7dd8-83e7-f25b-1d75ecec94d7@googlemail.com> <CAM=pu++w-5sgrAPH3vibN-VFTDgEyhbSssi1Z6-a8e92Xo4F4g@mail.gmail.com>
 <fe2d9b7b-fae3-755e-356b-8e7e3ce80aae@googlemail.com>
From: vanessa s <vso...@gmail.com>
Date: Fri, 6 Oct 2017 12:42:33 -0700
Message-ID: <CAM=pu+K1dkoT21NFQCZiz0knBhYW4CDN4m7c0JY+J29tPGE91g@mail.gmail.com>
Subject: Re: [Singularity] Adding files in a build recipe
To: Oliver Freyermuth <o.fre...@googlemail.com>
Cc: singu...@lbl.gov
Content-Type: multipart/alternative; boundary="001a113cd4dc03a20d055ae60ce8"

--001a113cd4dc03a20d055ae60ce8
Content-Type: text/plain; charset="UTF-8"

>
> Yes, I know - my complaint was really about the reproducibility of the
> actual build procedure.
>
> This is a tough one! The premise is that there is one "right" way to
build an image <https://www.youtube.com/watch?v=HemmX3IoHe8>. The most
basic thing the software can take account for is having one recipe that is
used to completely re-make the image. What we don't control for is the
content that is added to it - this is a decision of the user. From an
analysis of the software, given this basic function, reproducibility is
assured.

What Singularity does not cover (as it's out of scope) is the manager that
sets up the particulars of some build to then call a singularity build.
Think of all the options and needs there are! I'll go over the big ones I
see:

*Single Users (Cloud)*
Many users don't have an HPC center that can afford to do much more than
install Singularity. Thus is the reason for Singularity Hub - you can use
Github (just as researchers normally do) and push a file called
"Singularity", put file dependencies in the repo, assume the build is done
relevant to the repo base, and they build automatically and are delivered
via singularity shub:// uri.  Another cloud manager of this type could
reproduce perfectly just knowing the repos.

*Institution (possible private)*
Singularity Hub didn't meet the need for institutions that didn't want
their images to be public, or to have 1000 Github repos. They also desire
to build in their particular way (build server? slurm? still Github with
user PRs?) This is the rationale for Singularity Registry - you do your
thing, then push images to it, also available via shub://

*SLURM / HPC*
This is the use case not addressed, and mostly because every cluster is so
different I couldn't imagine a "one thing works for all" solution.
Actually, I started making a solution for this - a singularity image with a
builder and enforced internal structure -->
https://github.com/singularityhub/singularity-registry but spent a few
months on it, heard from most that they wanted Docker, and just started
over.

The best I can offer, aside from writing your own little bash script with
specifics to the cluster, is to think about the recipe. Arguably, if you
didn't use local files but just retrieved them from a secure place (and
checking your sums and what not) then the entire Singularity build produce
is reproducible, from anywhere with a definition file, and an internet
connection. You also might want to think about macros in the recipe - given
a simple format for keeping things (see the repo I linked above for what I
was working on) then some user could plug in their base directory as a
macro,and files would be copied relative to that. WIthout the macro, it
would assume PWD. That would be a cool idea!

>
> > This is also an issue of education about security. This is just the same
> as saying I could add credentials to a Github repo and push it. But I think
> I get what you are saying - the user would be doing this unknowingly. All I
> can say is that they should look at the recipe file first, OR use a
> pre-built container that can't take their files and distribute them.
>

yes!


> That's exactly my point. Even from the recipe, it would not be obvious the
> container might pick up my credentials if I bootstrap it starting
> "singularity bootstrap" from inside my home,
> unless you know that singularity, unlike Docker, uses the working
> directory as build context and not the location of the Singularity build
> recipe.
> Since most people will know Docker, that difference may come as a huge
> surprise.
>
> To be specific again, this PWD is only relevant for %setup and adding
files %files, which is what we've been talking about. If you build from a
folder and add files foo, it is going to look for the files in that folder
before the %post section is executed. Once you are in %post, the build
itself happens somewhere in /var (I don't remember the full path actually).


> > I still don't follow. Singularity is exactly the same as Docker in this
> regard, the commands ADD/COPY correspond to our %files section, and the
> paths are relative to the build folder.
> Basically, what I'd like to point out is that docker closes off all
> directories outside of the build directory - and the build directory is
> explicitly set to the location of the build recipe, and not the PWD.
> This prevents any accidental or malicious attempt to pick up stuff from
> the host which should not enter the container.
>

Yes this makes a lot of sense - I'd like to see this added to Singularity.

>
> > So you are saying you want to completely close off directories /outside
> /of the PWD / build directory? So I could add files relative, but not do
> something like ../../parent/directories ? That seems reasonable to do, we
> could add some kind of variable for a "build_dir" and spit out an error if
> the user tries to copy / go outside of it.
> Exactly :-).
> I consider this would be more safe in the long run, and protect you from
> shooting yourself in the foot accidentally (at least in this way ;-) ).
> Additionally, I would prefer if the default build context would explicitly
> be the location of the Singularity recipe instead of PWD, but this goes
> hand in hand.
>
> yes that's very Dockery :)


>
> We will consider that in a later stage of the project, when our users are
> more used to containers.
>
> great! I hope they catch up faster than I, I'm still not used to these
container things :)


> >> So all in all, my suggestion would be to re-think the build context
> concept to follow the more safe and reproducible concept from Docker,
> >> and at least document what the build context is (as Docker does).
> >> As a bonus, the "--buildroot" parameter (or whatever name is preferred)
> would be a nice-to-have.
> >
> > This is an idea that would be useful to explore. Could you please add an
> issue to the board?
> Good idea! Here it is: https://github.com/singularityware/singularity/
> issues/1025
>
> > haha, awesome. Thanks to you too! :)
> Thanks to you, singularity is awesome :-).
>
> thanks!! +1 on buildroot.


> >
> >
> >     Many thanks for the elaborate reply (and for making singularity the
> successful project it already is!) :-),
> >             Oliver
> >
> >     Am 06.10.2017 um 18:09 schrieb vanessa s:
> >     > Hey Oliver,
> >     >
> >     > I think you have a few options.
> >     >
> >     >> I have just now found the need to add files to containers, and it
> seems there are two options (%setup anf %files).
> >     >> However, what is unclear to me is how I can make the build-recipe
> reasonably portable, i.e. "how to specify the paths".
> >     >
> >     > %setup shouldn't be needed for much, as files are (as of recent
> versions) added to the container prior to post. If you need to make
> directories for the files that don't exist, you would want to add them in
> %setup:
> >     >
> >     >
> >     >     mkdir -p ${SINGULARITY_ROOTFS}/data
> >     >
> >     >     and then copy via files
> >     >
> >     >     %files
> >     >     script.sh /data/script.sh
> >     >
> >     >
> >     >> Right now, I have a git-tree organized as follows:
> >     >
> >     >> recipes/SL6/default.def
> >     >> recipes/Ubuntu1604/default.def
> >     >> resources/profile/setupATLAS.sh
> >     >> resources/profile/setupBelle.sh
> >     >
> >     > The good news (if you want a service) is that Singularity Hub
> (2.0) that will be released after Singularity 2.4 is going to support this
> structure. The standard is to find (recursively) any file called
> "Singularity" and build if it's been updated. The extension of the file is
> the tag. So for your above files, you would have a repo connected to
> Singularity Hub with this organization:
> >     >
> >     >
> >     >     recipes/SL6/Singularity.SL6
> >     >     recipes/Ubuntu1604/Singularity.Ubuntu16.04
> >     >
> >     >
> >     > For files, at least for Singularity Hub, the builder is always
> going to set the base as the repo base, so you would still add files like:
> >     >
> >     >     %files
> >     >     resources/profile/setupBelle.sh
> >     >     resources/profile/setupATLAS.sh
> >     >
> >     >
> >     > and in the above those would go to the root of the image, same name
> >     >
> >     >> Now I would like to:
> >     >> - Be able to call "singularity bootstrap" from anywhere, i.e. not
> caring about the actual working directory of the "singularity"
> bootstrapping process.
> >     >
> >     > I'm not sure I totally follow here - Singularity needs minimally a
> definition file (Singularity) and path to an image - the build context is
> important. Docker is the same - when you build it looks for the Dockerfile
> and local context. What would make sense is to have some standard
> organization of the build directory, and then have a common bootstrap file
> (adding files from the same folder, finding the definition) sort of
> automatically. Another idea is to have a wrapper around singularity that
> keeps a record of build bases (directories) associated with recipe or uri
> names, and then when you call to bootstrap /build with the uri, it changes
> directories appropriately, etc.
> >     >
> >     >> - Copy the resource-files into my containers.
> >     >> - Achieve that without hardcoding any absolute paths in the build
> recipe.
> >     >
> >     > You shouldn't need to - given that you have a "resources" folder
> in the root of the build directory, if you are running it from there you
> can use relative paths.
> >     >
> >     >> This burns down to the question: How do I specify the path
> correctly in the build-recipe?
> >     >> Is it expected to be:
> >     > *> - relative to the working directory of the "singularity
> bootstrap" process? That would be very much against portability.
> >     > *> - relative to the location of the build recipe? Then I could
> probably use "../../resources/profile/setupATLAS.sh
> /etc/profile.d/setupATLAS.sh" in my "%files" section.
> >     >
> >     > It's relative to where you are calling it. I don't think this
> breaks portability, if you think about the ways that people share
> containers and recipes. For containers, the work is done and the recipes
> are inside - this is what we care most about. For portability of the
> predecessor to the container (recipe, files) we use version control (eg
> Github) and we don't care about absolute paths. It's portable because
> someone else can download my repo, and build my container.
> >     >
> >     >>
> >     >> Maybe it's even possible to pass it in, i.e. use something like
> >     >> %files
> >     >> ${resourcedir:-../../resources}/profile/setupATLAS.sh
> >     >> inside the recipe, and use "${resourcedir}" from the bootstraping
> host's environment if it is set?
> >     >
> >     > I think it would be unlikely for most to have one researcher's
> special environment variable, but I could be wrong.
> >     >
> >     >
> >     >> This is not really clear to me from the documentation, but maybe
> I just missed it ;-).
> >     >
> >     > If you could better define what exactly isn't reasonable about
> relative paths from some base, I can offer suggestions. If you are looking
> for a local image manager to make it easy to push your own containers (and
> find them later) check out Singularity Registry https://
> singularityhub.github.io/sregistry/ <https://singularityhub.
> github.io/sregistry/>
> >     >
> >     >> All the best and many thanks for your help!
> >     >>         Oliver
> >     >>
> >     >> --
> >     >> You received this message because you are subscribed to the
> Google Groups "singularity" group.
> >     >> To unsubscribe from this group and stop receiving emails from it,
> send an email to singu...@lbl.gov <mailto:singularity%
> 2Bunsu...@lbl.gov> <mailto:singularity%...@lbl.gov <mailto:
> singularity%2...@lbl.gov>>.
> >     >
> >     > --
> >     > Vanessa Villamia Sochat
> >     > Stanford University
> >     >
> >     > --
> >     > You received this message because you are subscribed to the Google
> Groups "singularity" group.
> >     > To unsubscribe from this group and stop receiving emails from it,
> send an email to singu...@lbl.gov <mailto:singularity%
> 2Bunsu...@lbl.gov> <mailto:singu...@lbl.gov <mailto:
> singularity%...@lbl.gov>>.
> >
> >
> >
> >
> > --
> > Vanessa Villamia Sochat
> > Stanford University '16
> > (603) 321-0676
>
>


-- 
Vanessa Villamia Sochat
Stanford University '16
(603) 321-0676

--001a113cd4dc03a20d055ae60ce8
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div class=3D"gmail_extra"><div class=3D"gmail_quote"><blo=
ckquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left=
:1px solid rgb(204,204,204);padding-left:1ex">Yes, I know - my complaint wa=
s really about the reproducibility of the actual build procedure.<br>
<span class=3D"gmail-"><br></span></blockquote><div>This is a tough one! Th=
e premise is that there is one <a href=3D"https://www.youtube.com/watch?v=
=3DHemmX3IoHe8">&quot;right&quot; way to build an image</a>. The most basic=
 thing the software can take account for is having one recipe that is used =
to completely re-make the image. What we don&#39;t control for is the conte=
nt that is added to it - this is a decision of the user. From an analysis o=
f the software, given this basic function, reproducibility is assured.</div=
><div><br></div><div>What Singularity does not cover (as it&#39;s out of sc=
ope) is the manager that sets up the particulars of some build to then call=
 a singularity build.=C2=A0 Think of all the options and needs there are! I=
&#39;ll go over the big ones I see:</div><div><br></div><div><b>Single User=
s (Cloud)</b></div><div>Many users don&#39;t have an HPC center that can af=
ford to do much more than install Singularity. Thus is the reason for Singu=
larity Hub - you can use Github (just as researchers normally do) and push =
a file called &quot;Singularity&quot;, put file dependencies in the repo, a=
ssume the build is done relevant to the repo base, and they build automatic=
ally and are delivered via singularity shub:// uri.=C2=A0 Another cloud man=
ager of this type could reproduce perfectly just knowing the repos.</div><d=
iv><br></div><div><b>Institution (possible private)</b></div><div>Singulari=
ty Hub didn&#39;t meet the need for institutions that didn&#39;t want their=
 images to be public, or to have 1000 Github repos. They also desire to bui=
ld in their particular way (build server? slurm? still Github with user PRs=
?) This is the rationale for Singularity Registry - you do your thing, then=
 push images to it, also available via shub://</div><div><br></div><div><b>=
SLURM / HPC</b></div><div>This is the use case not addressed, and mostly be=
cause every cluster is so different I couldn&#39;t imagine a &quot;one thin=
g works for all&quot; solution. Actually, I started making a solution for t=
his - a singularity image with a builder and enforced internal structure --=
&gt; <a href=3D"https://github.com/singularityhub/singularity-registry">htt=
ps://github.com/singularityhub/singularity-registry</a> but spent a few mon=
ths on it, heard from most that they wanted Docker, and just started over.<=
/div><div><br></div><div>The best I can offer, aside from writing your own =
little bash script with specifics to the cluster, is to think about the rec=
ipe. Arguably, if you didn&#39;t use local files but just retrieved them fr=
om a secure place (and checking your sums and what not) then the entire Sin=
gularity build produce is reproducible, from anywhere with a definition fil=
e, and an internet connection. You also might want to think about macros in=
 the recipe - given a simple format for keeping things (see the repo I link=
ed above for what I was working on) then some user could plug in their base=
 directory as a macro,and files would be copied relative to that. WIthout t=
he macro, it would assume PWD. That would be a cool idea!</div><blockquote =
class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px sol=
id rgb(204,204,204);padding-left:1ex"><span class=3D"gmail-"><br>
&gt; This is also an issue of education about security. This is just the sa=
me as saying I could add credentials to a Github repo and push it. But I th=
ink I get what you are saying - the user would be doing this unknowingly. A=
ll I can say is that they should look at the recipe file first, OR use a pr=
e-built container that can&#39;t take their files and distribute them.<br><=
/span></blockquote><div><br></div><div>yes!</div><div>=C2=A0</div><blockquo=
te class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px =
solid rgb(204,204,204);padding-left:1ex"><span class=3D"gmail-">
</span>That&#39;s exactly my point. Even from the recipe, it would not be o=
bvious the container might pick up my credentials if I bootstrap it startin=
g &quot;singularity bootstrap&quot; from inside my home,<br>
unless you know that singularity, unlike Docker, uses the working directory=
 as build context and not the location of the Singularity build recipe.<br>
Since most people will know Docker, that difference may come as a huge surp=
rise.<br>
<span class=3D"gmail-"><br></span></blockquote><div>To be specific again, t=
his PWD is only relevant for %setup and adding files %files, which is what =
we&#39;ve been talking about. If you build from a folder and add files foo,=
 it is going to look for the files in that folder before the %post section =
is executed. Once you are in %post, the build itself happens somewhere in /=
var (I don&#39;t remember the full path actually).</div><div>=C2=A0</div><b=
lockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-le=
ft:1px solid rgb(204,204,204);padding-left:1ex"><span class=3D"gmail-">
&gt; I still don&#39;t follow. Singularity is exactly the same as Docker in=
 this regard, the commands ADD/COPY correspond to our %files section, and t=
he paths are relative to the build folder.<br>
</span>Basically, what I&#39;d like to point out is that docker closes off =
all directories outside of the build directory - and the build directory is=
 explicitly set to the location of the build recipe, and not the PWD.<br>
This prevents any accidental or malicious attempt to pick up stuff from the=
 host which should not enter the container.<br></blockquote><div><br></div>=
<div>Yes this makes a lot of sense - I&#39;d like to see this added to Sing=
ularity. =C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0px =
0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">
<br>
&gt; So you are saying you want to completely close off directories /outsid=
e /of the PWD / build directory? So I could add files relative, but not do =
something like ../../parent/directories ? That seems reasonable to do, we c=
ould add some kind of variable for a &quot;build_dir&quot; and spit out an =
error if the user tries to copy / go outside of it.<br>
Exactly :-).<br>
I consider this would be more safe in the long run, and protect you from sh=
ooting yourself in the foot accidentally (at least in this way ;-) ).<br>
Additionally, I would prefer if the default build context would explicitly =
be the location of the Singularity recipe instead of PWD, but this goes han=
d in hand.<br>
<span class=3D"gmail-"><br></span></blockquote><div>yes that&#39;s very Doc=
kery :)</div><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"ma=
rgin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:=
1ex"><span class=3D"gmail-"><br>
</span>We will consider that in a later stage of the project, when our user=
s are more used to containers.<br>
<span class=3D"gmail-"><br></span></blockquote><div>great! I hope they catc=
h up faster than I, I&#39;m still not used to these container things :)</di=
v><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0px 0p=
x 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"><span =
class=3D"gmail-">
&gt;&gt; So all in all, my suggestion would be to re-think the build contex=
t concept to follow the more safe and reproducible concept from Docker,<br>
&gt;&gt; and at least document what the build context is (as Docker does).<=
br>
&gt;&gt; As a bonus, the &quot;--buildroot&quot; parameter (or whatever nam=
e is preferred) would be a nice-to-have.<br>
&gt;<br>
&gt; This is an idea that would be useful to explore. Could you please add =
an issue to the board?<br>
</span>Good idea! Here it is: <a href=3D"https://github.com/singularityware=
/singularity/issues/1025" rel=3D"noreferrer" target=3D"_blank">https://gith=
ub.com/<wbr>singularityware/singularity/<wbr>issues/1025</a><br>
<span class=3D"gmail-"><br>
&gt; haha, awesome. Thanks to you too! :)<br>
</span>Thanks to you, singularity is awesome :-).<br>
<div><div class=3D"gmail-h5"><br></div></div></blockquote><div>thanks!! +1 =
on buildroot.</div><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=
=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding=
-left:1ex"><div><div class=3D"gmail-h5">
&gt;<br>
&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0Many thanks for the elaborate reply (and for making=
 singularity the successful project it already is!) :-),<br>
&gt;=C2=A0 =C2=A0 =C2=A0=C2=A0 =C2=A0 =C2=A0 =C2=A0 Oliver<br>
&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0Am 06.10.2017 um 18:09 schrieb vanessa s:<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt; Hey Oliver,<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt; I think you have a few options.<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt; I have just now found the need to add file=
s to containers, and it seems there are two options (%setup anf %files).<br=
>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt; However, what is unclear to me is how I ca=
n make the build-recipe reasonably portable, i.e. &quot;how to specify the =
paths&quot;.<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt; %setup shouldn&#39;t be needed for much, as fi=
les are (as of recent versions) added to the container prior to post. If yo=
u need to make directories for the files that don&#39;t exist, you would wa=
nt to add them in %setup:<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;=C2=A0 =C2=A0 =C2=A0mkdir -p ${SINGULARITY_ROOT=
FS}/data<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;=C2=A0 =C2=A0 =C2=A0and then copy via files<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;=C2=A0 =C2=A0 =C2=A0%files<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;=C2=A0 =C2=A0 =C2=A0script.sh /data/script.sh<b=
r>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt; Right now, I have a git-tree organized as =
follows:<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt; recipes/SL6/default.def<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt; recipes/Ubuntu1604/default.def<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt; resources/profile/setupATLAS.<wbr>sh<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt; resources/profile/setupBelle.<wbr>sh<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt; The good news (if you want a service) is that =
Singularity Hub (2.0) that will be released after Singularity 2.4 is going =
to support this structure. The standard is to find (recursively) any file c=
alled &quot;Singularity&quot; and build if it&#39;s been updated. The exten=
sion of the file is the tag. So for your above files, you would have a repo=
 connected to Singularity Hub with this organization:<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;=C2=A0 =C2=A0 =C2=A0recipes/SL6/Singularity.SL6=
<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;=C2=A0 =C2=A0 =C2=A0recipes/Ubuntu1604/<wbr>Sin=
gularity.Ubuntu16.04<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt; For files, at least for Singularity Hub, the b=
uilder is always going to set the base as the repo base, so you would still=
 add files like:<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;=C2=A0 =C2=A0 =C2=A0%files<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;=C2=A0 =C2=A0 =C2=A0resources/profile/setupBell=
e.<wbr>sh<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;=C2=A0 =C2=A0 =C2=A0resources/profile/setupATLA=
S.<wbr>sh<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt; and in the above those would go to the root of=
 the image, same name<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt; Now I would like to:<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt; - Be able to call &quot;singularity bootst=
rap&quot; from anywhere, i.e. not caring about the actual working directory=
 of the &quot;singularity&quot; bootstrapping process.<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt; I&#39;m not sure I totally follow here - Singu=
larity needs minimally a definition file (Singularity) and path to an image=
 - the build context is important. Docker is the same - when you build it l=
ooks for the Dockerfile and local context. What would make sense is to have=
 some standard organization of the build directory, and then have a common =
bootstrap file (adding files from the same folder, finding the definition) =
sort of automatically. Another idea is to have a wrapper around singularity=
 that keeps a record of build bases (directories) associated with recipe or=
 uri names, and then when you call to bootstrap /build with the uri, it cha=
nges directories appropriately, etc.<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt; - Copy the resource-files into my containe=
rs.<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt; - Achieve that without hardcoding any abso=
lute paths in the build recipe.<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt; You shouldn&#39;t need to - given that you hav=
e a &quot;resources&quot; folder in the root of the build directory, if you=
 are running it from there you can use relative paths.<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt; This burns down to the question: How do I =
specify the path correctly in the build-recipe?<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt; Is it expected to be:<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt; *&gt; - relative to the working directory of t=
he &quot;singularity bootstrap&quot; process? That would be very much again=
st portability.<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt; *&gt; - relative to the location of the build =
recipe? Then I could probably use &quot;../../resources/profile/<wbr>setupA=
TLAS.sh /etc/profile.d/setupATLAS.sh&quot; in my &quot;%files&quot; section=
.<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt; It&#39;s relative to where you are calling it.=
 I don&#39;t think this breaks portability, if you think about the ways tha=
t people share containers and recipes. For containers, the work is done and=
 the recipes are inside - this is what we care most about. For portability =
of the predecessor to the container (recipe, files) we use version control =
(eg Github) and we don&#39;t care about absolute paths. It&#39;s portable b=
ecause someone else can download my repo, and build my container.<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt; Maybe it&#39;s even possible to pass it in=
, i.e. use something like<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt; %files<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt; ${resourcedir:-../../<wbr>resources}/profi=
le/setupATLAS.<wbr>sh<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt; inside the recipe, and use &quot;${resourc=
edir}&quot; from the bootstraping host&#39;s environment if it is set?<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt; I think it would be unlikely for most to have =
one researcher&#39;s special environment variable, but I could be wrong.<br=
>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt; This is not really clear to me from the do=
cumentation, but maybe I just missed it ;-).<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
</div></div>&gt;=C2=A0 =C2=A0 =C2=A0&gt; If you could better define what ex=
actly isn&#39;t reasonable about relative paths from some base, I can offer=
 suggestions. If you are looking for a local image manager to make it easy =
to push your own containers (and find them later) check out Singularity Reg=
istry=C2=A0<a href=3D"https://singularityhub.github.io/sregistry/" rel=3D"n=
oreferrer" target=3D"_blank">https://<wbr>singularityhub.github.io/<wbr>sre=
gistry/</a> &lt;<a href=3D"https://singularityhub.github.io/sregistry/" rel=
=3D"noreferrer" target=3D"_blank">https://singularityhub.<wbr>github.io/sre=
gistry/</a>&gt;<br>
<span class=3D"gmail-">&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt; All the best and many thanks for your help=
!<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt; =C2=A0 =C2=A0 =C2=A0 =C2=A0 Oliver<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt; --<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt; You received this message because you are =
subscribed to the Google Groups &quot;singularity&quot; group.<br>
</span>&gt;=C2=A0 =C2=A0 =C2=A0&gt;&gt; To unsubscribe from this group and =
stop receiving emails from it, send an email to <a href=3D"mailto:singulari=
ty%...@lbl.gov">singularity+unsubscribe@lbl.<wbr>gov</a> &lt;mailto:<a href=
=3D"mailto:singularity%2...@lbl.gov">singularity%<wbr>2Bunsu...@lbl.gov</a>=
&gt; &lt;mailto:<a href=3D"mailto:singularity%2...@lbl.gov">singularity%<wb=
r>2Bunsu...@lbl.gov</a> &lt;mailto:<a href=3D"mailto:singularity%25...@lbl.=
gov">singularity%<wbr>252Buns...@lbl.gov</a>&gt;&gt;.<br>
<span class=3D"gmail-">&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt; --<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt; Vanessa Villamia Sochat<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt; Stanford University<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt;<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt; --<br>
&gt;=C2=A0 =C2=A0 =C2=A0&gt; You received this message because you are subs=
cribed to the Google Groups &quot;singularity&quot; group.<br>
</span>&gt;=C2=A0 =C2=A0 =C2=A0&gt; To unsubscribe from this group and stop=
 receiving emails from it, send an email to <a href=3D"mailto:singularity%.=
..@lbl.gov">singularity+unsubscribe@lbl.<wbr>gov</a> &lt;mailto:<a href=3D"=
mailto:singularity%2...@lbl.gov">singularity%<wbr>2Bunsu...@lbl.gov</a>&gt;=
 &lt;mailto:<a href=3D"mailto:singularity%...@lbl.gov">singularity+<wbr>uns=
ub...@lbl.gov</a> &lt;mailto:<a href=3D"mailto:singularity%2...@lbl.gov">si=
ngularity%<wbr>2Bunsu...@lbl.gov</a>&gt;&gt;.<br>
&gt;<br>
&gt;<br>
&gt;<br>
<span class=3D"gmail-HOEnZb"><font color=3D"#888888">&gt;<br>
&gt; --<br>
&gt; Vanessa Villamia Sochat<br>
&gt; Stanford University &#39;16<br>
&gt; <a href=3D"tel:%28603%29%20321-0676" value=3D"+16033210676">(603) 321-=
0676</a><br>
<br>
</font></span></blockquote></div><br><br clear=3D"all"><div><br></div>-- <b=
r><div class=3D"gmail_signature" data-smartmail=3D"gmail_signature">Vanessa=
 Villamia Sochat<br>Stanford University &#39;16<br><div><div><div>(603) 321=
-0676</div></div></div></div>
</div></div>

--001a113cd4dc03a20d055ae60ce8--
