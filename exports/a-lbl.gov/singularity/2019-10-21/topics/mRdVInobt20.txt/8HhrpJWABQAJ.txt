X-Received: by 10.99.38.132 with SMTP id m126mr296504pgm.9.1507314685285;
        Fri, 06 Oct 2017 11:31:25 -0700 (PDT)
X-BeenThere: singularity@lbl.gov
Received: by 10.98.201.87 with SMTP id k84ls6755313pfg.14.gmail; Fri, 06 Oct
 2017 11:31:24 -0700 (PDT)
X-Received: by 10.99.149.15 with SMTP id p15mr2772521pgd.406.1507314684347;
        Fri, 06 Oct 2017 11:31:24 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1507314684; cv=none;
        d=google.com; s=arc-20160816;
        b=PbBsikQ58MyTLXoEPxgOy7c7UO2i5oBeaBpvlkBtXKzI4TWODWXVJnL7dbEtUp/krz
         GqFBNSalBqJIWyIw9zSXuuOiOO0dTEY6fXTM8hOCOaSgF71eMyb4iiir3fy3PB8M9fOX
         7PA8GIvVGe0WfK3xdYBb42DgH1TWnZveZTX6aXgKP3qm/k1UG3rtalw/hrQmP07Bqeyg
         XV1Y8jJZtHioOpyBa1u60NXmWs/vHTWLtDn98Z3L7MaG5Kr8rmBGIYvB/jmVB0drmAKE
         L1QGhQ2UM31xeznC/H4zrKrNNwWL0f3B9Kyp33kZ6nEbuUYjnbZ9MS7nqoH2uFwMYflG
         SjYQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=content-transfer-encoding:content-language:in-reply-to:mime-version
         :user-agent:date:message-id:from:cc:references:to:subject
         :dkim-signature:arc-authentication-results;
        bh=i6Ypcq0MhvzppqppLb/83ZFsr9m6BDn3h+lyzGXfUhA=;
        b=wQU2AxM6hFGq9DX+exVf2zoYd82ajTo7y8cXR5X69wjSYoZd3eSeOu8Kd3Hbv1dDVy
         ThW7iQ1C2f1kzPC/9Z88zq766g4ecV/ZJ/hGLbmn/rSRP5BMDbBpRBApU8y/oPeWfumE
         NYQGIf8Rg4PmN2i2tCTVeykwQKrSNkO3pjS1VOpUwhcWNhBO9XM+03Cb99F9wG/UTYDH
         muWUaXK3KGjIxcxu9fWm4/rmvsUypPmmRnhbOTcTiv2JVeT/P55tWQN7r6SGis2An96j
         a/+EYnAFfiBmzcDPGjxEe/daITGsuLFacBMNJ8Nvr6zH2Aye7/FLq06GN0yTiU/wSk53
         6ViA==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass head...@googlemail.com header.s=20161025 header.b=PRRbDGLk;
       spf=pass (google.com: domain of o.fre...@googlemail.com designates 74.125.82.48 as permitted sender) smtp.mailfrom=o.fre...@googlemail.com
Return-Path: <o.fre...@googlemail.com>
Received: from fe3.lbl.gov (fe3.lbl.gov. [128.3.41.68])
        by mx.google.com with ESMTP id 67si1648178pla.782.2017.10.06.11.31.24
        for <singu...@lbl.gov>;
        Fri, 06 Oct 2017 11:31:24 -0700 (PDT)
Received-SPF: pass (google.com: domain of o.fre...@googlemail.com designates 74.125.82.48 as permitted sender) client-ip=74.125.82.48;
Authentication-Results: mx.google.com;
       dkim=pass head...@googlemail.com header.s=20161025 header.b=PRRbDGLk;
       spf=pass (google.com: domain of o.fre...@googlemail.com designates 74.125.82.48 as permitted sender) smtp.mailfrom=o.fre...@googlemail.com
X-Ironport-SBRS: 2.7
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A2H9AgDzytdZfzBSfUpZAx0BBQELARkGD?=
 =?us-ascii?q?IJmgTCBFYNyCJoIgXaWPYFBQwoYC4ELgz5PAoQgQxQBAQEBAQEBAQEBAQIQAQE?=
 =?us-ascii?q?JCwsIJjGCMyIMBEYpAwEBAQEBAQEBASIBAQEBAQEBAQEBAQEBAQEBAQEBARYCD?=
 =?us-ascii?q?R4EPAECAgEjDwENAQ0mBQEDAQsGAwIaAiMDAgIxAwEFAQsRBggFAgQBAQEBEgQ?=
 =?us-ascii?q?DBIl2AQMNCAEEC4ZgkRtAilgRgSOCJ4MKBYNhCkANg2UBAQEBAQEEAQEBAQEBA?=
 =?us-ascii?q?RkCBgkBCHyCH4ICgVGCFYFwgQ6EUQESAUAmgkyCQSAFkUCPc4dejxtbhRSDSYV?=
 =?us-ascii?q?rgVORcgGDOQIEAgQFAgYUJIEVNnE0CzNFeIRxghEDdAiHAYI0AQEB?=
X-IronPort-AV: E=Sophos;i="5.42,484,1500966000"; 
   d="scan'208";a="91927645"
Received: from mail-wm0-f48.google.com ([74.125.82.48])
  by fe3.lbl.gov with ESMTP; 06 Oct 2017 11:31:21 -0700
Received: by mail-wm0-f48.google.com with SMTP id u138so9503614wmu.4
        for <singu...@lbl.gov>; Fri, 06 Oct 2017 11:31:21 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlemail.com; s=20161025;
        h=subject:to:references:cc:from:message-id:date:user-agent
         :mime-version:in-reply-to:content-language:content-transfer-encoding;
        bh=i6Ypcq0MhvzppqppLb/83ZFsr9m6BDn3h+lyzGXfUhA=;
        b=PRRbDGLkxAjb+s6S/UG0b5N8/OGtTUv3p4GglEzr1+NsxQXzkgfWb0fgfemEaYGUV8
         KFh1aJSIJJyK+PjCTNzXHBHuVg1lvKC81wGzNwT6GLbI2f+Tz4Mf+TRFeJp85/Zq3EfL
         A6KXAYXIx/IMQSp1Ge8vJPZkJD7hLwM+pVsStMqpKuR6BPngzDKIyz+9pp+ek7eeKPNr
         oQJ7NGSeple7IdMeGXlnRhIm4q5L1Z6zknBw2Ca2M7g4uxlFywHbBl07Gp5n78Hkgha8
         ZBDu82ITAQuNUSHHoaBmQCvem8aJYaWZ0OSi2ilpd6E5CPpKk1luOiSN2ImXaS9RKFxn
         LaHg==
X-Gm-Message-State: AMCzsaWTXgLyODNOiRDlkwN6J3qn+mXSnSDuniyC/LhTtwi0tJZOLoaj
	2SYQRMk64sQRFUCq+yX8+Z5y7g==
X-Received: by 10.28.147.209 with SMTP id v200mr2291895wmd.123.1507314679904;
        Fri, 06 Oct 2017 11:31:19 -0700 (PDT)
Return-Path: <o.fre...@googlemail.com>
Received: from ?IPv6:2a01:5c0:11:30d0:3896:64a0:313d:c937? ([2a01:5c0:11:30d0:3896:64a0:313d:c937])
        by smtp.googlemail.com with ESMTPSA id q81sm3241023wrb.88.2017.10.06.11.31.18
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Fri, 06 Oct 2017 11:31:19 -0700 (PDT)
Subject: Re: [Singularity] Adding files in a build recipe
To: vanessa s <vso...@gmail.com>
References: <c7ac581e-de03-1e02-207c-55c3b5677eba@googlemail.com>
 <CAM=pu+Ja9J+mb1MsswRU3X-vy-BJT64TcwKu3=B2hjo4anEMQQ@mail.gmail.com>
 <aa96e91d-7dd8-83e7-f25b-1d75ecec94d7@googlemail.com>
 <CAM=pu++w-5sgrAPH3vibN-VFTDgEyhbSssi1Z6-a8e92Xo4F4g@mail.gmail.com>
Cc: singu...@lbl.gov
From: Oliver Freyermuth <o.fre...@googlemail.com>
Message-ID: <fe2d9b7b-fae3-755e-356b-8e7e3ce80aae@googlemail.com>
Date: Fri, 6 Oct 2017 20:31:17 +0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101
 Thunderbird/52.3.0
MIME-Version: 1.0
In-Reply-To: <CAM=pu++w-5sgrAPH3vibN-VFTDgEyhbSssi1Z6-a8e92Xo4F4g@mail.gmail.com>
Content-Type: text/plain; charset=utf-8
Content-Language: en-GB
Content-Transfer-Encoding: 8bit

Hi Vanessa, 

many thanks for the follow up :-). 

Am 06.10.2017 um 19:25 schrieb vanessa s:
>> For docker (please correct me if I am wrong), the build context is enforced to be the place where the Dockerfile is placed, so again it does not matter where I call the actual "docker build" binary.
>> If singularity really uses the working directory where the binary is started as build context, I consider this a portability and reproducibility issue,
> Oh sorry I mispoke then - Singularity is an executable added to your path that you can call from anywhere. It works just as Docker does with regards to the build recipe, but is more flexible because it doesn't automatically add everything in sight (eg, why we have .dockerignore)Yes, I agress, singularity is much nicer in this regard (there are also many things I dislike about the Dockerfile format itself...). 

>> since a user always has to enter the directory where the singularity recipe is placed in to achieve reproducible behaviour on his / her machine.
>  Another clarification - this is /only/Â the case when you build. Before you build the image and have different files, of course it's not a reproducible container. Once you build the container, then you can be assured reproducibility as everything is packaged inside.
Yes, I know - my complaint was really about the reproducibility of the actual build procedure. 

>> %files
>> .ssh/id_rsa /home/user/.ssh/id_rsa
>> .ssh/id_rsa.pub /home/user/.ssh/id_rsa.pub
> Is that even a good idea? These kinds of things might be more appropriate for a user to map to their own home (so the container doesn't store them, and in fact if you are in home you would map the calling user's home directory over it anyway) or to produce (again mapped to the user's host) at runtime. I don't think it's generally good practice to store credentials, certificates, etc. in the (static / not used) image.
For sure this is a very bad idea - I would never actually do that, this was just an example to get the idea. 

> yeah DON'T do that. That borders on malicious to have a user build a container and knowingly copy their secrets (whatever they might be) into it. 
I won't - but it would be nice if it was not possible from the start ;-). Better protect the users as good as possible ;-). 

> This is also an issue of education about security. This is just the same as saying I could add credentials to a Github repo and push it. But I think I get what you are saying - the user would be doing this unknowingly. All I can say is that they should look at the recipe file first, OR use a pre-built container that can't take their files and distribute them. 
That's exactly my point. Even from the recipe, it would not be obvious the container might pick up my credentials if I bootstrap it starting "singularity bootstrap" from inside my home,
unless you know that singularity, unlike Docker, uses the working directory as build context and not the location of the Singularity build recipe. 
Since most people will know Docker, that difference may come as a huge surprise. 

> I still don't follow. Singularity is exactly the same as Docker in this regard, the commands ADD/COPY correspond to our %files section, and the paths are relative to the build folder.
Basically, what I'd like to point out is that docker closes off all directories outside of the build directory - and the build directory is explicitly set to the location of the build recipe, and not the PWD. 
This prevents any accidental or malicious attempt to pick up stuff from the host which should not enter the container. 

> So you are saying you want to completely close off directories /outside /of the PWD / build directory? So I could add files relative, but not do something like ../../parent/directories ? That seems reasonable to do, we could add some kind of variable for a "build_dir" and spit out an error if the user tries to copy / go outside of it.
Exactly :-). 
I consider this would be more safe in the long run, and protect you from shooting yourself in the foot accidentally (at least in this way ;-) ). 
Additionally, I would prefer if the default build context would explicitly be the location of the Singularity recipe instead of PWD, but this goes hand in hand. 

>> As it is now, everybody building a singularity container seems to have to change manually (or via wrapper) to the directory of the build recipe before bootstrapping to ensure things work out.
>> This is something I dislike, and it's not even documented (I think) that the build context is the working directory.
>  /shrug here, I guess I am naturally inclined to want to keep different projects / containers in their own folders, to match with my github repos.
I agree for the "classical" use case. In our case, we would like to build containers for different OSes - but meant to run on the same infrastructure,
and provide comparable environments. 
So it is natural they would share some resources, like stuff to go into /etc/profile.d/. 
But symlinks can solve that as well ;-).

>> It might be very useful if also users should be able to modify container recipes, but right now only we admins are taking care to prepare that ;-).
>  This would be the rationale for Github. If you have a recipe in a Github repo, a user can easily contribute via PR. Then you discuss, change, and it goes through tests. When the merge is done, then you have it deploy with a push to your registry. That way you have user contribution to (admin) served images, and it happens automatically with the PR merge/push. 
We will consider that in a later stage of the project, when our users are more used to containers. 

>> So all in all, my suggestion would be to re-think the build context concept to follow the more safe and reproducible concept from Docker,
>> and at least document what the build context is (as Docker does).
>> As a bonus, the "--buildroot" parameter (or whatever name is preferred) would be a nice-to-have.
> 
> This is an idea that would be useful to explore. Could you please add an issue to the board?
Good idea! Here it is: https://github.com/singularityware/singularity/issues/1025

> haha, awesome. Thanks to you too! :) 
Thanks to you, singularity is awesome :-). 

> 
> 
>     Many thanks for the elaborate reply (and for making singularity the successful project it already is!) :-),
>     Â  Â  Â  Â  Oliver
> 
>     Am 06.10.2017 um 18:09 schrieb vanessa s:
>     > Hey Oliver,
>     >
>     > I think you have a few options.
>     >
>     >> I have just now found the need to add files to containers, and it seems there are two options (%setup anf %files).
>     >> However, what is unclear to me is how I can make the build-recipe reasonably portable, i.e. "how to specify the paths".
>     >
>     > %setup shouldn't be needed for much, as files are (as of recent versions) added to the container prior to post. If you need to make directories for the files that don't exist, you would want to add them in %setup:
>     >
>     >
>     >Â  Â  Â mkdir -p ${SINGULARITY_ROOTFS}/data
>     >
>     >Â  Â  Â and then copy via files
>     >
>     >Â  Â  Â %files
>     >Â  Â  Â script.sh /data/script.sh
>     >
>     >
>     >> Right now, I have a git-tree organized as follows:
>     >
>     >> recipes/SL6/default.def
>     >> recipes/Ubuntu1604/default.def
>     >> resources/profile/setupATLAS.sh
>     >> resources/profile/setupBelle.sh
>     >
>     > The good news (if you want a service) is that Singularity Hub (2.0) that will be released after Singularity 2.4 is going to support this structure. The standard is to find (recursively) any file called "Singularity" and build if it's been updated. The extension of the file is the tag. So for your above files, you would have a repo connected to Singularity Hub with this organization:
>     >
>     >
>     >Â  Â  Â recipes/SL6/Singularity.SL6
>     >Â  Â  Â recipes/Ubuntu1604/Singularity.Ubuntu16.04
>     >
>     >
>     > For files, at least for Singularity Hub, the builder is always going to set the base as the repo base, so you would still add files like:
>     >
>     >Â  Â  Â %files
>     >Â  Â  Â resources/profile/setupBelle.sh
>     >Â  Â  Â resources/profile/setupATLAS.sh
>     >
>     >
>     > and in the above those would go to the root of the image, same name
>     >
>     >> Now I would like to:
>     >> - Be able to call "singularity bootstrap" from anywhere, i.e. not caring about the actual working directory of the "singularity" bootstrapping process.
>     >
>     > I'm not sure I totally follow here - Singularity needs minimally a definition file (Singularity) and path to an image - the build context is important. Docker is the same - when you build it looks for the Dockerfile and local context. What would make sense is to have some standard organization of the build directory, and then have a common bootstrap file (adding files from the same folder, finding the definition) sort of automatically. Another idea is to have a wrapper around singularity that keeps a record of build bases (directories) associated with recipe or uri names, and then when you call to bootstrap /build with the uri, it changes directories appropriately, etc.
>     >
>     >> - Copy the resource-files into my containers.
>     >> - Achieve that without hardcoding any absolute paths in the build recipe.
>     >
>     > You shouldn't need to - given that you have a "resources" folder in the root of the build directory, if you are running it from there you can use relative paths.
>     >
>     >> This burns down to the question: How do I specify the path correctly in the build-recipe?
>     >> Is it expected to be:
>     > *> - relative to the working directory of the "singularity bootstrap" process? That would be very much against portability.
>     > *> - relative to the location of the build recipe? Then I could probably use "../../resources/profile/setupATLAS.sh /etc/profile.d/setupATLAS.sh" in my "%files" section.
>     >
>     > It's relative to where you are calling it. I don't think this breaks portability, if you think about the ways that people share containers and recipes. For containers, the work is done and the recipes are inside - this is what we care most about. For portability of the predecessor to the container (recipe, files) we use version control (eg Github) and we don't care about absolute paths. It's portable because someone else can download my repo, and build my container.
>     >
>     >>
>     >> Maybe it's even possible to pass it in, i.e. use something like
>     >> %files
>     >> ${resourcedir:-../../resources}/profile/setupATLAS.sh
>     >> inside the recipe, and use "${resourcedir}" from the bootstraping host's environment if it is set?
>     >
>     > I think it would be unlikely for most to have one researcher's special environment variable, but I could be wrong.
>     >
>     >
>     >> This is not really clear to me from the documentation, but maybe I just missed it ;-).
>     >
>     > If you could better define what exactly isn't reasonable about relative paths from some base, I can offer suggestions. If you are looking for a local image manager to make it easy to push your own containers (and find them later) check out Singularity RegistryÂ https://singularityhub.github.io/sregistry/ <https://singularityhub.github.io/sregistry/>
>     >
>     >> All the best and many thanks for your help!
>     >> Â  Â  Â  Â  Oliver
>     >>
>     >> --
>     >> You received this message because you are subscribed to the Google Groups "singularity" group.
>     >> To unsubscribe from this group and stop receiving emails from it, send an email to singu...@lbl.gov <mailto:singularity%...@lbl.gov> <mailto:singularity%...@lbl.gov <mailto:singularity%2...@lbl.gov>>.
>     >
>     > --
>     > Vanessa Villamia Sochat
>     > Stanford University
>     >
>     > --
>     > You received this message because you are subscribed to the Google Groups "singularity" group.
>     > To unsubscribe from this group and stop receiving emails from it, send an email to singu...@lbl.gov <mailto:singularity%...@lbl.gov> <mailto:singu...@lbl.gov <mailto:singularity%...@lbl.gov>>.
> 
> 
> 
> 
> -- 
> Vanessa Villamia Sochat
> Stanford University '16
> (603) 321-0676

