X-Received: by 2002:a62:b618:: with SMTP id j24mr3208935pff.24.1552495778137;
        Wed, 13 Mar 2019 09:49:38 -0700 (PDT)
X-BeenThere: singularity@lbl.gov
Received: by 2002:a62:1548:: with SMTP id 69ls1148524pfv.7.gmail; Wed, 13 Mar
 2019 09:49:36 -0700 (PDT)
X-Received: by 2002:aa7:9099:: with SMTP id i25mr45297453pfa.102.1552495775945;
        Wed, 13 Mar 2019 09:49:35 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1552495775; cv=none;
        d=google.com; s=arc-20160816;
        b=F9/OBQzNrkf2BqAhmbcN3WzhS3/mE+43wQSA/sgwlBhKI11bu3uOgVzb2V0Lqs7CNe
         Hh00THTD7ms7fAn+eamL2/7zMWSU/H8vecHUQ/IS92436GmlCwne6cSnQmHmB0NsAlaX
         J5E0fX99m2tNgMEs4ce3XZzGE3Cp/5QddY5KRqrGTZbftsbPGUyAlUURi80e35pXm0cb
         lVTLbxR7ybIanWpTKGU8CIRpKa044UDwCOwiVZtjRM0M5RMcG24osjGfmnYOhL59GIwu
         oJZaQxPk9sHLkoE+egeymfFvy2OWSNhP+wPGQ+310Lsa8suH/y7xW2wAaXqDLVSPflss
         ZjFQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=content-language:in-reply-to:mime-version:user-agent:date
         :message-id:from:references:to:subject;
        bh=0/FPN2Bjz7e1uBxWHMeFujQkxfCXierQf/IV4FV3K2o=;
        b=opKJYrNOUQ5HOOO6boRIvqzZQ/L+aN3LlhoEl0r0qKE/PaVSa/HwpNHAw/u8RqNcSm
         C74Z4SP5uP1wmksjMocwNxAp5WtYhn2c2au9Vn299AC0V9gLOyDXqZmFOazX08teHzds
         eeNd1A8mSpmumSPXS24v19Hj1eSng8/RGmoNbx+Yrx92hvFn8YsBz21zlqXUtGpJoRxE
         iQDdJgzE0AUyJoUDjmFQezbAwjEE7QB9hb9z/2caI6ODjNyRkW+2meSmaBDFUchtgDYB
         OOVpjzgUccy2THjycYdKAv92dC1Oiz14ymU92vEWYfLoHyeqON2ObO/1xBHLdSvk8jys
         7ZZA==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of gras...@lal.in2p3.fr designates 134.158.66.141 as permitted sender) smtp.mailfrom=gras...@lal.in2p3.fr
Return-Path: <gras...@lal.in2p3.fr>
Received: from fe3.lbl.gov (fe3.lbl.gov. [131.243.228.52])
        by mx.google.com with ESMTP id m10si10465329pgk.386.2019.03.13.09.49.34
        for <singu...@lbl.gov>;
        Wed, 13 Mar 2019 09:49:34 -0700 (PDT)
Received-SPF: pass (google.com: best guess record for domain of gras...@lal.in2p3.fr designates 134.158.66.141 as permitted sender) client-ip=134.158.66.141;
Authentication-Results: mx.google.com;
       spf=pass (google.com: best guess record for domain of gras...@lal.in2p3.fr designates 134.158.66.141 as permitted sender) smtp.mailfrom=gras...@lal.in2p3.fr
X-Ironport-SBRS: 3.5
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0GWAQBxM4lch41CnoZhAx4BBgcGgWWBD?=
 =?us-ascii?q?liBEoEDJ4QDB4NKj3CCDQ9tiDWPEYEQAxgXHQQECAECAQEYAQwJgUmCL0YChEc?=
 =?us-ascii?q?iOBIBAQMBAQEIAQMCAQECEAEBAQoLCQgpIwyCOgUCAx8HCgRNOy8BAQEBAQEBA?=
 =?us-ascii?q?QEBAQEBAQEBGgIIBT4LARkBAQEBAwUBFAEIAgIHGwUZDRULFQMFAQEBDQsBBgM?=
 =?us-ascii?q?CAgIVAQkFCxURDgUCAwEBAQEBAhUCBII2SwEmAYE2AxUFCq8FfDMfg1Q9ARNBQ?=
 =?us-ascii?q?II+DYIQD4EvhFyGUReBf4ERJ4FtSTWCV0cCAoEaDQQBARIBNgoeCIJDgjUiA4c?=
 =?us-ascii?q?9gj8aCgmGT4FkiWyGZS4qNQmBH4VIAShIg0A/g0VCgzkfiwaIQY9bgRGBMod8g?=
 =?us-ascii?q?0MCERQBgV5XMHFNJxE7gmwJghuBCQECBgGCQYJkh3A+MwEBAQEMjmoPFwQsgXc?=
 =?us-ascii?q?BAQ?=
X-IPAS-Result: =?us-ascii?q?A0GWAQBxM4lch41CnoZhAx4BBgcGgWWBDliBEoEDJ4QDB4N?=
 =?us-ascii?q?Kj3CCDQ9tiDWPEYEQAxgXHQQECAECAQEYAQwJgUmCL0YChEciOBIBAQMBAQEIA?=
 =?us-ascii?q?QMCAQECEAEBAQoLCQgpIwyCOgUCAx8HCgRNOy8BAQEBAQEBAQEBAQEBAQEBGgI?=
 =?us-ascii?q?IBT4LARkBAQEBAwUBFAEIAgIHGwUZDRULFQMFAQEBDQsBBgMCAgIVAQkFCxURD?=
 =?us-ascii?q?gUCAwEBAQEBAhUCBII2SwEmAYE2AxUFCq8FfDMfg1Q9ARNBQII+DYIQD4EvhFy?=
 =?us-ascii?q?GUReBf4ERJ4FtSTWCV0cCAoEaDQQBARIBNgoeCIJDgjUiA4c9gj8aCgmGT4Fki?=
 =?us-ascii?q?WyGZS4qNQmBH4VIAShIg0A/g0VCgzkfiwaIQY9bgRGBMod8g0MCERQBgV5XMHF?=
 =?us-ascii?q?NJxE7gmwJghuBCQECBgGCQYJkh3A+MwEBAQEMjmoPFwQsgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.58,474,1544515200"; 
   d="png'150?scan'150,208,217,150";a="146914659"
Received: from cczrelay01.in2p3.fr ([134.158.66.141])
  by fe3.lbl.gov with ESMTP; 13 Mar 2019 09:47:30 -0700
Received: from [134.158.76.29] (pc-grasland.lal.in2p3.fr [134.158.76.29])
	(authenticated bits=0)
	by cczrelay01.in2p3.fr (8.14.4/8.14.4) with ESMTP id x2DGlOna004344
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=NO)
	for <singu...@lbl.gov>; Wed, 13 Mar 2019 17:47:24 +0100
X-Virus-Status: Clean
X-Virus-Scanned: clamav-milter 0.100.2 at cczrelay01
Subject: Re: [Singularity] Re: Thoughts from a Docker -> Singularity
 conversion attempt
To: singularity@lbl.gov
References: <7bb2ddd5-0de0-5bbd-0fa2-d60c36966e57@lal.in2p3.fr>
 <252104d3-a407-45cd-a305-927355fb7492@lbl.gov>
 <edb27021-149e-00a0-f062-c2b8f2d64ede@lal.in2p3.fr>
 <CAN9aCedDzOTKHjBGNZppa0vm2hUj3xrFKTbab1pjThr+UdkhMA@mail.gmail.com>
 <CAHNsURu1VFTAcUn0Tz1qXfP+Ajku4NZpAv0XoEPck10cgnWVrg@mail.gmail.com>
 <CAM=pu+JX1OK1V-5MiR16d3k2D4i-OfkbSHXJ6w_woVFYD3V7AQ@mail.gmail.com>
 <53507429-8a8a-762f-d996-d0c3c70fe629@lal.in2p3.fr>
From: Hadrien Grasland <gras...@lal.in2p3.fr>
Message-ID: <337f76da-cf6e-d319-4e9a-a190fa88614e@lal.in2p3.fr>
Date: Wed, 13 Mar 2019 17:48:54 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.5.2
MIME-Version: 1.0
In-Reply-To: <53507429-8a8a-762f-d996-d0c3c70fe629@lal.in2p3.fr>
Content-Type: multipart/alternative;
 boundary="------------A68CD1956F688A6028A3FFD3"
Content-Language: en-US

--------------A68CD1956F688A6028A3FFD3
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 8bit

PS: Never mind, upon closer investigation, it is now possible to use 
docker build arguments in FROM statements, given certain restrictions. I 
have updated my recipes to use that feature.

Le 13/03/2019 à 11:03, Hadrien Grasland a écrit :
>
> Hi all,
>
> Sorry for the reply delay, these weeks are a bit busy...
>
> I know the technique of selectively copying file from one container to 
> another in order to shrink image size. Sadly, I currently cannot 
> allocate enough time to my container-building experiments in order to 
> go through the lengthy trial-and-error testing process that this level 
> of size optimization requires. Which is why I am satisfied with what 
> standard package manager cleanup and docker build --squash can give me.
>
> I think the closest equivalent of this compromise in the multistage 
> setup that you are describing would be to copy everything ("/*") from 
> the first stage to the second stage. Would the kind of multistage 
> design that you envision allow for this?
>
> ------------------------------------------------------------------------
>
> Also, bear in mind that size optimizations is not the only reason why 
> I sometimes need a testing stage to be sandwiched inbetween a build 
> stage and a cleanup stage. For example, take this development 
> environment recipe : 
> https://github.com/HadrienG2/spack-based-docker/blob/master/gaudi/Dockerfile 
> .
>
> To the untrained eyes, this recipe may seem unnecessarily complex, as 
> it builds software only to discard the build after the fact. However, 
> the goal is actually to get a working development environment for a 
> piece of software (in this case the Gaudi HEP event processing 
> framework). By building the software and running its unit tests, the 
> Dockerfile implicitly assesses that given the currently selected set 
> of dependencies, the software is buildable and passes its own internal 
> testing. Furthermore, although the Gaudi build has been dropped, the 
> complete set of dependencies remains installed in the target 
> container, so the next Gaudi build will be quick (you only need to 
> clone your git fork and do a spack diy ${GAUDI_SPACK_SPEC} in it).
>
> If you bring it all together, this recipe gives you a container which 
> is ready to use for the purpose of developing Gaudi, and which has 
> been tested to work for this purpose on the latest Gaudi version 
> available at the time where the container was built, all that without 
> the unnecessary size burden of a Gaudi source tree and build which 
> you'd immediately replace with one of your own Gaudi fork anyway.
>
> I believe this use case would be served by multistage builds though. I 
> only need to have a first stage that builds and tests Gaudi, and a 
> second stage which drops the build to make a leaner image.
>
> ------------------------------------------------------------------------
>
> Concerning my list of use cases for build arguments...
>
> The use case of building both a debug and a release version of some 
> software would not be served by a multi-stage setup, because we are 
> talking about two different software build configurations here 
> ("Debug" vs "RelWithDebInfo" or "Release" in CMake-speak) and there is 
> no way to go from one to the other without rebuilding the software. 
> See, for example, the ACTS_BUILD_TYPE build arg in 
> https://github.com/HadrienG2/spack-based-docker/blob/master/acts/Dockerfile 
> .
>
> For an example of selecting a software version with Docker build args, 
> see the ROOT_VERSION and ROOT_CXX_STANDARD build arguments in 
> https://github.com/HadrienG2/spack-based-docker/blob/master/root/Dockerfile 
> . These allow me to centrally control all software versions in the 
> stack centrally at 
> https://github.com/HadrienG2/spack-based-docker/blob/master/rebuild-docker-spack.sh 
> .
>
> The third use case which I presented for build flags is something 
> which, as far as I know, Docker actually cannot do either at the 
> moment. I would like to be able to select from my build script which 
> container I will bootstrap from, in order to avoid hardcoding my 
> private repository name in my Dockerfiles and to be able to select 
> which version of ROOT a Gaudi container (see above) is built from. 
> This becomes more important in Singularity, where there is no 
> repository and (AFAIK) I must hardcode an entire filesystem path in 
> From, which is obviously less clean / more hostile to other people 
> trying to reuse my definition files.
>
> Cheers,
> Hadrien
>
>
> Le 06/03/2019 à 17:00, v a écrit :
>> For a concrete example, we can look at Docker multistage builds. Take 
>> a look at the singularityware/singularity:3.1-slim container vs it's 
>> (not multistage build) counterpart:
>>
>> image.png
>>
>> That's a huge difference! Both recipes (showing the multistage build, 
>> and without) are in the Dockerfile at their respective branches:
>> https://github.com/singularityhub/singularity-docker/blob/3.1-slim/Dockerfile#L41
>>
>> I have mixed feelings about these builds. On the one hand, the 
>> containers are a lot more portable. On the other hand, you lose all 
>> of the source code that the (ultimate) binary files are generated 
>> from, so you couldn't build again if needed. To account for this I 
>> just build both kinds, as they serve different use cases.
>>
>>
>> On Wed, Mar 6, 2019 at 10:50 AM Ian Kaneshiro <i...@sylabs.io 
>> <mailto:i...@sylabs.io>> wrote:
>>
>>     Morning Hadrien,
>>
>>     The definition you proposed would be valid, but it wouldn't have
>>     the behavior you're looking for. Multiple %setup/%post/%test
>>     sections are concatenated together and ran at the same time. The
>>     biggest advantage of multistage builds is in the strive for
>>     smaller container images, which I think is what you want to
>>     accomplish by installing and removing software in multiple steps.
>>     A potential definition would look like this:
>>
>>     Bootstrap: docker
>>     From: centos:7
>>     Stage: devel
>>
>>
>>     %setup
>>     mkdir -p $SINGULARITY_ROOTFS/root/go/src/hello
>>
>>
>>     %files
>>     hello.go /root/go/src/hello/hello.go
>>
>>
>>     %post
>>     yum install wget -y
>>
>>     wget https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz
>>     tar -C /usr/local -xzf go1.10.3.linux-amd64.tar.gz
>>     export PATH=$PATH:/usr/local/go/bin
>>
>>     cd /root/go/src/hello
>>     go build
>>     ./hello
>>
>>
>>
>>     Bootstrap: docker
>>     From: centos:7
>>
>>
>>     %files from devel
>>     /root/go/src/hello/hello /bin/hello
>>
>>     %runscript
>>     hello
>>
>>     This will allow someone to install and build software in one or
>>     more development containers and move it to a final production
>>     container where those build tools aren't installed. Using this
>>     method, roughly follows the idea behind your proposed definition
>>     but without the need to manually remove such tools.
>>
>>     Originally I was thinking of something like `%post --base-env` or
>>     something to that extent. After giving this more thought, I think
>>     this will be too confusing because there is already precedent for
>>     using flags with post to specify bash options, see
>>     https://github.com/sylabs/singularity/issues/2656. Another option
>>     would be insert an environment variable in post like
>>     `SINGULARITY_ENVIRONMENT` called something like
>>     `SINGULARITY_BASE_ENVIRONMENT` that a user can easily source in
>>     %post with `source $SINGULARITY_BASE_ENVIRONMENT` in order to get
>>     the base containers environment.
>>
>>     I think we can do something similar to preserve the environment
>>     between %post and %test at build time, though it's important to
>>     note that the test section can be run directly from the CLI once
>>     the container is built, so having behavior be dictated by the
>>     post environment could cause problems when test is run after the
>>     build if the script is dependent on those variables.
>>
>>     With respect to build flags, can you elaborate more on the last
>>     two bullets? I'm not exactly sure what behavior you're interested
>>     in having. I think multistage builds will allow the first to be
>>     addressed.
>>
>>               o A typical use case is building an image twice, once
>>                 with debug software builds (for debugging) and once
>>                 with release builds (for end usage and profiling)
>>               o Another use case is controlling from remote which
>>                 version of some software gets built, and to
>>                 synchronize that with the output image's file name.
>>               o A third use case is synchronizing the directory where
>>                 image files are written across multiple Singularity
>>                 definition file, and making it externally configurable.
>>
>>     Best,
>>     Ian
>>
>>     On Tue, Mar 5, 2019 at 12:26 PM David Godlove
>>     <davidg...@gmail.com <mailto:davidg...@gmail.com>> wrote:
>>
>>         This is a really groovy thread.  It reminds me why I love
>>         working on an open source project.
>>
>>         On Tue, Mar 5, 2019 at 9:33 AM Hadrien Grasland
>>         <gras...@lal.in2p3.fr <mailto:gras...@lal.in2p3.fr>> wrote:
>>
>>             Dear Lars,
>>
>>             Thanks for your suggestion! Speaking personally, I am a
>>             bit of an infrastructure minimalist, so altough I like
>>             Singularity's model, it would not be attractive enough to
>>             motivate me of migrating from a two-layer infrastructure
>>             (spack + docker) to a five-layer infrastructure (spack +
>>             docker + hpc-container-maker + docker2singularity +
>>             singularity). However, I will keep these links around for
>>             the benefit of colleagues of mine who do not share my
>>             opinions on these matters :)
>>
>>             Hadrien
>>
>>
>>             Le 05/03/2019 à 09:39, Lars Bilke a écrit :
>>>             Dear Hadrien,
>>>
>>>             I just want to draw your attention to the project
>>>             hpc-container-maker
>>>             <https://github.com/NVIDIA/hpc-container-maker> which
>>>             allows to script container definitions with Python. It
>>>             supports both Singularity and Docker output but I found
>>>             creating Docker images with a subsequent conversion step
>>>             to Singularity (e.g. via docker2singularity
>>>             <https://github.com/singularityware/docker2singularity>)
>>>             most useful for development (by leveraging Dockers layer
>>>             caching). I think a lot of your issues can be solved by
>>>             simple scripting the whole image definition process.
>>>
>>>             Best,
>>>             Lars
>>>
>>>             Am Montag, 4. März 2019 16:34:56 UTC+1 schrieb Hadrien
>>>             Grasland:
>>>
>>>                 Dear Singularity users,
>>>
>>>                 I've been packaging HEP software and development
>>>                 environments using a combination of Spack and Docker
>>>                 for a while.
>>>
>>>                   * Spack gives me customizable and ergonomic
>>>                     software builds, with automated dependency
>>>                     management and peaceful coexistence between
>>>                     different build configurations.
>>>                   * Docker gives me cross-OS binary + environment
>>>                     portability, and a way to "freeze" a snapshot of
>>>                     my rolling Linux distribution of choice in order
>>>                     to momentarily prevent Spack from rebuilding
>>>                     everything over and over again the way it loves to.
>>>
>>>                 This is what the end result currently looks like:
>>>                 https://github.com/HadrienG2/spack-based-docker .
>>>
>>>                 A problem with using Docker for this purpose,
>>>                 though, is that it does too much container/host
>>>                 isolation for my use case. I don't really care for
>>>                 Docker masquerading as a VM by hiding the host
>>>                 filesystem and processes from the container, but I
>>>                 do care about the cumbersome side of remembering to
>>>                 bind mount everything, ending up with root-owned
>>>                 files in these bind mounts if I'm not very careful,
>>>                 and ptrace rights being taken away from me unless I
>>>                 take care to pass the magical "I don't care, I trust
>>>                 this container" flags to the docker run command
>>>                 line. From this perspective, I sometimes feel like
>>>                 I'm fighting Docker's cloud-oriented design a bit
>>>                 too much.
>>>
>>>                 Which is what led me to investigate Singularity, an
>>>                 experience which I now feel ready to report on.
>>>
>>>                 ------------------------------------------------------------------------
>>>
>>>                 Having some previous bad experience from the Docker
>>>                 -> Singularity image conversion machinery, I decided
>>>                 for this attempt to try to stick with a pure
>>>                 Singularity workflow, without Docker getting in the
>>>                 way at any time. This was easier than expected:
>>>                 bootstrapping a zypper-based image actually proved
>>>                 very smooth.
>>>
>>>                 My feeling from translating my Docker recipes
>>>                 afterwards is that Singularity does deliver
>>>                 beautifully on the final image usability front
>>>                 (hurray for the simple CLI, ptrace privileges,
>>>                 proper file permissions, and /home mounting by
>>>                 default), but feels quite a bit more painful than
>>>                 Docker on the image builder's side. Here are some
>>>                 particular pain points that I encountered, maybe
>>>                 they have some well-known solutions / workarounds ?
>>>
>>>                   * I miss Docker's build arguments a lot.
>>>                       o A typical use case is building an image
>>>                         twice, once with debug software builds (for
>>>                         debugging) and once with release builds (for
>>>                         end usage and profiling)
>>>                       o Another use case is controlling from remote
>>>                         which version of some software gets built,
>>>                         and to synchronize that with the output
>>>                         image's file name.
>>>                       o A third use case is synchronizing the
>>>                         directory where image files are written
>>>                         across multiple Singularity definition file,
>>>                         and making it externally configurable.
>>>                   * I appreciate Singuarity's attempt to cautiously
>>>                     separate build environment from runtime
>>>                     environment, but find that it makes build
>>>                     environment management difficult:
>>>                       o I often have to write each
>>>                         environment-altering statement three times,
>>>                         once in %post, once in %test, and once in
>>>                         ${SINGULARITY_ENVIRONMENT}
>>>                       o Build environment not being carried over
>>>                         from one parent image to a child image often
>>>                         makes me give up and just write my whole
>>>                         build setup in ${SINGULARITY_ENVIRONMENT} so
>>>                         that I can source that at the beginning of
>>>                         the next image.
>>>                       o %environment is almost never usable for me
>>>                         because most of the time I need some
>>>                         environment to be set both for runtime and
>>>                         for child images.
>>>                   * The idea of separating a build in clear-cut
>>>                     %build, %post, %test phases is nice in theory,
>>>                     but limiting for complex recipes
>>>                       o The folder to which I want to copy files may
>>>                         be created during %post, in which case I
>>>                         need to move files to a temporary directory
>>>                         during %copy and re-move them later.
>>>                       o Some tests can only be run at some stages
>>>                         during the build process, because they rely
>>>                         on a build folder which must be cleaned up
>>>                         at the end of the recipe.
>>>                       o SINGULARITY_ENVIRONMENT not being sourced
>>>                         before %test is painful and uncalled for.
>>>                   * A replacement to Docker layers for build
>>>                     snapshots would be much appreciated.
>>>                       o I certainly don't miss the build
>>>                         performance/size vs recipe readability
>>>                         compromise of Docker saving a layer after
>>>                         every RUN statement...
>>>                       o ...but I do miss being able to quickly
>>>                         investigate a failed build and restart it
>>>                         without going through my whole %post section
>>>                         all over again.
>>>
>>>                 In short, I would be longing for....
>>>
>>>                   * A way to use some externally configurable
>>>                     environment in a singularity definition file
>>>                     (including, and I guess that's the difficult
>>>                     part, in the "From:" statement)
>>>                   * An alternative to SINGULARITY_ENVIRONMENT for
>>>                     configuring build environment instead of runtime
>>>                     environment
>>>                   * A less hacky way to pass environment to childe
>>>                     images' build recipes (may or may not be merged
>>>                     with the above)
>>>                   * A way to check if tests are enabled in %post as
>>>                     a more flexible alternative to the %test section
>>>                       o ...and runtime environment being sourced
>>>                         before the %test section begins.
>>>                   * Faster / easier ways to debug failed Singularity
>>>                     builds than modifying the recipe and restarting
>>>                     it from the beginning.
>>>
>>>                 ...but some of that may be an XY problem coming from
>>>                 my Docker user habits :)
>>>
>>>                 Cheers,
>>>                 Hadrien
>>>
>>>             -- 
>>>             You received this message because you are subscribed to
>>>             the Google Groups "singularity" group.
>>>             To unsubscribe from this group and stop receiving emails
>>>             from it, send an email to
>>>             singu...@lbl.gov
>>>             <mailto:singu...@lbl.gov>.
>>             -- 
>>             You received this message because you are subscribed to
>>             the Google Groups "singularity" group.
>>             To unsubscribe from this group and stop receiving emails
>>             from it, send an email to singu...@lbl.gov
>>             <mailto:singu...@lbl.gov>.
>>
>>         -- 
>>         You received this message because you are subscribed to the
>>         Google Groups "singularity" group.
>>         To unsubscribe from this group and stop receiving emails from
>>         it, send an email to singu...@lbl.gov
>>         <mailto:singu...@lbl.gov>.
>>
>>
>>
>>     -- 
>>     Ian Kaneshiro
>>     Software Engineer, Sylabs, Inc.
>>     www.sylabs.io <http://www.sylabs.io/>
>>     -- 
>>     You received this message because you are subscribed to the
>>     Google Groups "singularity" group.
>>     To unsubscribe from this group and stop receiving emails from it,
>>     send an email to singu...@lbl.gov
>>     <mailto:singu...@lbl.gov>.
>>
>>
>>
>> -- 
>> Vanessa Villamia Sochat
>> Stanford University '16
>> (603) 321-0676
>> -- 
>> You received this message because you are subscribed to the Google 
>> Groups "singularity" group.
>> To unsubscribe from this group and stop receiving emails from it, 
>> send an email to singu...@lbl.gov 
>> <mailto:singu...@lbl.gov>.
> -- 
> You received this message because you are subscribed to the Google 
> Groups "singularity" group.
> To unsubscribe from this group and stop receiving emails from it, send 
> an email to singu...@lbl.gov 
> <mailto:singu...@lbl.gov>.

--------------A68CD1956F688A6028A3FFD3
Content-Type: multipart/related;
 boundary="------------0D9188A38194845C3CA227AE"

--------------0D9188A38194845C3CA227AE
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: 8bit

<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  </head>
  <body text="#000000" bgcolor="#FFFFFF">
    <p>PS: Never mind, upon closer investigation, it is now possible to
      use docker build arguments in FROM statements, given certain
      restrictions. I have updated my recipes to use that feature.<br>
    </p>
    <div class="moz-cite-prefix">Le 13/03/2019 à 11:03, Hadrien Grasland
      a écrit :<br>
    </div>
    <blockquote type="cite"
      cite="mid:53507429-8a8a-76...@lal.in2p3.fr">
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
      <p>Hi all,</p>
      <p>Sorry for the reply delay, these weeks are a bit busy...</p>
      <p>I know the technique of selectively copying file from one
        container to another in order to shrink image size. Sadly, I
        currently cannot allocate enough time to my container-building
        experiments in order to go through the lengthy trial-and-error
        testing process that this level of size optimization requires.
        Which is why I am satisfied with what standard package manager
        cleanup and docker build --squash can give me.</p>
      <p>I think the closest equivalent of this compromise in the
        multistage setup that you are describing would be to copy
        everything ("/*") from the first stage to the second stage.
        Would the kind of multistage design that you envision allow for
        this?</p>
      <hr width="100%" size="2">
      <p>Also, bear in mind that size optimizations is not the only
        reason why I sometimes need a testing stage to be sandwiched
        inbetween a build stage and a cleanup stage. For example, take
        this development environment recipe :
        <a class="moz-txt-link-freetext"
href="https://github.com/HadrienG2/spack-based-docker/blob/master/gaudi/Dockerfile"
          moz-do-not-send="true">https://github.com/HadrienG2/spack-based-docker/blob/master/gaudi/Dockerfile</a>
        .</p>
      <p>To the untrained eyes, this recipe may seem unnecessarily
        complex, as it builds software only to discard the build after
        the fact. However, the goal is actually to get a working
        development environment for a piece of software (in this case
        the Gaudi HEP event processing framework). By building the
        software and running its unit tests, the Dockerfile implicitly
        assesses that given the currently selected set of dependencies,
        the software is buildable and passes its own internal testing.
        Furthermore, although the Gaudi build has been dropped, the
        complete set of dependencies remains installed in the target
        container, so the next Gaudi build will be quick (you only need
        to clone your git fork and do a spack diy ${GAUDI_SPACK_SPEC} in
        it).<br>
      </p>
      <p>If you bring it all together, this recipe gives you a container
        which is ready to use for the purpose of developing Gaudi, and
        which has been tested to work for this purpose on the latest
        Gaudi version available at the time where the container was
        built, all that without the unnecessary size burden of a Gaudi
        source tree and build which you'd immediately replace with one
        of your own Gaudi fork anyway.<br>
      </p>
      <p>I believe this use case would be served by multistage builds
        though. I only need to have a first stage that builds and tests
        Gaudi, and a second stage which drops the build to make a leaner
        image.</p>
      <hr width="100%" size="2">
      <p>Concerning my list of use cases for build arguments...<br>
      </p>
      <p>The use case of building both a debug and a release version of
        some software would not be served by a multi-stage setup,
        because we are talking about two different software build
        configurations here ("Debug" vs "RelWithDebInfo" or "Release" in
        CMake-speak) and there is no way to go from one to the other
        without rebuilding the software. See, for example, the
        ACTS_BUILD_TYPE build arg in
        <a class="moz-txt-link-freetext"
href="https://github.com/HadrienG2/spack-based-docker/blob/master/acts/Dockerfile"
          moz-do-not-send="true">https://github.com/HadrienG2/spack-based-docker/blob/master/acts/Dockerfile</a>
        .</p>
      <p>For an example of selecting a software version with Docker
        build args, see the ROOT_VERSION and ROOT_CXX_STANDARD build
        arguments in
        <a class="moz-txt-link-freetext"
href="https://github.com/HadrienG2/spack-based-docker/blob/master/root/Dockerfile"
          moz-do-not-send="true">https://github.com/HadrienG2/spack-based-docker/blob/master/root/Dockerfile</a>
        . These allow me to centrally control all software versions in
        the stack centrally at
        <a class="moz-txt-link-freetext"
href="https://github.com/HadrienG2/spack-based-docker/blob/master/rebuild-docker-spack.sh"
          moz-do-not-send="true">https://github.com/HadrienG2/spack-based-docker/blob/master/rebuild-docker-spack.sh</a>
        .<br>
      </p>
      <p>The third use case which I presented for build flags is
        something which, as far as I know, Docker actually cannot do
        either at the moment. I would like to be able to select from my
        build script which container I will bootstrap from, in order to
        avoid hardcoding my private repository name in my Dockerfiles
        and to be able to select which version of ROOT a Gaudi container
        (see above) is built from. This becomes more important in
        Singularity, where there is no repository and (AFAIK) I must
        hardcode an entire filesystem path in From, which is obviously
        less clean / more hostile to other people trying to reuse my
        definition files.<br>
      </p>
      <p>Cheers,<br>
        Hadrien<br>
      </p>
      <p><br>
      </p>
      <div class="moz-cite-prefix">Le 06/03/2019 à 17:00, v a écrit :<br>
      </div>
      <blockquote type="cite"
cite="mid:CAM=p...@mail.gmail.com">
        <meta http-equiv="content-type" content="text/html;
          charset=UTF-8">
        <div dir="ltr">
          <div dir="ltr">For a concrete example, we can look at Docker
            multistage builds. Take a look at the
            singularityware/singularity:3.1-slim container vs it's (not
            multistage build) counterpart:
            <div><br>
            </div>
            <div>
              <div><img src="cid:part5.53...@lal.in2p3.fr"
                  alt="image.png" class="" width="236" height="169"><br>
              </div>
            </div>
            <div><br>
            </div>
            <div>That's a huge difference! Both recipes (showing the
              multistage build, and without) are in the Dockerfile at
              their respective branches:</div>
            <div><a
href="https://github.com/singularityhub/singularity-docker/blob/3.1-slim/Dockerfile#L41"
                moz-do-not-send="true">https://github.com/singularityhub/singularity-docker/blob/3.1-slim/Dockerfile#L41</a><br>
            </div>
            <div><br>
            </div>
            <div>I have mixed feelings about these builds. On the one
              hand, the containers are a lot more portable. On the other
              hand, you lose all of the source code that the (ultimate)
              binary files are generated from, so you couldn't build
              again if needed. To account for this I just build both
              kinds, as they serve different use cases.</div>
            <div><br>
            </div>
          </div>
        </div>
        <br>
        <div class="gmail_quote">
          <div dir="ltr" class="gmail_attr">On Wed, Mar 6, 2019 at 10:50
            AM Ian Kaneshiro &lt;<a href="mailto:i...@sylabs.io"
              moz-do-not-send="true">i...@sylabs.io</a>&gt; wrote:<br>
          </div>
          <blockquote class="gmail_quote" style="margin:0px 0px 0px
            0.8ex;border-left:1px solid
            rgb(204,204,204);padding-left:1ex">
            <div dir="ltr">
              <div dir="ltr">
                <div>Morning Hadrien,</div>
                <div><br>
                </div>
                <div>The definition you proposed would be valid, but it
                  wouldn't have the behavior you're looking for.
                  Multiple %setup/%post/%test sections are concatenated
                  together and ran at the same time. The biggest
                  advantage of multistage builds is in the strive for
                  smaller container images, which I think is what you
                  want to accomplish by installing and removing software
                  in multiple steps. A potential definition would look
                  like this:</div>
                <div><br>
                </div>
                <div>Bootstrap: docker</div>
                <div>From: centos:7</div>
                <div>Stage: devel</div>
                <div><br>
                </div>
                <div><br>
                </div>
                <div>%setup</div>
                <div><span style="white-space:pre-wrap">	</span>mkdir -p
                  $SINGULARITY_ROOTFS/root/go/src/hello</div>
                <div><br>
                </div>
                <div><br>
                </div>
                <div>%files</div>
                <div><span style="white-space:pre-wrap">	</span>hello.go
                  /root/go/src/hello/hello.go</div>
                <div><br>
                </div>
                <div><br>
                </div>
                <div>%post</div>
                <div><span style="white-space:pre-wrap">	</span>yum
                  install wget -y</div>
                <div><br>
                </div>
                <div><span style="white-space:pre-wrap">	</span>wget <a
href="https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz"
                    target="_blank" moz-do-not-send="true">https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz</a></div>
                <div><span style="white-space:pre-wrap">	</span>tar -C
                  /usr/local -xzf go1.10.3.linux-amd64.tar.gz</div>
                <div><span style="white-space:pre-wrap">	</span>export
                  PATH=$PATH:/usr/local/go/bin</div>
                <div><br>
                </div>
                <div><span style="white-space:pre-wrap">	</span>cd
                  /root/go/src/hello</div>
                <div><span style="white-space:pre-wrap">	</span>go build</div>
                <div><span style="white-space:pre-wrap">	</span></div>
                <div><span style="white-space:pre-wrap">	</span>./hello</div>
                <div><br>
                </div>
                <div><br>
                </div>
                <div><br>
                </div>
                <div>Bootstrap: docker</div>
                <div>From: centos:7</div>
                <div><br>
                </div>
                <div><br>
                </div>
                <div>%files from devel</div>
                <div><span style="white-space:pre-wrap">	</span>/root/go/src/hello/hello
                  /bin/hello</div>
                <div><br>
                </div>
                <div>%runscript</div>
                <div><span style="white-space:pre-wrap">	</span>hello</div>
                <div><br>
                </div>
                <div>This will allow someone to install and build
                  software in one or more development containers and
                  move it to a final production container where those
                  build tools aren't installed. Using this method,
                  roughly follows the idea behind your proposed
                  definition but without the need to manually remove
                  such tools.</div>
                <div><br>
                </div>
                <div>Originally I was thinking of something like `%post
                  --base-env` or something to that extent. After giving
                  this more thought, I think this will be too confusing
                  because there is already precedent for using flags
                  with post to specify bash options, see <a
                    href="https://github.com/sylabs/singularity/issues/2656"
                    target="_blank" moz-do-not-send="true">https://github.com/sylabs/singularity/issues/2656</a>.
                  Another option would be insert an environment variable
                  in post like `SINGULARITY_ENVIRONMENT` called
                  something like `SINGULARITY_BASE_ENVIRONMENT` that a
                  user can easily source in %post with `source
                  $SINGULARITY_BASE_ENVIRONMENT` in order to get the
                  base containers environment.</div>
                <div><br>
                </div>
                <div>I think we can do something similar to preserve the
                  environment between %post and %test at build time,
                  though it's important to note that the test section
                  can be run directly from the CLI once the container is
                  built, so having behavior be dictated by the post
                  environment could cause problems when test is run
                  after the build if the script is dependent on those
                  variables.</div>
                <div><br>
                </div>
                <div>With respect to build flags, can you elaborate more
                  on the last two bullets? I'm not exactly sure what
                  behavior you're interested in having. I think
                  multistage builds will allow the first to be
                  addressed.</div>
                <div>
                  <ul>
                    <blockquote class="gmail_quote" style="margin:0px
                      0px 0px 0.8ex;border-left:1px solid
                      rgb(204,204,204);padding-left:1ex">
                      <ul>
                        <li style="margin-left:15px">A typical use case
                          is building an image twice, once with debug
                          software builds (for debugging) and once with
                          release builds (for end usage and profiling)</li>
                      </ul>
                      <ul>
                        <li style="margin-left:15px">Another use case is
                          controlling from remote which version of some
                          software gets built, and to synchronize that
                          with the output image's file name.</li>
                      </ul>
                      <ul>
                        <li style="margin-left:15px">A third use case is
                          synchronizing the directory where image files
                          are written across multiple Singularity
                          definition file, and making it externally
                          configurable.</li>
                      </ul>
                    </blockquote>
                  </ul>
                </div>
                <div>Best,</div>
                <div>Ian</div>
              </div>
            </div>
            <br>
            <div class="gmail_quote">
              <div dir="ltr" class="gmail_attr">On Tue, Mar 5, 2019 at
                12:26 PM David Godlove &lt;<a
                  href="mailto:davidg...@gmail.com" target="_blank"
                  moz-do-not-send="true">davidg...@gmail.com</a>&gt;
                wrote:<br>
              </div>
              <blockquote class="gmail_quote" style="margin:0px 0px 0px
                0.8ex;border-left:1px solid
                rgb(204,204,204);padding-left:1ex">
                <div dir="ltr">This is a really groovy thread.  It
                  reminds me why I love working on an open source
                  project.  </div>
                <br>
                <div class="gmail_quote">
                  <div dir="ltr" class="gmail_attr">On Tue, Mar 5, 2019
                    at 9:33 AM Hadrien Grasland &lt;<a
                      href="mailto:gras...@lal.in2p3.fr"
                      target="_blank" moz-do-not-send="true">gras...@lal.in2p3.fr</a>&gt;
                    wrote:<br>
                  </div>
                  <blockquote class="gmail_quote" style="margin:0px 0px
                    0px 0.8ex;border-left:1px solid
                    rgb(204,204,204);padding-left:1ex">
                    <div bgcolor="#FFFFFF">
                      <p>Dear Lars,</p>
                      <p>Thanks for your suggestion! Speaking
                        personally, I am a bit of an infrastructure
                        minimalist, so altough I like Singularity's
                        model, it would not be attractive enough to
                        motivate me of migrating from a two-layer
                        infrastructure (spack + docker) to a five-layer
                        infrastructure (spack + docker +
                        hpc-container-maker + docker2singularity +
                        singularity). However, I will keep these links
                        around for the benefit of colleagues of mine who
                        do not share my opinions on these matters :)</p>
                      <p>Hadrien</p>
                      <p><br>
                      </p>
                      <div
class="gmail-m_7767702017045402841gmail-m_-3152860234471032459gmail-m_7596858960167937554moz-cite-prefix">Le
                        05/03/2019 à 09:39, Lars Bilke a écrit :<br>
                      </div>
                      <blockquote type="cite">
                        <div dir="ltr">Dear Hadrien,
                          <div><br>
                          </div>
                          <div>I just want to draw your attention to the
                            project <a
                              href="https://github.com/NVIDIA/hpc-container-maker"
                              target="_blank" moz-do-not-send="true">hpc-container-maker</a> which
                            allows to script container definitions with
                            Python. It supports both Singularity and
                            Docker output but I found creating Docker
                            images with a subsequent conversion step to
                            Singularity (e.g. via <a
                              href="https://github.com/singularityware/docker2singularity"
                              target="_blank" moz-do-not-send="true">docker2singularity</a>)
                            most useful for development (by leveraging
                            Dockers layer caching). I think a lot of
                            your issues can be solved by simple
                            scripting the whole image definition
                            process.</div>
                          <div><br>
                          </div>
                          <div>Best,</div>
                          <div>Lars<br>
                            <br>
                            Am Montag, 4. März 2019 16:34:56 UTC+1
                            schrieb Hadrien Grasland:
                            <blockquote class="gmail_quote"
                              style="margin:0px 0px 0px
                              0.8ex;border-left:1px solid
                              rgb(204,204,204);padding-left:1ex">
                              <div bgcolor="#FFFFFF">
                                <p>Dear Singularity users,</p>
                                <p>I've been packaging HEP software and
                                  development environments using a
                                  combination of Spack and Docker for a
                                  while.</p>
                                <ul>
                                  <li>Spack gives me customizable and
                                    ergonomic software builds, with
                                    automated dependency management and
                                    peaceful coexistence between
                                    different build configurations.</li>
                                  <li>Docker gives me cross-OS binary +
                                    environment portability, and a way
                                    to "freeze" a snapshot of my rolling
                                    Linux distribution of choice in
                                    order to momentarily prevent Spack
                                    from rebuilding everything over and
                                    over again the way it loves to.</li>
                                </ul>
                                <p>This is what the end result currently
                                  looks like: <a
                                    href="https://github.com/HadrienG2/spack-based-docker"
                                    rel="nofollow" target="_blank"
                                    moz-do-not-send="true">https://github.com/HadrienG2/spack-based-docker</a>
                                  .</p>
                                <p>A problem with using Docker for this
                                  purpose, though, is that it does too
                                  much container/host isolation for my
                                  use case. I don't really care for
                                  Docker masquerading as a VM by hiding
                                  the host filesystem and processes from
                                  the container, but I do care about the
                                  cumbersome side of remembering to bind
                                  mount everything, ending up with
                                  root-owned files in these bind mounts
                                  if I'm not very careful, and ptrace
                                  rights being taken away from me unless
                                  I take care to pass the magical "I
                                  don't care, I trust this container"
                                  flags to the docker run command line.
                                  From this perspective, I sometimes
                                  feel like I'm fighting Docker's
                                  cloud-oriented design a bit too much.</p>
                                <p>Which is what led me to investigate
                                  Singularity, an experience which I now
                                  feel ready to report on.</p>
                                <hr width="100%" size="2">
                                <p>Having some previous bad experience
                                  from the Docker -&gt; Singularity
                                  image conversion machinery, I decided
                                  for this attempt to try to stick with
                                  a pure Singularity workflow, without
                                  Docker getting in the way at any time.
                                  This was easier than expected:
                                  bootstrapping a zypper-based image
                                  actually proved very smooth.<br>
                                </p>
                                <p>My feeling from translating my Docker
                                  recipes afterwards is that Singularity
                                  does deliver beautifully on the final
                                  image usability front (hurray for the
                                  simple CLI, ptrace privileges, proper
                                  file permissions, and /home mounting
                                  by default), but feels quite a bit
                                  more painful than Docker on the image
                                  builder's side. Here are some
                                  particular pain points that I
                                  encountered, maybe they have some
                                  well-known solutions / workarounds ?</p>
                                <ul>
                                  <li>I miss Docker's build arguments a
                                    lot.<br>
                                  </li>
                                  <ul>
                                    <li>A typical use case is building
                                      an image twice, once with debug
                                      software builds (for debugging)
                                      and once with release builds (for
                                      end usage and profiling)</li>
                                    <li>Another use case is controlling
                                      from remote which version of some
                                      software gets built, and to
                                      synchronize that with the output
                                      image's file name.</li>
                                    <li>A third use case is
                                      synchronizing the directory where
                                      image files are written across
                                      multiple Singularity definition
                                      file, and making it externally
                                      configurable.<br>
                                    </li>
                                  </ul>
                                  <li>I appreciate Singuarity's attempt
                                    to cautiously separate build
                                    environment from runtime
                                    environment, but find that it makes
                                    build environment management
                                    difficult:</li>
                                  <ul>
                                    <li>I often have to write each
                                      environment-altering statement
                                      three times, once in %post, once
                                      in %test, and once in
                                      ${SINGULARITY_ENVIRONMENT}</li>
                                    <li>Build environment not being
                                      carried over from one parent image
                                      to a child image often makes me
                                      give up and just write my whole
                                      build setup in
                                      ${SINGULARITY_ENVIRONMENT} so that
                                      I can source that at the beginning
                                      of the next image.</li>
                                    <li>%environment is almost never
                                      usable for me because most of the
                                      time I need some environment to be
                                      set both for runtime and for child
                                      images.<br>
                                    </li>
                                  </ul>
                                  <li>The idea of separating a build in
                                    clear-cut %build, %post, %test
                                    phases is nice in theory, but
                                    limiting for complex recipes</li>
                                  <ul>
                                    <li>The folder to which I want to
                                      copy files may be created during
                                      %post, in which case I need to
                                      move files to a temporary
                                      directory during %copy and re-move
                                      them later.</li>
                                    <li>Some tests can only be run at
                                      some stages during the build
                                      process, because they rely on a
                                      build folder which must be cleaned
                                      up at the end of the recipe.</li>
                                    <li>SINGULARITY_ENVIRONMENT not
                                      being sourced before %test is
                                      painful and uncalled for.<br>
                                    </li>
                                  </ul>
                                  <li>A replacement to Docker layers for
                                    build snapshots would be much
                                    appreciated.</li>
                                  <ul>
                                    <li>I certainly don't miss the build
                                      performance/size vs recipe
                                      readability compromise of Docker
                                      saving a layer after every RUN
                                      statement...</li>
                                    <li>...but I do miss being able to
                                      quickly investigate a failed build
                                      and restart it without going
                                      through my whole %post section all
                                      over again.</li>
                                  </ul>
                                </ul>
                                <p>In short, I would be longing for....</p>
                                <ul>
                                  <li>A way to use some externally
                                    configurable environment in a
                                    singularity definition file
                                    (including, and I guess that's the
                                    difficult part, in the "From:"
                                    statement)</li>
                                  <li>An alternative to
                                    SINGULARITY_ENVIRONMENT for
                                    configuring build environment
                                    instead of runtime environment</li>
                                  <li>A less hacky way to pass
                                    environment to childe images' build
                                    recipes (may or may not be merged
                                    with the above)<br>
                                  </li>
                                  <li>A way to check if tests are
                                    enabled in %post as a more flexible
                                    alternative to the %test section</li>
                                  <ul>
                                    <li>...and runtime environment being
                                      sourced before the %test section
                                      begins.</li>
                                  </ul>
                                  <li>Faster / easier ways to debug
                                    failed Singularity builds than
                                    modifying the recipe and restarting
                                    it from the beginning.</li>
                                </ul>
                                <p>...but some of that may be an XY
                                  problem coming from my Docker user
                                  habits :)<br>
                                </p>
                                <p>Cheers,<br>
                                  Hadrien<br>
                                </p>
                              </div>
                            </blockquote>
                          </div>
                        </div>
                        -- <br>
                        You received this message because you are
                        subscribed to the Google Groups "singularity"
                        group.<br>
                        To unsubscribe from this group and stop
                        receiving emails from it, send an email to <a
                          href="mailto:singu...@lbl.gov"
                          target="_blank" moz-do-not-send="true">singu...@lbl.gov</a>.<br>
                      </blockquote>
                    </div>
                    -- <br>
                    You received this message because you are subscribed
                    to the Google Groups "singularity" group.<br>
                    To unsubscribe from this group and stop receiving
                    emails from it, send an email to <a
                      href="mailto:singu...@lbl.gov"
                      target="_blank" moz-do-not-send="true">singu...@lbl.gov</a>.<br>
                  </blockquote>
                </div>
                -- <br>
                You received this message because you are subscribed to
                the Google Groups "singularity" group.<br>
                To unsubscribe from this group and stop receiving emails
                from it, send an email to <a
                  href="mailto:singu...@lbl.gov"
                  target="_blank" moz-do-not-send="true">singu...@lbl.gov</a>.<br>
              </blockquote>
            </div>
            <br clear="all">
            <div><br>
            </div>
            -- <br>
            <div dir="ltr"
              class="gmail-m_7767702017045402841gmail_signature">
              <div dir="ltr">
                <div>
                  <div dir="ltr">
                    <div style="color:rgb(80,0,80);font-size:12.8px">
                      <div>
                        <div dir="ltr">
                          <div dir="ltr">
                            <div dir="ltr">
                              <div
                                style="color:rgb(34,34,34);font-size:12.8px">Ian
                                Kaneshiro</div>
                              <div
                                style="color:rgb(34,34,34);font-size:12.8px">Software
                                Engineer, Sylabs, Inc.</div>
                              <div
                                style="color:rgb(34,34,34);font-size:12.8px"><a
                                  href="http://www.sylabs.io/"
                                  style="color:rgb(17,85,204)"
                                  target="_blank" moz-do-not-send="true">www.sylabs.io</a></div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            -- <br>
            You received this message because you are subscribed to the
            Google Groups "singularity" group.<br>
            To unsubscribe from this group and stop receiving emails
            from it, send an email to <a
              href="mailto:singu...@lbl.gov"
              target="_blank" moz-do-not-send="true">singu...@lbl.gov</a>.<br>
          </blockquote>
        </div>
        <br clear="all">
        <div><br>
        </div>
        -- <br>
        <div dir="ltr" class="gmail_signature">Vanessa Villamia Sochat<br>
          Stanford University '16<br>
          <div>
            <div>
              <div>(603) 321-0676</div>
            </div>
          </div>
        </div>
        -- <br>
        You received this message because you are subscribed to the
        Google Groups "singularity" group.<br>
        To unsubscribe from this group and stop receiving emails from
        it, send an email to <a
          href="mailto:singu...@lbl.gov"
          moz-do-not-send="true">singu...@lbl.gov</a>.<br>
      </blockquote>
      -- <br>
      You received this message because you are subscribed to the Google
      Groups "singularity" group.<br>
      To unsubscribe from this group and stop receiving emails from it,
      send an email to <a href="mailto:singu...@lbl.gov"
        moz-do-not-send="true">singu...@lbl.gov</a>.<br>
    </blockquote>
  </body>
</html>

--------------0D9188A38194845C3CA227AE
Content-Type: image/png;
 name="image.png"
Content-Transfer-Encoding: base64
Content-ID: <part5.53DB2FE0.3190D3BA@lal.in2p3.fr>
Content-Disposition: inline;
 filename="image.png"

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
--------------0D9188A38194845C3CA227AE--

--------------A68CD1956F688A6028A3FFD3--
