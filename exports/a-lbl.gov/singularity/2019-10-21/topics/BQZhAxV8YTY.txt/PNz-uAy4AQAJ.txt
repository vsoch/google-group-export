X-Received: by 2002:a65:63d5:: with SMTP id n21mr1094337pgv.97.1551806740413;
        Tue, 05 Mar 2019 09:25:40 -0800 (PST)
X-BeenThere: singularity@lbl.gov
Received: by 2002:a62:4554:: with SMTP id s81ls8678606pfa.3.gmail; Tue, 05 Mar
 2019 09:25:39 -0800 (PST)
X-Received: by 2002:a65:5305:: with SMTP id m5mr2331504pgq.249.1551806739246;
        Tue, 05 Mar 2019 09:25:39 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1551806739; cv=none;
        d=google.com; s=arc-20160816;
        b=opdrWV9s4Dr7EfC1xS0uJ52pTV/VPlMA6nFechoKC1h5BaDFRfnBq0DvG+wjzyL0OF
         LoqTmEH8bBoiGVWpzFDIYPVdAZakA6W+fKmGVgB+DW4ktk8ytfXOjR00CsUOkGE6997V
         R27EX5PJNgis6pJx75NCJ46QsnzF53Nt3z+PVKXa8RZdlaxN3DdYcBFUvgXtS7Z1rgze
         g90qjkCiksI9TRQIrdovHbXpLM6jti0h9XRRftMOQCJGywyDQUUT1afLx0PRKifCw0FI
         V0oSoCKCy7Bkns8gJxyOjfLT3nqkA8sngY92ixVPY0OUef+jh0xcuEusowJi2u2UoOby
         06DA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=to:subject:message-id:date:from:in-reply-to:references:mime-version
         :dkim-signature;
        bh=p0r+QLB7bft0ow/pboMy7biYbJTGnaNq86Q40/w2y7k=;
        b=geXltJXdYVa9HihpwsQ/GlmhRlzui2FR0udSYzgL64THraGnPhwhswps+HZ5fyetLj
         ixSoUMbZa/DLyR4vO7mZ5fW/+BIMomlFppMnr8rjdS2q+XmI5/B//43GwwLM79prw/aP
         WKJLHwgTX4QlAMX0XX1bPfq/Esfjre41dnZ5/oeeN8hsXJqRG3ONzSPn9N8XlMBSJs0l
         IxWcu8CjSK1yYS+LXgCXC2h/avDA++gCs0ZZqGAZEebVNoKnwf3R6H+PQuGSjvqATN0p
         Ork7WYhat4idsr54vaLdWbv8KAb1VUHuQZm+qZ8MOfFviT5b9yF+x1YkIfPbgTZ9Un6u
         fixw==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass head...@gmail.com header.s=20161025 header.b=KL1ELj2J;
       spf=pass (google.com: domain of davidg...@gmail.com designates 209.85.166.178 as permitted sender) smtp.mailfrom=davidg...@gmail.com
Return-Path: <davidg...@gmail.com>
Received: from fe4.lbl.gov (fe4.lbl.gov. [131.243.228.53])
        by mx.google.com with ESMTP id k30si8618467pgi.146.2019.03.05.09.25.39
        for <singu...@lbl.gov>;
        Tue, 05 Mar 2019 09:25:39 -0800 (PST)
Received-SPF: pass (google.com: domain of davidg...@gmail.com designates 209.85.166.178 as permitted sender) client-ip=209.85.166.178;
Authentication-Results: mx.google.com;
       dkim=pass head...@gmail.com header.s=20161025 header.b=KL1ELj2J;
       spf=pass (google.com: domain of davidg...@gmail.com designates 209.85.166.178 as permitted sender) smtp.mailfrom=davidg...@gmail.com
X-Ironport-SBRS: 2.7
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A2E4AgCTsH5cf7KmVdFkg32BElAzJ4QBB?=
 =?us-ascii?q?4Edgl6PaYINijCHfoYHgSs8JQEKC4FJgnUChC0iOBIBAQMBAQMBAwIBAQIQAQE?=
 =?us-ascii?q?JCwsIJyUMgjoFAgMfBwoETTswAQEBAQEBAQEBAQEBAQEBGgINIEMBAQEDASMEG?=
 =?us-ascii?q?QENDgsNBgMBCwYFCwotAgIiAQ4DAQUBHAYIBwQBGgIEgwImAYE1AQMNCAUKnx8?=
 =?us-ascii?q?8ix18FgUBFx+CWgWBRUGCOQoZJw1fgTcCAQUSgR2LKBeBQD+DbjWDHgKBKQQBA?=
 =?us-ascii?q?RIBTIJdgjUiAoc3glMKhlKBB1yRPgmCQIUDg3iDOoN/GZMnkEGMYjCBPVcwcTM?=
 =?us-ascii?q?aI4EBgjuDLQEJgkGKciMwEI44DxcELIF3AQE?=
X-IronPort-AV: E=Sophos;i="5.58,444,1544515200"; 
   d="scan'208,217";a="53724552"
Received: from mail-it1-f178.google.com ([209.85.166.178])
  by fe4.lbl.gov with ESMTP; 05 Mar 2019 09:25:26 -0800
Received: by mail-it1-f178.google.com with SMTP id e24so5269588itl.1
        for <singu...@lbl.gov>; Tue, 05 Mar 2019 09:25:26 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to;
        bh=p0r+QLB7bft0ow/pboMy7biYbJTGnaNq86Q40/w2y7k=;
        b=KL1ELj2JOiCSlkjeAUYZDmIHsQY34CFLHi/Ru9wxZgP8kKQVE2Chqx6W5E9k70kp8S
         MlJL6VYTTjZEmdL+38/J9/e1jrD/tjjJEt7a/f3avCBIfJ0mtWgCldD+9B1Ks1LfSnCF
         1M0WCiCiPHixiFm+fmEkIp2XX/sApnNXNtdZjt3yFipRS7k9mDQrIgRM3ilbtSrHBJNA
         On31GDRJb5A+hBcUhz93cDxrkzm2XHHDO82buo7LEp2jx/uYMz2CXCE5V3IYAOgbGNK1
         E8ZPmIadkR7WhlGNyqp9Crvr5Z4WewimGGWBHsps6Etb9UyCwfIhRn0hNuSn+FeQKfW5
         8cLQ==
X-Gm-Message-State: APjAAAWEwOBdwCVeBHWo4D0wP7Lgfsh/Q38m0LdPGXVUFWCM6gxf9vvH
	enC11t8nmRD83KpigErZgpZFN9RyGH6yrI2b0INXew==
X-Received: by 2002:a02:cd8f:: with SMTP id l15mr1577674jap.4.1551806725845;
 Tue, 05 Mar 2019 09:25:25 -0800 (PST)
MIME-Version: 1.0
References: <7bb2ddd5-0de0-5bbd-0fa2-d60c36966e57@lal.in2p3.fr>
 <252104d3-a407-45cd-a305-927355fb7492@lbl.gov> <edb27021-149e-00a0-f062-c2b8f2d64ede@lal.in2p3.fr>
In-Reply-To: <edb27021-149e-00a0-f062-c2b8f2d64ede@lal.in2p3.fr>
From: David Godlove <davidg...@gmail.com>
Date: Tue, 5 Mar 2019 11:24:48 -0600
Message-ID: <CAN9aCedDzOTKHjBGNZppa0vm2hUj3xrFKTbab1pjThr+UdkhMA@mail.gmail.com>
Subject: Re: [Singularity] Re: Thoughts from a Docker -> Singularity
 conversion attempt
To: singularity <singu...@lbl.gov>
Content-Type: multipart/alternative; boundary="000000000000a7765105835c2864"

--000000000000a7765105835c2864
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

This is a really groovy thread.  It reminds me why I love working on an
open source project.

On Tue, Mar 5, 2019 at 9:33 AM Hadrien Grasland <gras...@lal.in2p3.fr>
wrote:

> Dear Lars,
>
> Thanks for your suggestion! Speaking personally, I am a bit of an
> infrastructure minimalist, so altough I like Singularity's model, it woul=
d
> not be attractive enough to motivate me of migrating from a two-layer
> infrastructure (spack + docker) to a five-layer infrastructure (spack +
> docker + hpc-container-maker + docker2singularity + singularity). However=
,
> I will keep these links around for the benefit of colleagues of mine who =
do
> not share my opinions on these matters :)
>
> Hadrien
>
>
> Le 05/03/2019 =C3=A0 09:39, Lars Bilke a =C3=A9crit :
>
> Dear Hadrien,
>
> I just want to draw your attention to the project hpc-container-maker
> <https://github.com/NVIDIA/hpc-container-maker> which allows to script
> container definitions with Python. It supports both Singularity and Docke=
r
> output but I found creating Docker images with a subsequent conversion st=
ep
> to Singularity (e.g. via docker2singularity
> <https://github.com/singularityware/docker2singularity>) most useful for
> development (by leveraging Dockers layer caching). I think a lot of your
> issues can be solved by simple scripting the whole image definition proce=
ss.
>
> Best,
> Lars
>
> Am Montag, 4. M=C3=A4rz 2019 16:34:56 UTC+1 schrieb Hadrien Grasland:
>>
>> Dear Singularity users,
>>
>> I've been packaging HEP software and development environments using a
>> combination of Spack and Docker for a while.
>>
>>    - Spack gives me customizable and ergonomic software builds, with
>>    automated dependency management and peaceful coexistence between diff=
erent
>>    build configurations.
>>    - Docker gives me cross-OS binary + environment portability, and a
>>    way to "freeze" a snapshot of my rolling Linux distribution of choice=
 in
>>    order to momentarily prevent Spack from rebuilding everything over an=
d over
>>    again the way it loves to.
>>
>> This is what the end result currently looks like:
>> https://github.com/HadrienG2/spack-based-docker .
>>
>> A problem with using Docker for this purpose, though, is that it does to=
o
>> much container/host isolation for my use case. I don't really care for
>> Docker masquerading as a VM by hiding the host filesystem and processes
>> from the container, but I do care about the cumbersome side of rememberi=
ng
>> to bind mount everything, ending up with root-owned files in these bind
>> mounts if I'm not very careful, and ptrace rights being taken away from =
me
>> unless I take care to pass the magical "I don't care, I trust this
>> container" flags to the docker run command line. From this perspective, =
I
>> sometimes feel like I'm fighting Docker's cloud-oriented design a bit to=
o
>> much.
>>
>> Which is what led me to investigate Singularity, an experience which I
>> now feel ready to report on.
>> ------------------------------
>>
>> Having some previous bad experience from the Docker -> Singularity image
>> conversion machinery, I decided for this attempt to try to stick with a
>> pure Singularity workflow, without Docker getting in the way at any time=
.
>> This was easier than expected: bootstrapping a zypper-based image actual=
ly
>> proved very smooth.
>>
>> My feeling from translating my Docker recipes afterwards is that
>> Singularity does deliver beautifully on the final image usability front
>> (hurray for the simple CLI, ptrace privileges, proper file permissions, =
and
>> /home mounting by default), but feels quite a bit more painful than Dock=
er
>> on the image builder's side. Here are some particular pain points that I
>> encountered, maybe they have some well-known solutions / workarounds ?
>>
>>    - I miss Docker's build arguments a lot.
>>    - A typical use case is building an image twice, once with debug
>>       software builds (for debugging) and once with release builds (for =
end usage
>>       and profiling)
>>       - Another use case is controlling from remote which version of
>>       some software gets built, and to synchronize that with the output =
image's
>>       file name.
>>       - A third use case is synchronizing the directory where image
>>       files are written across multiple Singularity definition file, and=
 making
>>       it externally configurable.
>>       - I appreciate Singuarity's attempt to cautiously separate build
>>    environment from runtime environment, but find that it makes build
>>    environment management difficult:
>>       - I often have to write each environment-altering statement three
>>       times, once in %post, once in %test, and once in ${SINGULARITY_ENV=
IRONMENT}
>>       - Build environment not being carried over from one parent image
>>       to a child image often makes me give up and just write my whole bu=
ild setup
>>       in ${SINGULARITY_ENVIRONMENT} so that I can source that at the beg=
inning of
>>       the next image.
>>       - %environment is almost never usable for me because most of the
>>       time I need some environment to be set both for runtime and for ch=
ild
>>       images.
>>       - The idea of separating a build in clear-cut %build, %post, %test
>>    phases is nice in theory, but limiting for complex recipes
>>       - The folder to which I want to copy files may be created during
>>       %post, in which case I need to move files to a temporary directory=
 during
>>       %copy and re-move them later.
>>       - Some tests can only be run at some stages during the build
>>       process, because they rely on a build folder which must be cleaned=
 up at
>>       the end of the recipe.
>>       - SINGULARITY_ENVIRONMENT not being sourced before %test is
>>       painful and uncalled for.
>>       - A replacement to Docker layers for build snapshots would be much
>>    appreciated.
>>       - I certainly don't miss the build performance/size vs recipe
>>       readability compromise of Docker saving a layer after every RUN st=
atement...
>>       - ...but I do miss being able to quickly investigate a failed
>>       build and restart it without going through my whole %post section =
all over
>>       again.
>>
>> In short, I would be longing for....
>>
>>    - A way to use some externally configurable environment in a
>>    singularity definition file (including, and I guess that's the diffic=
ult
>>    part, in the "From:" statement)
>>    - An alternative to SINGULARITY_ENVIRONMENT for configuring build
>>    environment instead of runtime environment
>>    - A less hacky way to pass environment to childe images' build
>>    recipes (may or may not be merged with the above)
>>    - A way to check if tests are enabled in %post as a more flexible
>>    alternative to the %test section
>>       - ...and runtime environment being sourced before the %test
>>       section begins.
>>    - Faster / easier ways to debug failed Singularity builds than
>>    modifying the recipe and restarting it from the beginning.
>>
>> ...but some of that may be an XY problem coming from my Docker user
>> habits :)
>>
>> Cheers,
>> Hadrien
>>
> --
> You received this message because you are subscribed to the Google Groups
> "singularity" group.
> To unsubscribe from this group and stop receiving emails from it, send an
> email to singu...@lbl.gov.
>
> --
> You received this message because you are subscribed to the Google Groups
> "singularity" group.
> To unsubscribe from this group and stop receiving emails from it, send an
> email to singu...@lbl.gov.
>

--000000000000a7765105835c2864
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">This is a really groovy thread.=C2=A0 It reminds me why I =
love working on an open source project.=C2=A0=C2=A0</div><br><div class=3D"=
gmail_quote"><div dir=3D"ltr" class=3D"gmail_attr">On Tue, Mar 5, 2019 at 9=
:33 AM Hadrien Grasland &lt;<a href=3D"mailto:gras...@lal.in2p3.fr">gras...=
@lal.in2p3.fr</a>&gt; wrote:<br></div><blockquote class=3D"gmail_quote" sty=
le=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);paddi=
ng-left:1ex">
 =20
   =20
 =20
  <div bgcolor=3D"#FFFFFF">
    <p>Dear Lars,</p>
    <p>Thanks for your suggestion! Speaking personally, I am a bit of an
      infrastructure minimalist, so altough I like Singularity&#39;s model,
      it would not be attractive enough to motivate me of migrating from
      a two-layer infrastructure (spack + docker) to a five-layer
      infrastructure (spack + docker + hpc-container-maker +
      docker2singularity + singularity). However, I will keep these
      links around for the benefit of colleagues of mine who do not
      share my opinions on these matters :)</p>
    <p>Hadrien</p>
    <p><br>
    </p>
    <div class=3D"gmail-m_7596858960167937554moz-cite-prefix">Le 05/03/2019=
 =C3=A0 09:39, Lars Bilke a
      =C3=A9crit=C2=A0:<br>
    </div>
    <blockquote type=3D"cite">
     =20
      <div dir=3D"ltr">Dear Hadrien,
        <div><br>
        </div>
        <div>I just want to draw your attention to the project <a href=3D"h=
ttps://github.com/NVIDIA/hpc-container-maker" target=3D"_blank">hpc-contain=
er-maker</a>=C2=A0which allows
          to script container definitions with Python. It supports both
          Singularity and Docker output but I found creating Docker
          images with a subsequent conversion step to Singularity (e.g.
          via <a href=3D"https://github.com/singularityware/docker2singular=
ity" target=3D"_blank">docker2singularity</a>) most useful
          for development (by leveraging Dockers layer caching). I think
          a lot of your issues can be solved by simple scripting the
          whole image definition process.</div>
        <div><br>
        </div>
        <div>Best,</div>
        <div>Lars<br>
          <br>
          Am Montag, 4. M=C3=A4rz 2019 16:34:56 UTC+1 schrieb Hadrien
          Grasland:
          <blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8=
ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">
            <div bgcolor=3D"#FFFFFF">
              <p>Dear Singularity users,</p>
              <p>I&#39;ve been packaging HEP software and development
                environments using a combination of Spack and Docker for
                a while.</p>
              <ul>
                <li>Spack gives me customizable and ergonomic software
                  builds, with automated dependency management and
                  peaceful coexistence between different build
                  configurations.</li>
                <li>Docker gives me cross-OS binary + environment
                  portability, and a way to &quot;freeze&quot; a snapshot o=
f my
                  rolling Linux distribution of choice in order to
                  momentarily prevent Spack from rebuilding everything
                  over and over again the way it loves to.</li>
              </ul>
              <p>This is what the end result currently looks like: <a href=
=3D"https://github.com/HadrienG2/spack-based-docker" rel=3D"nofollow" targe=
t=3D"_blank">https://github.com/HadrienG2/spack-based-docker</a>
                .</p>
              <p>A problem with using Docker for this purpose, though,
                is that it does too much container/host isolation for my
                use case. I don&#39;t really care for Docker masquerading a=
s
                a VM by hiding the host filesystem and processes from
                the container, but I do care about the cumbersome side
                of remembering to bind mount everything, ending up with
                root-owned files in these bind mounts if I&#39;m not very
                careful, and ptrace rights being taken away from me
                unless I take care to pass the magical &quot;I don&#39;t ca=
re, I
                trust this container&quot; flags to the docker run command
                line. From this perspective, I sometimes feel like I&#39;m
                fighting Docker&#39;s cloud-oriented design a bit too much.=
</p>
              <p>Which is what led me to investigate Singularity, an
                experience which I now feel ready to report on.</p>
              <hr width=3D"100%" size=3D"2">
              <p>Having some previous bad experience from the Docker
                -&gt; Singularity image conversion machinery, I decided
                for this attempt to try to stick with a pure Singularity
                workflow, without Docker getting in the way at any time.
                This was easier than expected: bootstrapping a
                zypper-based image actually proved very smooth.<br>
              </p>
              <p>My feeling from translating my Docker recipes
                afterwards is that Singularity does deliver beautifully
                on the final image usability front (hurray for the
                simple CLI, ptrace privileges, proper file permissions,
                and /home mounting by default), but feels quite a bit
                more painful than Docker on the image builder&#39;s side.
                Here are some particular pain points that I encountered,
                maybe they have some well-known solutions / workarounds
                ?</p>
              <ul>
                <li>I miss Docker&#39;s build arguments a lot.<br>
                </li>
                <ul>
                  <li>A typical use case is building an image twice,
                    once with debug software builds (for debugging) and
                    once with release builds (for end usage and
                    profiling)</li>
                  <li>Another use case is controlling from remote which
                    version of some software gets built, and to
                    synchronize that with the output image&#39;s file name.=
</li>
                  <li>A third use case is synchronizing the directory
                    where image files are written across multiple
                    Singularity definition file, and making it
                    externally configurable.<br>
                  </li>
                </ul>
                <li>I appreciate Singuarity&#39;s attempt to cautiously
                  separate build environment from runtime environment,
                  but find that it makes build environment management
                  difficult:</li>
                <ul>
                  <li>I often have to write each environment-altering
                    statement three times, once in %post, once in %test,
                    and once in ${SINGULARITY_ENVIRONMENT}</li>
                  <li>Build environment not being carried over from one
                    parent image to a child image often makes me give up
                    and just write my whole build setup in
                    ${SINGULARITY_ENVIRONMENT} so that I can source that
                    at the beginning of the next image.</li>
                  <li>%environment is almost never usable for me because
                    most of the time I need some environment to be set
                    both for runtime and for child images.<br>
                  </li>
                </ul>
                <li>The idea of separating a build in clear-cut %build,
                  %post, %test phases is nice in theory, but limiting
                  for complex recipes</li>
                <ul>
                  <li>The folder to which I want to copy files may be
                    created during %post, in which case I need to move
                    files to a temporary directory during %copy and
                    re-move them later.</li>
                  <li>Some tests can only be run at some stages during
                    the build process, because they rely on a build
                    folder which must be cleaned up at the end of the
                    recipe.</li>
                  <li>SINGULARITY_ENVIRONMENT not being sourced before
                    %test is painful and uncalled for.<br>
                  </li>
                </ul>
                <li>A replacement to Docker layers for build snapshots
                  would be much appreciated.</li>
                <ul>
                  <li>I certainly don&#39;t miss the build performance/size
                    vs recipe readability compromise of Docker saving a
                    layer after every RUN statement...</li>
                  <li>...but I do miss being able to quickly investigate
                    a failed build and restart it without going through
                    my whole %post section all over again.</li>
                </ul>
              </ul>
              <p>In short, I would be longing for....</p>
              <ul>
                <li>A way to use some externally configurable
                  environment in a singularity definition file
                  (including, and I guess that&#39;s the difficult part, in
                  the &quot;From:&quot; statement)</li>
                <li>An alternative to SINGULARITY_ENVIRONMENT for
                  configuring build environment instead of runtime
                  environment</li>
                <li>A less hacky way to pass environment to childe
                  images&#39; build recipes (may or may not be merged with
                  the above)<br>
                </li>
                <li>A way to check if tests are enabled in %post as a
                  more flexible alternative to the %test section</li>
                <ul>
                  <li>...and runtime environment being sourced before
                    the %test section begins.</li>
                </ul>
                <li>Faster / easier ways to debug failed Singularity
                  builds than modifying the recipe and restarting it
                  from the beginning.</li>
              </ul>
              <p>...but some of that may be an XY problem coming from my
                Docker user habits :)<br>
              </p>
              <p>Cheers,<br>
                Hadrien<br>
              </p>
            </div>
          </blockquote>
        </div>
      </div>
      -- <br>
      You received this message because you are subscribed to the Google
      Groups &quot;singularity&quot; group.<br>
      To unsubscribe from this group and stop receiving emails from it,
      send an email to <a href=3D"mailto:singu...@lbl.gov" target=3D"_blank=
">singu...@lbl.gov</a>.<br>
    </blockquote>
  </div>


<p></p>

-- <br>
You received this message because you are subscribed to the Google Groups &=
quot;singularity&quot; group.<br>
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to <a href=3D"mailto:singu...@lbl.gov" target=3D"_blank">singu...@lbl.=
gov</a>.<br>
</blockquote></div>

--000000000000a7765105835c2864--
