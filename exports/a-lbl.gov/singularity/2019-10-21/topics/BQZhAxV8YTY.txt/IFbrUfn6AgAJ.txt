X-Received: by 2002:a62:1c8d:: with SMTP id c135mr27289054pfc.255.1553560873024;
        Mon, 25 Mar 2019 17:41:13 -0700 (PDT)
X-BeenThere: singularity@lbl.gov
Received: by 2002:a63:246:: with SMTP id 67ls6914508pgc.11.gmail; Mon, 25 Mar
 2019 17:41:11 -0700 (PDT)
X-Received: by 2002:a62:1701:: with SMTP id 1mr19333425pfx.120.1553560870910;
        Mon, 25 Mar 2019 17:41:10 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1553560870; cv=none;
        d=google.com; s=arc-20160816;
        b=Pho0uT6NjLU4d3fOMQ8PuHCvICbFVxJnJct4iShLwhQ6Q3FF8/LNKP/VvcsUxCypQF
         7qBr9EaQEp6Lfn6EYEWlY3DyLezT4oWVCVpnXOgcJdWNl/G7/AeUCJXF5zH9IYdLcicP
         S1KbQzGw974c5RJxed07YNbUqFuRCDUw73hAtUeXhJu6r/g94tToeScKQRenoH9yTqvd
         FZmA2X+ifAZLuXd3DjiBW849f+On1G4OZlG6cGplAQHZ8GoVi9FwdVn1RhN95aENpKKS
         BRDJyEblAtqwRn/qjNrtW07WoIFgmXvPONyeaBR6LaoxnmSRzT1OSw5vCqgknQCHL9Lr
         6p6g==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=to:subject:message-id:date:from:in-reply-to:references:mime-version
         :dkim-signature;
        bh=o8GRhooU9sOShg7ePS1DYahe6fm9diWCpcyeRj9/Q9M=;
        b=dgqMmRgKdnH/cfB/rJFopNWoRMHMNa/dNUdmLnfPUDQxyd4VKc/kBexHGGUQVEDEN+
         UwaN0QzxqAxxfktSDhMeAyJRTix3sI1xKo32GjzIfhQ+Ulgm7Z1JsWwK8HTsGuTyEe4n
         fNo+iXcjflebvfi5GTQmowrtvU4pDe+AUvdMTKmhNl7gZChXwMgsNr8sZWoTI/GdK5Df
         Ay+/IIouImbPQ7taX//LQcw7UPLzzeWoXsq5vxho9IKfZuKISPEsNdiD/c6EzrUOful5
         W3+KXn+i6qDIp9wVRGlLzF7sjE450hDDTOHPfeHIJopqu/M+f4rDZw9tSQBadBuWhZHX
         Zqlw==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass head...@sylabs.io header.s=google header.b="M9nRni1/";
       spf=pass (google.com: domain of i...@sylabs.io designates 209.85.221.65 as permitted sender) smtp.mailfrom=i...@sylabs.io
Return-Path: <i...@sylabs.io>
Received: from fe3.lbl.gov (fe3.lbl.gov. [131.243.228.52])
        by mx.google.com with ESMTP id h11si16281001plb.38.2019.03.25.17.41.10
        for <singu...@lbl.gov>;
        Mon, 25 Mar 2019 17:41:10 -0700 (PDT)
Received-SPF: pass (google.com: domain of i...@sylabs.io designates 209.85.221.65 as permitted sender) client-ip=209.85.221.65;
Authentication-Results: mx.google.com;
       dkim=pass head...@sylabs.io header.s=google header.b="M9nRni1/";
       spf=pass (google.com: domain of i...@sylabs.io designates 209.85.221.65 as permitted sender) smtp.mailfrom=i...@sylabs.io
X-Ironport-SBRS: -1.2
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A2EGBACkdJlcWEHdVdFhAxwBAQEEAQEHB?=
 =?us-ascii?q?AEBgWWBD1gqJUOBAyeEBwdwLRmCFJIBfog5jxeBEAMYFyEECgEcAQwJgUmCL0Y?=
 =?us-ascii?q?ChRMiOBIBAQMBAQkBAwIBAQIDARcMCgYdDCUMgjoFAgMfBwoETTsvAQEBAQEBA?=
 =?us-ascii?q?QEBAQEBAQEBARoCCAU+CwEBGAEBAQECAQUVAQgCAgcSAQEHBRkNBgQLCwsKAwU?=
 =?us-ascii?q?BAQEBDAsBCQICAgUQAQkBBAsDAQUBCBQOBwMBAQUVAgSCNkwmAYE2Aw0IBQqiV?=
 =?us-ascii?q?TyKLHF8Mx+CWQEBBXQ9ARNBgwENghAHCBKBHYRdhlUXgX+BEYIUSTU+ghpHAgK?=
 =?us-ascii?q?BGg0EAQESATYKDBIIgkOCNSKHVoJFGgoJhmiBaIVAhD+Gcy8qNgmCS4QlASlJg?=
 =?us-ascii?q?0lBg0tCgz8Zk36QDYEUgTqIIoNiMIFDVzBxTSwMOzEGgjUJggGBIwECBgGCQYJ?=
 =?us-ascii?q?kiAsmMAEBAQEMjU4PFwQsgXcBAQ?=
X-IronPort-AV: E=Sophos;i="5.60,270,1549958400"; 
   d="png'150?scan'150,208,217,150";a="148566771"
Received: from mail-wr1-f65.google.com ([209.85.221.65])
  by fe3.lbl.gov with ESMTP; 25 Mar 2019 17:41:06 -0700
Received: by mail-wr1-f65.google.com with SMTP id t5so12243012wri.7
        for <singu...@lbl.gov>; Mon, 25 Mar 2019 17:41:06 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=sylabs.io; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to;
        bh=o8GRhooU9sOShg7ePS1DYahe6fm9diWCpcyeRj9/Q9M=;
        b=M9nRni1/bzv9BMDKA5BGlcwOdOp0AzmVGAwGzT2nq5uLkFrYyQyO/NKIlk5DV4ognm
         cyUpeNRz9oRObtInpLi8AfOPiHcjkkNC+L2DSNhBL0UZjx7e1lBwr4QEBL5dJ7g7h8h9
         A5o4ZtqrCyHG6smLGoCGWkSnTJp+VL2QDu1ZQO8tacTLRxIvDEjFxtmQZEUBYhUOB4pO
         kwvbiuWCmipTCeSlkpjoi3rPbZ8rmaU8cWsM7p7noJg7FCz4PafCjViD0rYhVOXebf7v
         0DEVzUQDwA9bEYEgC4HRc5xisCanHYoTp/9A64UdsZn0DbsNy8+72JysMfxNY42o2bdL
         QxIw==
X-Gm-Message-State: APjAAAWqz4e1iKrI49Q5C5erGx1Pi1kyxluNi1R5AWKvzUIx70svQYvx
	qxy5g4HHKJz/mc/DMSTnVaH3dmQg1Ov0aa5iw4O/KwdFATg=
X-Received: by 2002:adf:e602:: with SMTP id p2mr9893409wrm.105.1553560864950;
 Mon, 25 Mar 2019 17:41:04 -0700 (PDT)
MIME-Version: 1.0
References: <7bb2ddd5-0de0-5bbd-0fa2-d60c36966e57@lal.in2p3.fr>
 <252104d3-a407-45cd-a305-927355fb7492@lbl.gov> <edb27021-149e-00a0-f062-c2b8f2d64ede@lal.in2p3.fr>
 <CAN9aCedDzOTKHjBGNZppa0vm2hUj3xrFKTbab1pjThr+UdkhMA@mail.gmail.com>
 <CAHNsURu1VFTAcUn0Tz1qXfP+Ajku4NZpAv0XoEPck10cgnWVrg@mail.gmail.com>
 <CAM=pu+JX1OK1V-5MiR16d3k2D4i-OfkbSHXJ6w_woVFYD3V7AQ@mail.gmail.com>
 <53507429-8a8a-762f-d996-d0c3c70fe629@lal.in2p3.fr> <337f76da-cf6e-d319-4e9a-a190fa88614e@lal.in2p3.fr>
In-Reply-To: <337f76da-cf6e-d319-4e9a-a190fa88614e@lal.in2p3.fr>
From: Ian Kaneshiro <i...@sylabs.io>
Date: Mon, 25 Mar 2019 20:40:28 -0400
Message-ID: <CAHNsURt4bzw7kuZgForGa7VMUQxHSU95+Zb7fMh0D_R2oe5oZg@mail.gmail.com>
Subject: Re: [Singularity] Re: Thoughts from a Docker -> Singularity
 conversion attempt
To: singularity@lbl.gov
Content-Type: multipart/related; boundary="0000000000007e60ed0584f4933f"

--0000000000007e60ed0584f4933f
Content-Type: multipart/alternative; boundary="0000000000007e60ec0584f4933e"

--0000000000007e60ec0584f4933e
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

Hi Hadrien,

Sorry for such a slow response!

Copying from one stage to another using "/*" will be supported. Wildcards
in the %files section is currently not implemented, but an issue has been
opened to track this. In the mean time you would just need to explicitly
copy the directories you would like to keep.

I agree that your use case for building and unit testing software will be
accommodated by my current plans for multistage builds.

Thanks for the examples of use cases for build arguments. It seems to me
like the functionality being provided by build args is something to
consider adding to fit those kinds of use cases. I'd be interested in
hearing if any others have thoughts on this as well.

Best,
Ian

On Wed, Mar 13, 2019 at 12:52 PM Hadrien Grasland <gras...@lal.in2p3.fr>
wrote:

> PS: Never mind, upon closer investigation, it is now possible to use
> docker build arguments in FROM statements, given certain restrictions. I
> have updated my recipes to use that feature.
> Le 13/03/2019 =C3=A0 11:03, Hadrien Grasland a =C3=A9crit :
>
> Hi all,
>
> Sorry for the reply delay, these weeks are a bit busy...
>
> I know the technique of selectively copying file from one container to
> another in order to shrink image size. Sadly, I currently cannot allocate
> enough time to my container-building experiments in order to go through t=
he
> lengthy trial-and-error testing process that this level of size
> optimization requires. Which is why I am satisfied with what standard
> package manager cleanup and docker build --squash can give me.
>
> I think the closest equivalent of this compromise in the multistage setup
> that you are describing would be to copy everything ("/*") from the first
> stage to the second stage. Would the kind of multistage design that you
> envision allow for this?
> ------------------------------
>
> Also, bear in mind that size optimizations is not the only reason why I
> sometimes need a testing stage to be sandwiched inbetween a build stage a=
nd
> a cleanup stage. For example, take this development environment recipe :
> https://github.com/HadrienG2/spack-based-docker/blob/master/gaudi/Dockerf=
ile
> .
>
> To the untrained eyes, this recipe may seem unnecessarily complex, as it
> builds software only to discard the build after the fact. However, the go=
al
> is actually to get a working development environment for a piece of
> software (in this case the Gaudi HEP event processing framework). By
> building the software and running its unit tests, the Dockerfile implicit=
ly
> assesses that given the currently selected set of dependencies, the
> software is buildable and passes its own internal testing. Furthermore,
> although the Gaudi build has been dropped, the complete set of dependenci=
es
> remains installed in the target container, so the next Gaudi build will b=
e
> quick (you only need to clone your git fork and do a spack diy
> ${GAUDI_SPACK_SPEC} in it).
>
> If you bring it all together, this recipe gives you a container which is
> ready to use for the purpose of developing Gaudi, and which has been test=
ed
> to work for this purpose on the latest Gaudi version available at the tim=
e
> where the container was built, all that without the unnecessary size burd=
en
> of a Gaudi source tree and build which you'd immediately replace with one
> of your own Gaudi fork anyway.
>
> I believe this use case would be served by multistage builds though. I
> only need to have a first stage that builds and tests Gaudi, and a second
> stage which drops the build to make a leaner image.
> ------------------------------
>
> Concerning my list of use cases for build arguments...
>
> The use case of building both a debug and a release version of some
> software would not be served by a multi-stage setup, because we are talki=
ng
> about two different software build configurations here ("Debug" vs
> "RelWithDebInfo" or "Release" in CMake-speak) and there is no way to go
> from one to the other without rebuilding the software. See, for example,
> the ACTS_BUILD_TYPE build arg in
> https://github.com/HadrienG2/spack-based-docker/blob/master/acts/Dockerfi=
le
> .
>
> For an example of selecting a software version with Docker build args, se=
e
> the ROOT_VERSION and ROOT_CXX_STANDARD build arguments in
> https://github.com/HadrienG2/spack-based-docker/blob/master/root/Dockerfi=
le
> . These allow me to centrally control all software versions in the stack
> centrally at
> https://github.com/HadrienG2/spack-based-docker/blob/master/rebuild-docke=
r-spack.sh
> .
>
> The third use case which I presented for build flags is something which,
> as far as I know, Docker actually cannot do either at the moment. I would
> like to be able to select from my build script which container I will
> bootstrap from, in order to avoid hardcoding my private repository name i=
n
> my Dockerfiles and to be able to select which version of ROOT a Gaudi
> container (see above) is built from. This becomes more important in
> Singularity, where there is no repository and (AFAIK) I must hardcode an
> entire filesystem path in From, which is obviously less clean / more
> hostile to other people trying to reuse my definition files.
>
> Cheers,
> Hadrien
>
>
> Le 06/03/2019 =C3=A0 17:00, v a =C3=A9crit :
>
> For a concrete example, we can look at Docker multistage builds. Take a
> look at the singularityware/singularity:3.1-slim container vs it's (not
> multistage build) counterpart:
>
> [image: image.png]
>
> That's a huge difference! Both recipes (showing the multistage build, and
> without) are in the Dockerfile at their respective branches:
>
> https://github.com/singularityhub/singularity-docker/blob/3.1-slim/Docker=
file#L41
>
> I have mixed feelings about these builds. On the one hand, the containers
> are a lot more portable. On the other hand, you lose all of the source co=
de
> that the (ultimate) binary files are generated from, so you couldn't buil=
d
> again if needed. To account for this I just build both kinds, as they ser=
ve
> different use cases.
>
>
> On Wed, Mar 6, 2019 at 10:50 AM Ian Kaneshiro <i...@sylabs.io> wrote:
>
>> Morning Hadrien,
>>
>> The definition you proposed would be valid, but it wouldn't have the
>> behavior you're looking for. Multiple %setup/%post/%test sections are
>> concatenated together and ran at the same time. The biggest advantage of
>> multistage builds is in the strive for smaller container images, which I
>> think is what you want to accomplish by installing and removing software=
 in
>> multiple steps. A potential definition would look like this:
>>
>> Bootstrap: docker
>> From: centos:7
>> Stage: devel
>>
>>
>> %setup
>> mkdir -p $SINGULARITY_ROOTFS/root/go/src/hello
>>
>>
>> %files
>> hello.go /root/go/src/hello/hello.go
>>
>>
>> %post
>> yum install wget -y
>>
>> wget https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz
>> tar -C /usr/local -xzf go1.10.3.linux-amd64.tar.gz
>> export PATH=3D$PATH:/usr/local/go/bin
>>
>> cd /root/go/src/hello
>> go build
>> ./hello
>>
>>
>>
>> Bootstrap: docker
>> From: centos:7
>>
>>
>> %files from devel
>> /root/go/src/hello/hello /bin/hello
>>
>> %runscript
>> hello
>>
>> This will allow someone to install and build software in one or more
>> development containers and move it to a final production container where
>> those build tools aren't installed. Using this method, roughly follows t=
he
>> idea behind your proposed definition but without the need to manually
>> remove such tools.
>>
>> Originally I was thinking of something like `%post --base-env` or
>> something to that extent. After giving this more thought, I think this w=
ill
>> be too confusing because there is already precedent for using flags with
>> post to specify bash options, see
>> https://github.com/sylabs/singularity/issues/2656. Another option would
>> be insert an environment variable in post like `SINGULARITY_ENVIRONMENT`
>> called something like `SINGULARITY_BASE_ENVIRONMENT` that a user can eas=
ily
>> source in %post with `source $SINGULARITY_BASE_ENVIRONMENT` in order to =
get
>> the base containers environment.
>>
>> I think we can do something similar to preserve the environment between
>> %post and %test at build time, though it's important to note that the te=
st
>> section can be run directly from the CLI once the container is built, so
>> having behavior be dictated by the post environment could cause problems
>> when test is run after the build if the script is dependent on those
>> variables.
>>
>> With respect to build flags, can you elaborate more on the last two
>> bullets? I'm not exactly sure what behavior you're interested in having.=
 I
>> think multistage builds will allow the first to be addressed.
>>
>>    - A typical use case is building an image twice, once with debug
>>>       software builds (for debugging) and once with release builds (for=
 end usage
>>>       and profiling)
>>>    - Another use case is controlling from remote which version of some
>>>       software gets built, and to synchronize that with the output imag=
e's file
>>>       name.
>>>    - A third use case is synchronizing the directory where image files
>>>       are written across multiple Singularity definition file, and maki=
ng it
>>>       externally configurable.
>>>
>>
>> Best,
>> Ian
>>
>> On Tue, Mar 5, 2019 at 12:26 PM David Godlove <davidg...@gmail.com>
>> wrote:
>>
>>> This is a really groovy thread.  It reminds me why I love working on an
>>> open source project.
>>>
>>> On Tue, Mar 5, 2019 at 9:33 AM Hadrien Grasland <gras...@lal.in2p3.fr>
>>> wrote:
>>>
>>>> Dear Lars,
>>>>
>>>> Thanks for your suggestion! Speaking personally, I am a bit of an
>>>> infrastructure minimalist, so altough I like Singularity's model, it w=
ould
>>>> not be attractive enough to motivate me of migrating from a two-layer
>>>> infrastructure (spack + docker) to a five-layer infrastructure (spack =
+
>>>> docker + hpc-container-maker + docker2singularity + singularity). Howe=
ver,
>>>> I will keep these links around for the benefit of colleagues of mine w=
ho do
>>>> not share my opinions on these matters :)
>>>>
>>>> Hadrien
>>>>
>>>>
>>>> Le 05/03/2019 =C3=A0 09:39, Lars Bilke a =C3=A9crit :
>>>>
>>>> Dear Hadrien,
>>>>
>>>> I just want to draw your attention to the project hpc-container-maker
>>>> <https://github.com/NVIDIA/hpc-container-maker> which allows to script
>>>> container definitions with Python. It supports both Singularity and Do=
cker
>>>> output but I found creating Docker images with a subsequent conversion=
 step
>>>> to Singularity (e.g. via docker2singularity
>>>> <https://github.com/singularityware/docker2singularity>) most useful
>>>> for development (by leveraging Dockers layer caching). I think a lot o=
f
>>>> your issues can be solved by simple scripting the whole image definiti=
on
>>>> process.
>>>>
>>>> Best,
>>>> Lars
>>>>
>>>> Am Montag, 4. M=C3=A4rz 2019 16:34:56 UTC+1 schrieb Hadrien Grasland:
>>>>>
>>>>> Dear Singularity users,
>>>>>
>>>>> I've been packaging HEP software and development environments using a
>>>>> combination of Spack and Docker for a while.
>>>>>
>>>>>    - Spack gives me customizable and ergonomic software builds, with
>>>>>    automated dependency management and peaceful coexistence between d=
ifferent
>>>>>    build configurations.
>>>>>    - Docker gives me cross-OS binary + environment portability, and a
>>>>>    way to "freeze" a snapshot of my rolling Linux distribution of cho=
ice in
>>>>>    order to momentarily prevent Spack from rebuilding everything over=
 and over
>>>>>    again the way it loves to.
>>>>>
>>>>> This is what the end result currently looks like:
>>>>> https://github.com/HadrienG2/spack-based-docker .
>>>>>
>>>>> A problem with using Docker for this purpose, though, is that it does
>>>>> too much container/host isolation for my use case. I don't really car=
e for
>>>>> Docker masquerading as a VM by hiding the host filesystem and process=
es
>>>>> from the container, but I do care about the cumbersome side of rememb=
ering
>>>>> to bind mount everything, ending up with root-owned files in these bi=
nd
>>>>> mounts if I'm not very careful, and ptrace rights being taken away fr=
om me
>>>>> unless I take care to pass the magical "I don't care, I trust this
>>>>> container" flags to the docker run command line. From this perspectiv=
e, I
>>>>> sometimes feel like I'm fighting Docker's cloud-oriented design a bit=
 too
>>>>> much.
>>>>>
>>>>> Which is what led me to investigate Singularity, an experience which =
I
>>>>> now feel ready to report on.
>>>>> ------------------------------
>>>>>
>>>>> Having some previous bad experience from the Docker -> Singularity
>>>>> image conversion machinery, I decided for this attempt to try to stic=
k with
>>>>> a pure Singularity workflow, without Docker getting in the way at any=
 time.
>>>>> This was easier than expected: bootstrapping a zypper-based image act=
ually
>>>>> proved very smooth.
>>>>>
>>>>> My feeling from translating my Docker recipes afterwards is that
>>>>> Singularity does deliver beautifully on the final image usability fro=
nt
>>>>> (hurray for the simple CLI, ptrace privileges, proper file permission=
s, and
>>>>> /home mounting by default), but feels quite a bit more painful than D=
ocker
>>>>> on the image builder's side. Here are some particular pain points tha=
t I
>>>>> encountered, maybe they have some well-known solutions / workarounds =
?
>>>>>
>>>>>    - I miss Docker's build arguments a lot.
>>>>>    - A typical use case is building an image twice, once with debug
>>>>>       software builds (for debugging) and once with release builds (f=
or end usage
>>>>>       and profiling)
>>>>>       - Another use case is controlling from remote which version of
>>>>>       some software gets built, and to synchronize that with the outp=
ut image's
>>>>>       file name.
>>>>>       - A third use case is synchronizing the directory where image
>>>>>       files are written across multiple Singularity definition file, =
and making
>>>>>       it externally configurable.
>>>>>       - I appreciate Singuarity's attempt to cautiously separate
>>>>>    build environment from runtime environment, but find that it makes=
 build
>>>>>    environment management difficult:
>>>>>       - I often have to write each environment-altering statement
>>>>>       three times, once in %post, once in %test, and once in
>>>>>       ${SINGULARITY_ENVIRONMENT}
>>>>>       - Build environment not being carried over from one parent
>>>>>       image to a child image often makes me give up and just write my=
 whole build
>>>>>       setup in ${SINGULARITY_ENVIRONMENT} so that I can source that a=
t the
>>>>>       beginning of the next image.
>>>>>       - %environment is almost never usable for me because most of
>>>>>       the time I need some environment to be set both for runtime and=
 for child
>>>>>       images.
>>>>>       - The idea of separating a build in clear-cut %build, %post,
>>>>>    %test phases is nice in theory, but limiting for complex recipes
>>>>>       - The folder to which I want to copy files may be created
>>>>>       during %post, in which case I need to move files to a temporary=
 directory
>>>>>       during %copy and re-move them later.
>>>>>       - Some tests can only be run at some stages during the build
>>>>>       process, because they rely on a build folder which must be clea=
ned up at
>>>>>       the end of the recipe.
>>>>>       - SINGULARITY_ENVIRONMENT not being sourced before %test is
>>>>>       painful and uncalled for.
>>>>>       - A replacement to Docker layers for build snapshots would be
>>>>>    much appreciated.
>>>>>       - I certainly don't miss the build performance/size vs recipe
>>>>>       readability compromise of Docker saving a layer after every RUN=
 statement...
>>>>>       - ...but I do miss being able to quickly investigate a failed
>>>>>       build and restart it without going through my whole %post secti=
on all over
>>>>>       again.
>>>>>
>>>>> In short, I would be longing for....
>>>>>
>>>>>    - A way to use some externally configurable environment in a
>>>>>    singularity definition file (including, and I guess that's the dif=
ficult
>>>>>    part, in the "From:" statement)
>>>>>    - An alternative to SINGULARITY_ENVIRONMENT for configuring build
>>>>>    environment instead of runtime environment
>>>>>    - A less hacky way to pass environment to childe images' build
>>>>>    recipes (may or may not be merged with the above)
>>>>>    - A way to check if tests are enabled in %post as a more flexible
>>>>>    alternative to the %test section
>>>>>       - ...and runtime environment being sourced before the %test
>>>>>       section begins.
>>>>>    - Faster / easier ways to debug failed Singularity builds than
>>>>>    modifying the recipe and restarting it from the beginning.
>>>>>
>>>>> ...but some of that may be an XY problem coming from my Docker user
>>>>> habits :)
>>>>>
>>>>> Cheers,
>>>>> Hadrien
>>>>>
>>>> --
>>>> You received this message because you are subscribed to the Google
>>>> Groups "singularity" group.
>>>> To unsubscribe from this group and stop receiving emails from it, send
>>>> an email to singu...@lbl.gov.
>>>>
>>>> --
>>>> You received this message because you are subscribed to the Google
>>>> Groups "singularity" group.
>>>> To unsubscribe from this group and stop receiving emails from it, send
>>>> an email to singu...@lbl.gov.
>>>>
>>> --
>>> You received this message because you are subscribed to the Google
>>> Groups "singularity" group.
>>> To unsubscribe from this group and stop receiving emails from it, send
>>> an email to singu...@lbl.gov.
>>>
>>
>>
>> --
>> Ian Kaneshiro
>> Software Engineer, Sylabs, Inc.
>> www.sylabs.io
>> --
>> You received this message because you are subscribed to the Google Group=
s
>> "singularity" group.
>> To unsubscribe from this group and stop receiving emails from it, send a=
n
>> email to singu...@lbl.gov.
>>
>
>
> --
> Vanessa Villamia Sochat
> Stanford University '16
> (603) 321-0676
> --
> You received this message because you are subscribed to the Google Groups
> "singularity" group.
> To unsubscribe from this group and stop receiving emails from it, send an
> email to singu...@lbl.gov.
>
> --
> You received this message because you are subscribed to the Google Groups
> "singularity" group.
> To unsubscribe from this group and stop receiving emails from it, send an
> email to singu...@lbl.gov.
>
> --
> You received this message because you are subscribed to the Google Groups
> "singularity" group.
> To unsubscribe from this group and stop receiving emails from it, send an
> email to singu...@lbl.gov.
>


--=20
Ian Kaneshiro
Software Engineer, Sylabs, Inc.
www.sylabs.io

--0000000000007e60ec0584f4933e
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div dir=3D"ltr"><div dir=3D"ltr">Hi Hadrien,<div><br></di=
v><div>Sorry for such a slow response!</div><div><br></div><div>Copying fro=
m one stage to another using &quot;/*&quot; will be supported. Wildcards in=
 the %files section is currently not implemented, but an issue has been ope=
ned to track this. In the mean time you would just need to explicitly copy =
the directories you would like to keep.</div><div><br></div><div>I agree th=
at your use case for building and unit testing software will be accommodate=
d by my current plans for multistage builds.</div><div><br></div><div>Thank=
s for the examples of use cases for build arguments. It seems to me like th=
e functionality being provided by build args is something to consider addin=
g to fit those kinds of use cases. I&#39;d be interested in hearing if any =
others have thoughts on this as well.<br></div><div><br></div><div>Best,</d=
iv><div>Ian</div></div></div></div><br><div class=3D"gmail_quote"><div dir=
=3D"ltr" class=3D"gmail_attr">On Wed, Mar 13, 2019 at 12:52 PM Hadrien Gras=
land &lt;<a href=3D"mailto:gras...@lal.in2p3.fr">gras...@lal.in2p3.fr</a>&g=
t; wrote:<br></div><blockquote class=3D"gmail_quote" style=3D"margin:0px 0p=
x 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">
 =20
   =20
 =20
  <div bgcolor=3D"#FFFFFF">
    <p>PS: Never mind, upon closer investigation, it is now possible to
      use docker build arguments in FROM statements, given certain
      restrictions. I have updated my recipes to use that feature.<br>
    </p>
    <div class=3D"gmail-m_-2952645638305280264moz-cite-prefix">Le 13/03/201=
9 =C3=A0 11:03, Hadrien Grasland
      a =C3=A9crit=C2=A0:<br>
    </div>
    <blockquote type=3D"cite">
     =20
      <p>Hi all,</p>
      <p>Sorry for the reply delay, these weeks are a bit busy...</p>
      <p>I know the technique of selectively copying file from one
        container to another in order to shrink image size. Sadly, I
        currently cannot allocate enough time to my container-building
        experiments in order to go through the lengthy trial-and-error
        testing process that this level of size optimization requires.
        Which is why I am satisfied with what standard package manager
        cleanup and docker build --squash can give me.</p>
      <p>I think the closest equivalent of this compromise in the
        multistage setup that you are describing would be to copy
        everything (&quot;/*&quot;) from the first stage to the second stag=
e.
        Would the kind of multistage design that you envision allow for
        this?</p>
      <hr width=3D"100%" size=3D"2">
      <p>Also, bear in mind that size optimizations is not the only
        reason why I sometimes need a testing stage to be sandwiched
        inbetween a build stage and a cleanup stage. For example, take
        this development environment recipe :
        <a class=3D"gmail-m_-2952645638305280264moz-txt-link-freetext" href=
=3D"https://github.com/HadrienG2/spack-based-docker/blob/master/gaudi/Docke=
rfile" target=3D"_blank">https://github.com/HadrienG2/spack-based-docker/bl=
ob/master/gaudi/Dockerfile</a>
        .</p>
      <p>To the untrained eyes, this recipe may seem unnecessarily
        complex, as it builds software only to discard the build after
        the fact. However, the goal is actually to get a working
        development environment for a piece of software (in this case
        the Gaudi HEP event processing framework). By building the
        software and running its unit tests, the Dockerfile implicitly
        assesses that given the currently selected set of dependencies,
        the software is buildable and passes its own internal testing.
        Furthermore, although the Gaudi build has been dropped, the
        complete set of dependencies remains installed in the target
        container, so the next Gaudi build will be quick (you only need
        to clone your git fork and do a spack diy ${GAUDI_SPACK_SPEC} in
        it).<br>
      </p>
      <p>If you bring it all together, this recipe gives you a container
        which is ready to use for the purpose of developing Gaudi, and
        which has been tested to work for this purpose on the latest
        Gaudi version available at the time where the container was
        built, all that without the unnecessary size burden of a Gaudi
        source tree and build which you&#39;d immediately replace with one
        of your own Gaudi fork anyway.<br>
      </p>
      <p>I believe this use case would be served by multistage builds
        though. I only need to have a first stage that builds and tests
        Gaudi, and a second stage which drops the build to make a leaner
        image.</p>
      <hr width=3D"100%" size=3D"2">
      <p>Concerning my list of use cases for build arguments...<br>
      </p>
      <p>The use case of building both a debug and a release version of
        some software would not be served by a multi-stage setup,
        because we are talking about two different software build
        configurations here (&quot;Debug&quot; vs &quot;RelWithDebInfo&quot=
; or &quot;Release&quot; in
        CMake-speak) and there is no way to go from one to the other
        without rebuilding the software. See, for example, the
        ACTS_BUILD_TYPE build arg in
        <a class=3D"gmail-m_-2952645638305280264moz-txt-link-freetext" href=
=3D"https://github.com/HadrienG2/spack-based-docker/blob/master/acts/Docker=
file" target=3D"_blank">https://github.com/HadrienG2/spack-based-docker/blo=
b/master/acts/Dockerfile</a>
        .</p>
      <p>For an example of selecting a software version with Docker
        build args, see the ROOT_VERSION and ROOT_CXX_STANDARD build
        arguments in
        <a class=3D"gmail-m_-2952645638305280264moz-txt-link-freetext" href=
=3D"https://github.com/HadrienG2/spack-based-docker/blob/master/root/Docker=
file" target=3D"_blank">https://github.com/HadrienG2/spack-based-docker/blo=
b/master/root/Dockerfile</a>
        . These allow me to centrally control all software versions in
        the stack centrally at
        <a class=3D"gmail-m_-2952645638305280264moz-txt-link-freetext" href=
=3D"https://github.com/HadrienG2/spack-based-docker/blob/master/rebuild-doc=
ker-spack.sh" target=3D"_blank">https://github.com/HadrienG2/spack-based-do=
cker/blob/master/rebuild-docker-spack.sh</a>
        .<br>
      </p>
      <p>The third use case which I presented for build flags is
        something which, as far as I know, Docker actually cannot do
        either at the moment. I would like to be able to select from my
        build script which container I will bootstrap from, in order to
        avoid hardcoding my private repository name in my Dockerfiles
        and to be able to select which version of ROOT a Gaudi container
        (see above) is built from. This becomes more important in
        Singularity, where there is no repository and (AFAIK) I must
        hardcode an entire filesystem path in From, which is obviously
        less clean / more hostile to other people trying to reuse my
        definition files.<br>
      </p>
      <p>Cheers,<br>
        Hadrien<br>
      </p>
      <p><br>
      </p>
      <div class=3D"gmail-m_-2952645638305280264moz-cite-prefix">Le 06/03/2=
019 =C3=A0 17:00, v a =C3=A9crit=C2=A0:<br>
      </div>
      <blockquote type=3D"cite">
       =20
        <div dir=3D"ltr">
          <div dir=3D"ltr">For a concrete example, we can look at Docker
            multistage builds. Take a look at the
            singularityware/singularity:3.1-slim container vs it&#39;s (not
            multistage build) counterpart:
            <div><br>
            </div>
            <div>
              <div><img src=3D"cid:169b75fb197cb971f161" alt=3D"image.png" =
width=3D"236" height=3D"169"><br>
              </div>
            </div>
            <div><br>
            </div>
            <div>That&#39;s a huge difference! Both recipes (showing the
              multistage build, and without) are in the Dockerfile at
              their respective branches:</div>
            <div><a href=3D"https://github.com/singularityhub/singularity-d=
ocker/blob/3.1-slim/Dockerfile#L41" target=3D"_blank">https://github.com/si=
ngularityhub/singularity-docker/blob/3.1-slim/Dockerfile#L41</a><br>
            </div>
            <div><br>
            </div>
            <div>I have mixed feelings about these builds. On the one
              hand, the containers are a lot more portable. On the other
              hand, you lose all of the source code that the (ultimate)
              binary files are generated from, so you couldn&#39;t build
              again if needed. To account for this I just build both
              kinds, as they serve different use cases.</div>
            <div><br>
            </div>
          </div>
        </div>
        <br>
        <div class=3D"gmail_quote">
          <div dir=3D"ltr" class=3D"gmail_attr">On Wed, Mar 6, 2019 at 10:5=
0
            AM Ian Kaneshiro &lt;<a href=3D"mailto:i...@sylabs.io" target=
=3D"_blank">i...@sylabs.io</a>&gt; wrote:<br>
          </div>
          <blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8=
ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">
            <div dir=3D"ltr">
              <div dir=3D"ltr">
                <div>Morning Hadrien,</div>
                <div><br>
                </div>
                <div>The definition you proposed would be valid, but it
                  wouldn&#39;t have the behavior you&#39;re looking for.
                  Multiple %setup/%post/%test sections are concatenated
                  together and ran at the same time. The biggest
                  advantage of multistage builds is in the strive for
                  smaller container images, which I think is what you
                  want to accomplish by installing and removing software
                  in multiple steps. A potential definition would look
                  like this:</div>
                <div><br>
                </div>
                <div>Bootstrap: docker</div>
                <div>From: centos:7</div>
                <div>Stage: devel</div>
                <div><br>
                </div>
                <div><br>
                </div>
                <div>%setup</div>
                <div><span style=3D"white-space:pre-wrap">=09</span>mkdir -=
p
                  $SINGULARITY_ROOTFS/root/go/src/hello</div>
                <div><br>
                </div>
                <div><br>
                </div>
                <div>%files</div>
                <div><span style=3D"white-space:pre-wrap">=09</span>hello.g=
o
                  /root/go/src/hello/hello.go</div>
                <div><br>
                </div>
                <div><br>
                </div>
                <div>%post</div>
                <div><span style=3D"white-space:pre-wrap">=09</span>yum
                  install wget -y</div>
                <div><br>
                </div>
                <div><span style=3D"white-space:pre-wrap">=09</span>wget <a=
 href=3D"https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz" target=3D"_b=
lank">https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz</a></div>
                <div><span style=3D"white-space:pre-wrap">=09</span>tar -C
                  /usr/local -xzf go1.10.3.linux-amd64.tar.gz</div>
                <div><span style=3D"white-space:pre-wrap">=09</span>export
                  PATH=3D$PATH:/usr/local/go/bin</div>
                <div><br>
                </div>
                <div><span style=3D"white-space:pre-wrap">=09</span>cd
                  /root/go/src/hello</div>
                <div><span style=3D"white-space:pre-wrap">=09</span>go buil=
d</div>
                <div><span style=3D"white-space:pre-wrap">=09</span></div>
                <div><span style=3D"white-space:pre-wrap">=09</span>./hello=
</div>
                <div><br>
                </div>
                <div><br>
                </div>
                <div><br>
                </div>
                <div>Bootstrap: docker</div>
                <div>From: centos:7</div>
                <div><br>
                </div>
                <div><br>
                </div>
                <div>%files from devel</div>
                <div><span style=3D"white-space:pre-wrap">=09</span>/root/g=
o/src/hello/hello
                  /bin/hello</div>
                <div><br>
                </div>
                <div>%runscript</div>
                <div><span style=3D"white-space:pre-wrap">=09</span>hello</=
div>
                <div><br>
                </div>
                <div>This will allow someone to install and build
                  software in one or more development containers and
                  move it to a final production container where those
                  build tools aren&#39;t installed. Using this method,
                  roughly follows the idea behind your proposed
                  definition but without the need to manually remove
                  such tools.</div>
                <div><br>
                </div>
                <div>Originally I was thinking of something like `%post
                  --base-env` or something to that extent. After giving
                  this more thought, I think this will be too confusing
                  because there is already precedent for using flags
                  with post to specify bash options, see <a href=3D"https:/=
/github.com/sylabs/singularity/issues/2656" target=3D"_blank">https://githu=
b.com/sylabs/singularity/issues/2656</a>.
                  Another option would be insert an environment variable
                  in post like `SINGULARITY_ENVIRONMENT` called
                  something like `SINGULARITY_BASE_ENVIRONMENT` that a
                  user can easily source in %post with `source
                  $SINGULARITY_BASE_ENVIRONMENT` in order to get the
                  base containers environment.</div>
                <div><br>
                </div>
                <div>I think we can do something similar to preserve the
                  environment between %post and %test at build time,
                  though it&#39;s important to note that the test section
                  can be run directly from the CLI once the container is
                  built, so having behavior be dictated by the post
                  environment could cause problems when test is run
                  after the build if the script is dependent on those
                  variables.</div>
                <div><br>
                </div>
                <div>With respect to build flags, can you elaborate more
                  on the last two bullets? I&#39;m not exactly sure what
                  behavior you&#39;re interested in having. I think
                  multistage builds will allow the first to be
                  addressed.</div>
                <div>
                  <ul>
                    <blockquote class=3D"gmail_quote" style=3D"margin:0px 0=
px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">
                      <ul>
                        <li style=3D"margin-left:15px">A typical use case
                          is building an image twice, once with debug
                          software builds (for debugging) and once with
                          release builds (for end usage and profiling)</li>
                      </ul>
                      <ul>
                        <li style=3D"margin-left:15px">Another use case is
                          controlling from remote which version of some
                          software gets built, and to synchronize that
                          with the output image&#39;s file name.</li>
                      </ul>
                      <ul>
                        <li style=3D"margin-left:15px">A third use case is
                          synchronizing the directory where image files
                          are written across multiple Singularity
                          definition file, and making it externally
                          configurable.</li>
                      </ul>
                    </blockquote>
                  </ul>
                </div>
                <div>Best,</div>
                <div>Ian</div>
              </div>
            </div>
            <br>
            <div class=3D"gmail_quote">
              <div dir=3D"ltr" class=3D"gmail_attr">On Tue, Mar 5, 2019 at
                12:26 PM David Godlove &lt;<a href=3D"mailto:davidg...@gmai=
l.com" target=3D"_blank">davidg...@gmail.com</a>&gt;
                wrote:<br>
              </div>
              <blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px=
 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">
                <div dir=3D"ltr">This is a really groovy thread.=C2=A0 It
                  reminds me why I love working on an open source
                  project.=C2=A0=C2=A0</div>
                <br>
                <div class=3D"gmail_quote">
                  <div dir=3D"ltr" class=3D"gmail_attr">On Tue, Mar 5, 2019
                    at 9:33 AM Hadrien Grasland &lt;<a href=3D"mailto:gras.=
..@lal.in2p3.fr" target=3D"_blank">gras...@lal.in2p3.fr</a>&gt;
                    wrote:<br>
                  </div>
                  <blockquote class=3D"gmail_quote" style=3D"margin:0px 0px=
 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">
                    <div bgcolor=3D"#FFFFFF">
                      <p>Dear Lars,</p>
                      <p>Thanks for your suggestion! Speaking
                        personally, I am a bit of an infrastructure
                        minimalist, so altough I like Singularity&#39;s
                        model, it would not be attractive enough to
                        motivate me of migrating from a two-layer
                        infrastructure (spack + docker) to a five-layer
                        infrastructure (spack + docker +
                        hpc-container-maker + docker2singularity +
                        singularity). However, I will keep these links
                        around for the benefit of colleagues of mine who
                        do not share my opinions on these matters :)</p>
                      <p>Hadrien</p>
                      <p><br>
                      </p>
                      <div class=3D"gmail-m_-2952645638305280264gmail-m_776=
7702017045402841gmail-m_-3152860234471032459gmail-m_7596858960167937554moz-=
cite-prefix">Le
                        05/03/2019 =C3=A0 09:39, Lars Bilke a =C3=A9crit=C2=
=A0:<br>
                      </div>
                      <blockquote type=3D"cite">
                        <div dir=3D"ltr">Dear Hadrien,
                          <div><br>
                          </div>
                          <div>I just want to draw your attention to the
                            project <a href=3D"https://github.com/NVIDIA/hp=
c-container-maker" target=3D"_blank">hpc-container-maker</a>=C2=A0which
                            allows to script container definitions with
                            Python. It supports both Singularity and
                            Docker output but I found creating Docker
                            images with a subsequent conversion step to
                            Singularity (e.g. via <a href=3D"https://github=
.com/singularityware/docker2singularity" target=3D"_blank">docker2singulari=
ty</a>)
                            most useful for development (by leveraging
                            Dockers layer caching). I think a lot of
                            your issues can be solved by simple
                            scripting the whole image definition
                            process.</div>
                          <div><br>
                          </div>
                          <div>Best,</div>
                          <div>Lars<br>
                            <br>
                            Am Montag, 4. M=C3=A4rz 2019 16:34:56 UTC+1
                            schrieb Hadrien Grasland:
                            <blockquote class=3D"gmail_quote" style=3D"marg=
in:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1e=
x">
                              <div bgcolor=3D"#FFFFFF">
                                <p>Dear Singularity users,</p>
                                <p>I&#39;ve been packaging HEP software and
                                  development environments using a
                                  combination of Spack and Docker for a
                                  while.</p>
                                <ul>
                                  <li>Spack gives me customizable and
                                    ergonomic software builds, with
                                    automated dependency management and
                                    peaceful coexistence between
                                    different build configurations.</li>
                                  <li>Docker gives me cross-OS binary +
                                    environment portability, and a way
                                    to &quot;freeze&quot; a snapshot of my =
rolling
                                    Linux distribution of choice in
                                    order to momentarily prevent Spack
                                    from rebuilding everything over and
                                    over again the way it loves to.</li>
                                </ul>
                                <p>This is what the end result currently
                                  looks like: <a href=3D"https://github.com=
/HadrienG2/spack-based-docker" rel=3D"nofollow" target=3D"_blank">https://g=
ithub.com/HadrienG2/spack-based-docker</a>
                                  .</p>
                                <p>A problem with using Docker for this
                                  purpose, though, is that it does too
                                  much container/host isolation for my
                                  use case. I don&#39;t really care for
                                  Docker masquerading as a VM by hiding
                                  the host filesystem and processes from
                                  the container, but I do care about the
                                  cumbersome side of remembering to bind
                                  mount everything, ending up with
                                  root-owned files in these bind mounts
                                  if I&#39;m not very careful, and ptrace
                                  rights being taken away from me unless
                                  I take care to pass the magical &quot;I
                                  don&#39;t care, I trust this container&qu=
ot;
                                  flags to the docker run command line.
                                  From this perspective, I sometimes
                                  feel like I&#39;m fighting Docker&#39;s
                                  cloud-oriented design a bit too much.</p>
                                <p>Which is what led me to investigate
                                  Singularity, an experience which I now
                                  feel ready to report on.</p>
                                <hr width=3D"100%" size=3D"2">
                                <p>Having some previous bad experience
                                  from the Docker -&gt; Singularity
                                  image conversion machinery, I decided
                                  for this attempt to try to stick with
                                  a pure Singularity workflow, without
                                  Docker getting in the way at any time.
                                  This was easier than expected:
                                  bootstrapping a zypper-based image
                                  actually proved very smooth.<br>
                                </p>
                                <p>My feeling from translating my Docker
                                  recipes afterwards is that Singularity
                                  does deliver beautifully on the final
                                  image usability front (hurray for the
                                  simple CLI, ptrace privileges, proper
                                  file permissions, and /home mounting
                                  by default), but feels quite a bit
                                  more painful than Docker on the image
                                  builder&#39;s side. Here are some
                                  particular pain points that I
                                  encountered, maybe they have some
                                  well-known solutions / workarounds ?</p>
                                <ul>
                                  <li>I miss Docker&#39;s build arguments a
                                    lot.<br>
                                  </li>
                                  <ul>
                                    <li>A typical use case is building
                                      an image twice, once with debug
                                      software builds (for debugging)
                                      and once with release builds (for
                                      end usage and profiling)</li>
                                    <li>Another use case is controlling
                                      from remote which version of some
                                      software gets built, and to
                                      synchronize that with the output
                                      image&#39;s file name.</li>
                                    <li>A third use case is
                                      synchronizing the directory where
                                      image files are written across
                                      multiple Singularity definition
                                      file, and making it externally
                                      configurable.<br>
                                    </li>
                                  </ul>
                                  <li>I appreciate Singuarity&#39;s attempt
                                    to cautiously separate build
                                    environment from runtime
                                    environment, but find that it makes
                                    build environment management
                                    difficult:</li>
                                  <ul>
                                    <li>I often have to write each
                                      environment-altering statement
                                      three times, once in %post, once
                                      in %test, and once in
                                      ${SINGULARITY_ENVIRONMENT}</li>
                                    <li>Build environment not being
                                      carried over from one parent image
                                      to a child image often makes me
                                      give up and just write my whole
                                      build setup in
                                      ${SINGULARITY_ENVIRONMENT} so that
                                      I can source that at the beginning
                                      of the next image.</li>
                                    <li>%environment is almost never
                                      usable for me because most of the
                                      time I need some environment to be
                                      set both for runtime and for child
                                      images.<br>
                                    </li>
                                  </ul>
                                  <li>The idea of separating a build in
                                    clear-cut %build, %post, %test
                                    phases is nice in theory, but
                                    limiting for complex recipes</li>
                                  <ul>
                                    <li>The folder to which I want to
                                      copy files may be created during
                                      %post, in which case I need to
                                      move files to a temporary
                                      directory during %copy and re-move
                                      them later.</li>
                                    <li>Some tests can only be run at
                                      some stages during the build
                                      process, because they rely on a
                                      build folder which must be cleaned
                                      up at the end of the recipe.</li>
                                    <li>SINGULARITY_ENVIRONMENT not
                                      being sourced before %test is
                                      painful and uncalled for.<br>
                                    </li>
                                  </ul>
                                  <li>A replacement to Docker layers for
                                    build snapshots would be much
                                    appreciated.</li>
                                  <ul>
                                    <li>I certainly don&#39;t miss the buil=
d
                                      performance/size vs recipe
                                      readability compromise of Docker
                                      saving a layer after every RUN
                                      statement...</li>
                                    <li>...but I do miss being able to
                                      quickly investigate a failed build
                                      and restart it without going
                                      through my whole %post section all
                                      over again.</li>
                                  </ul>
                                </ul>
                                <p>In short, I would be longing for....</p>
                                <ul>
                                  <li>A way to use some externally
                                    configurable environment in a
                                    singularity definition file
                                    (including, and I guess that&#39;s the
                                    difficult part, in the &quot;From:&quot=
;
                                    statement)</li>
                                  <li>An alternative to
                                    SINGULARITY_ENVIRONMENT for
                                    configuring build environment
                                    instead of runtime environment</li>
                                  <li>A less hacky way to pass
                                    environment to childe images&#39; build
                                    recipes (may or may not be merged
                                    with the above)<br>
                                  </li>
                                  <li>A way to check if tests are
                                    enabled in %post as a more flexible
                                    alternative to the %test section</li>
                                  <ul>
                                    <li>...and runtime environment being
                                      sourced before the %test section
                                      begins.</li>
                                  </ul>
                                  <li>Faster / easier ways to debug
                                    failed Singularity builds than
                                    modifying the recipe and restarting
                                    it from the beginning.</li>
                                </ul>
                                <p>...but some of that may be an XY
                                  problem coming from my Docker user
                                  habits :)<br>
                                </p>
                                <p>Cheers,<br>
                                  Hadrien<br>
                                </p>
                              </div>
                            </blockquote>
                          </div>
                        </div>
                        -- <br>
                        You received this message because you are
                        subscribed to the Google Groups &quot;singularity&q=
uot;
                        group.<br>
                        To unsubscribe from this group and stop
                        receiving emails from it, send an email to <a href=
=3D"mailto:singu...@lbl.gov" target=3D"_blank">singu...@lbl.gov</a>.<br>
                      </blockquote>
                    </div>
                    -- <br>
                    You received this message because you are subscribed
                    to the Google Groups &quot;singularity&quot; group.<br>
                    To unsubscribe from this group and stop receiving
                    emails from it, send an email to <a href=3D"mailto:sing=
u...@lbl.gov" target=3D"_blank">singu...@lbl.gov</a>.<br>
                  </blockquote>
                </div>
                -- <br>
                You received this message because you are subscribed to
                the Google Groups &quot;singularity&quot; group.<br>
                To unsubscribe from this group and stop receiving emails
                from it, send an email to <a href=3D"mailto:singu...@lbl.go=
v" target=3D"_blank">singu...@lbl.gov</a>.<br>
              </blockquote>
            </div>
            <br clear=3D"all">
            <div><br>
            </div>
            -- <br>
            <div dir=3D"ltr" class=3D"gmail-m_-2952645638305280264gmail-m_7=
767702017045402841gmail_signature">
              <div dir=3D"ltr">
                <div>
                  <div dir=3D"ltr">
                    <div style=3D"color:rgb(80,0,80);font-size:12.8px">
                      <div>
                        <div dir=3D"ltr">
                          <div dir=3D"ltr">
                            <div dir=3D"ltr">
                              <div style=3D"color:rgb(34,34,34);font-size:1=
2.8px">Ian
                                Kaneshiro</div>
                              <div style=3D"color:rgb(34,34,34);font-size:1=
2.8px">Software
                                Engineer, Sylabs, Inc.</div>
                              <div style=3D"color:rgb(34,34,34);font-size:1=
2.8px"><a href=3D"http://www.sylabs.io/" style=3D"color:rgb(17,85,204)" tar=
get=3D"_blank">www.sylabs.io</a></div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            -- <br>
            You received this message because you are subscribed to the
            Google Groups &quot;singularity&quot; group.<br>
            To unsubscribe from this group and stop receiving emails
            from it, send an email to <a href=3D"mailto:singu...@lbl.gov" t=
arget=3D"_blank">singu...@lbl.gov</a>.<br>
          </blockquote>
        </div>
        <br clear=3D"all">
        <div><br>
        </div>
        -- <br>
        <div dir=3D"ltr" class=3D"gmail-m_-2952645638305280264gmail_signatu=
re">Vanessa Villamia Sochat<br>
          Stanford University &#39;16<br>
          <div>
            <div>
              <div>(603) 321-0676</div>
            </div>
          </div>
        </div>
        -- <br>
        You received this message because you are subscribed to the
        Google Groups &quot;singularity&quot; group.<br>
        To unsubscribe from this group and stop receiving emails from
        it, send an email to <a href=3D"mailto:singu...@lbl.gov" target=3D"=
_blank">singu...@lbl.gov</a>.<br>
      </blockquote>
      -- <br>
      You received this message because you are subscribed to the Google
      Groups &quot;singularity&quot; group.<br>
      To unsubscribe from this group and stop receiving emails from it,
      send an email to <a href=3D"mailto:singu...@lbl.gov" target=3D"_blank=
">singu...@lbl.gov</a>.<br>
    </blockquote>
  </div>


<p></p>

-- <br>
You received this message because you are subscribed to the Google Groups &=
quot;singularity&quot; group.<br>
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to <a href=3D"mailto:singu...@lbl.gov" target=3D"_blank">singu...@lbl.=
gov</a>.<br>
</blockquote></div><br clear=3D"all"><div><br></div>-- <br><div dir=3D"ltr"=
 class=3D"gmail_signature"><div dir=3D"ltr"><div><div dir=3D"ltr"><div styl=
e=3D"color:rgb(80,0,80);font-size:12.8px"><div><div dir=3D"ltr"><div dir=3D=
"ltr"><div dir=3D"ltr"><div style=3D"color:rgb(34,34,34);font-size:12.8px">=
Ian Kaneshiro</div><div style=3D"color:rgb(34,34,34);font-size:12.8px">Soft=
ware Engineer, Sylabs, Inc.</div><div style=3D"color:rgb(34,34,34);font-siz=
e:12.8px"><a href=3D"http://www.sylabs.io/" style=3D"color:rgb(17,85,204)" =
target=3D"_blank">www.sylabs.io</a></div></div></div></div></div></div></di=
v></div></div></div>

--0000000000007e60ec0584f4933e--

--0000000000007e60ed0584f4933f
Content-Type: image/png; name="image.png"
Content-Disposition: inline; filename="image.png"
Content-Transfer-Encoding: base64
Content-ID: <169b75fb197cb971f161>
X-Attachment-Id: 169b75fb197cb971f161

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
--0000000000007e60ed0584f4933f--
